{"version":3,"sources":["../node_modules/classnames/bind.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty.js","../node_modules/email-validator/index.js","../node_modules/react-facebook-login/dist/facebook-login-with-button.js","../node_modules/classnames/index.js","../node_modules/semver-compare/index.js","../node_modules/country-list/country-list.js","../../source/constants.js","../../source/util.js","../../source/ParseError.js","../../source/metadata.js","../../source/extension.js","../../source/isViablePhoneNumber.js","../../source/parseDigits.js","../../source/parseIncompletePhoneNumber.js","../../source/getNumberType_.js","../../source/isPossibleNumber_.js","../../source/IDD.js","../../source/RFC3966.js","../../source/validate_.js","../../source/format_.js","../../source/PhoneNumber.js","../../source/parse_.js","../../source/parsePhoneNumber_.js","../../source/parsePhoneNumber.js","../../source/parsePhoneNumberFromString_.js","../../source/parsePhoneNumberFromString.js","../../../source/findNumbers/util.js","../../../source/findNumbers/parsePreCandidate.js","../../../source/findNumbers/isValidPreCandidate.js","../../../source/findNumbers/utf-8.js","../../../source/findNumbers/isValidCandidate.js","../../source/findPhoneNumbers_.js","../../../source/findNumbers/Leniency.js","../../source/PhoneNumberMatcher.js","../../source/AsYouType.js","../node_modules/libphonenumber-js/index.es6.js","../node_modules/react-flag-icon-css/module/functions/constants.js","../node_modules/react-flag-icon-css/module/functions/classnames.js","../node_modules/react-flag-icon-css/module/functions/classNameToStyleName.js","../node_modules/react-flag-icon-css/module/static/enums.js","../node_modules/react-flag-icon-css/module/functions/propTypes.js","../node_modules/react-flag-icon-css/module/types/propTypes.js","../node_modules/react-flag-icon-css/module/functions/props.js","../node_modules/react-flag-icon-css/module/functions/options.js","../node_modules/react-flag-icon-css/module/functions/styles.js","../node_modules/react-flag-icon-css/module/FlagIcon/FlagIcon.js","../node_modules/react-flag-icon-css/module/styles.js","../node_modules/react-flag-icon-css/module/FlagIcon/FlagIconFactory.js","../node_modules/react-flag-icon-css/module/index.js"],"names":["hasOwn","hasOwnProperty","classNames","classes","i","arguments","length","arg","argType","push","this","Array","isArray","apply","key","call","join","module","exports","default","_defineProperty","obj","value","Object","defineProperty","enumerable","configurable","writable","tester","validate","email","test","parts","split","some","part","e","require","t","n","o","r","id","loaded","m","c","p","decodeURIComponent","replace","RegExp","encodeURIComponent","__esModule","TypeError","ReferenceError","s","assign","prototype","l","b","h","u","__proto__","getPrototypeOf","concat","state","isSdkLoaded","isProcessing","responseApi","window","FB","api","locale","props","language","fields","callback","checkLoginState","setStateIfMounted","authResponse","onFailure","status","checkLoginAfterRefresh","login","click","isDisabled","setState","scope","appId","onClick","a","returnScopes","responseType","redirectUri","disableMobileRedirect","authType","f","defaultPrevented","client_id","redirect_uri","return_scopes","response_type","auth_type","isMobile","location","href","create","constructor","setPrototypeOf","_isMounted","document","getElementById","sdkLoaded","setFbAsyncInit","loadSdkAsynchronously","createElement","body","appendChild","autoLoad","getLoginStatus","xfbml","cookie","version","fbAsyncInit","init","isRedirectedFromFb","search","getElementsByTagName","src","parentNode","insertBefore","render","Error","Component","propTypes","bool","func","isRequired","string","defaultProps","navigator","standalone","userAgent","match","g","keys","map","name","array","number","object","symbol","any","arrayOf","element","instanceOf","node","objectOf","oneOf","oneOfType","shape","exact","checkPropTypes","PropTypes","cssClass","dangerouslySetInnerHTML","__html","transition","opacity","containerStyle","size","icon","textButton","typeButton","buttonStyle","d","indexOf","toLowerCase","tag","disabled","style","rel","type","className","renderOwnButton","locals","small","medium","metro","fa","toString","inner","pa","pb","na","Number","nb","isNaN","data","nameMap","codeMap","mapCodeAndName","country","code","forEach","overwrite","countries","foundIndex","findIndex","item","getCode","getName","getNames","getCodes","getCodeList","getNameList","getData","VALID_PUNCTUATION","matchesEntirely","text","regular_expression","ParseError","Metadata","metadata","is_object","type_of","validateMetadata","compare","hasCountry","countryCallingCodes","country_metadata","v1","v2","formats","_getFormats","_","Format","_getNationalPrefixFormattingRule","_getNationalPrefixIsOptionalWhenFormatting","types","hasTypes","getType","Type","country_calling_code","_format","usesNationalPrefix","nationalPrefixFormattingRule","getCountryCallingCode","isSupportedCountry","create_extension_pattern","purpose","single_extension_characters","RFC3966_EXTN_PREFIX","EXTN_PATTERNS_FOR_PARSING","EXTN_PATTERNS_FOR_MATCHING","EXTN_PATTERN","VALID_PHONE_NUMBER_PATTERN","isViablePhoneNumber","DIGITS","parseDigit","character","parseDigits","result","digit","parseIncompletePhoneNumber","parsePhoneNumberCharacter","NON_FIXED_LINE_PHONE_TYPES","getNumberType","input","options","nationalNumber","is_of_type","_type","checkNumberLengthForType","type_info","possible_lengths","mobile_type","merged","sort","mergeArrays","actual_length","minimum_length","is_possible_number","national_number","is_international","CAPTURING_DIGIT_PATTERN","SINGLE_IDD_PREFIX","parseRFC3966","ext","formatRFC3966","isValidNumber","defaultOptions","formatExtension","countryCallingCode","addExtension","format_national_number","IDDPrefix","countryMetadata","getIDDPrefix","formattedForSameCountryCallingCode","toCountryCallingCode","fromCountry","toCountryMetadata","fromCountryMetadata","formatIDDSameCountryCallingCodeNumber","FIRST_GROUP_PATTERN","format_national_number_using_format","format","useInternationalFormat","includeNationalPrefixForNationalFormat","formattedNumber","changeInternationalFormatStyle","format_as","available_formats","last_leading_digits_pattern","choose_format_for_number","local","PhoneNumber","isCountryCode","_metadata","isPossibleNumber","formatNumber","PHONE_NUMBER_START_PATTERN","AFTER_PHONE_NUMBER_END_PATTERN","parse","parse_input","formatted_phone_number","parse_phone_number","carrierCode","phoneNumber","valid","possible","phone","extract_formatted_phone_number","starts_at","strip_national_prefix_and_carrier_code","national_prefix_pattern","national_prefix_matcher","national_significant_number","captured_groups_count","find_country_code","national_phone_number","possible_countries","_find_country_code","with_extension_stripped","start","number_without_extension","matches","extractExtension","default_country","extractCountryCallingCode","carrier_code","potential_national_number","parse_national_number","exactCountry","numberWithoutIDD","IDDPrefixPattern","matchedGroups","stripIDDPrefix","parsePhoneNumber","parseNumber","normalizeArguments","args","arg_1","arg_2","arg_3","arg_4","isObject","defaultCountry","parsePhoneNumberFromString","undefined","error","parsePhoneNumberFromString_","limit","lower","upper","trimAfterFirstMatch","regexp","index","SECOND_NUMBER_START_PATTERN","parsePreCandidate","candidate","SLASH_SEPARATED_DATES","TIME_STAMPS","TIME_STAMPS_SUFFIX_LEADING","isValidPreCandidate","offset","followingText","_pZ","pZ","_pL","pL_regexp","pL","pSc_regexp","pSc","pMn_regexp","pMn","latinLetterRegexp","isLatinLetter","letter","isInvalidPunctuationSymbol","LEAD_CLASS_LEADING","BRACKET_PAIR_LIMIT","MATCHING_BRACKETS_ENTIRE","NON_PARENS","PUB_PAGES","isValidCandidate","leniency","previousChar","lastCharIndex","nextChar","VALID_PHONE_NUMBER","WHITESPACE_IN_THE_BEGINNING_PATTERN","PUNCTUATION_IN_THE_END_PATTERN","PhoneNumberSearch","exec","startsAt","parseCandidate","extended","POSSIBLE","VALID","containsOnlyValidXChars","STRICT_GROUPING","candidateString","containsMoreThanOneSlashInNationalNumber","isNationalPrefixPresentIfRequired","checkNumberGroupingIsValid","EXACT_GROUPING","charAtIndex","charAtNextIndex","util","MatchType","phoneNumberRegion","formatRule","PhoneNumberUtil","rawInputCopy","firstSlashInBodyIndex","secondSlashInBodyIndex","CountryCodeSource","String","normalizedCandidate","normalizeDigits","formattedNumberGroups","getNationalNumberGroups","checkGroups","alternateFormats","MetadataManager","nationalSignificantNumber","rfc3966Format","endIndex","startIndex","allNumberGroupsAreExactlyPresent","candidateGroups","candidateNumberGroupIndex","substring","formattedNumberGroupIndex","endsWith","allNumberGroupsRemainGrouped","fromIndex","countryCode","region","Character","startsWith","INNER_MATCHES","leadLimit","punctuationLimit","blockLimit","MAX_LENGTH_FOR_NSN","punctuation","digitSequence","pNd","PATTERN","UNWANTED_END_CHAR_PATTERN","MAX_SAFE_INTEGER","Math","PhoneNumberMatcher","searchIndex","maxTries","Leniency","extractInnerMatch","endsAt","isFirstMatch","possibleInnerMatch","group","parseAndVerify","LONGEST_DUMMY_PHONE_NUMBER","repeat","DIGIT_PLACEHOLDER_MATCHER","CREATE_CHARACTER_CLASS_PATTERN","CREATE_STANDALONE_DIGIT_PATTERN","ELIGIBLE_FORMAT_PATTERN","VALID_INCOMPLETE_PHONE_NUMBER_PATTERN","AsYouType","extracted_number","processInput","previous_national_prefix","nationalPrefix","formatted_national_phone_number","formatNationalNumber","formatFullNumber","isInternational","next_digits","national_number_formatted_with_previous_format","formatNextNationalNumberDigits","formatted_number","filter","leading_digits","index_of_leading_digits_pattern","had_enough_leading_digits","leading_digits_patterns_count","leading_digits_pattern_index","leading_digits_pattern","chosenFormat","matching_formats","matcher","isFormatApplicable","createFormattingTemplate","full_number","formattedNationalNumber","selectedCountry","slice","template","getTemplateForNumberFormatPattern","DIGIT_PLACEHOLDER","number_pattern","dummy_phone_number_matching_format_pattern","number_format","getFormatFormat","strict_pattern","national_number_dummy_digits","digits","partially_populated_template","last_match_position","cut_stripping_dangling_braces","parsedInput","cut_before_index","dangling_braces","cleared_string","strip_dangling_braces","times","parameters","parsePhoneNumberFromStringCustom","PhoneNumberSearchCustom","PhoneNumberMatcherCustom","AsYouTypeCustom","flagIconClassesPrefix","styles","useCssModules","classesObject","_ref","_props$flip","flip","_props$size","_props$squared","squared","rotate","styleName","themeStyles","makeClassesObject","strClasses","classnames","aClasses","nClasses","classNameToStyleName","sizes","rotates","flips","_objectSpread","target","source","ownKeys","getOwnPropertySymbols","sym","getOwnPropertyDescriptor","fnThemeStylesValidator","propsObject","propsValues","propName","componentName","customCodes","themeStylesClassNames","customCode","includes","AddThemeStylesValidator","bind","fnNoExtraPropsValidator","passedPropNames","extra","prop","JSON","stringify","AddNoExtraPropsValidator","flagIconOptionsType","computedOptions","FlagIcon","React","_props$Component","children","makeClassnames","finalStyles","stylesFlagIcon","stylesMain","FlagIconFactory","makeFlagIconOptions","FlagIconComponent","computedStyles","makeStyles","process","displayName"],"mappings":"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","file":"static/js/5.6056f502.chunk.js","sourcesContent":["/*!\n  Copyright (c) 2017 Jed Watson.\n  Licensed under the MIT License (MIT), see\n  http://jedwatson.github.io/classnames\n*/\n/* global define */\n\n(function () {\n\t'use strict';\n\n\tvar hasOwn = {}.hasOwnProperty;\n\n\tfunction classNames () {\n\t\tvar classes = [];\n\n\t\tfor (var i = 0; i < arguments.length; i++) {\n\t\t\tvar arg = arguments[i];\n\t\t\tif (!arg) continue;\n\n\t\t\tvar argType = typeof arg;\n\n\t\t\tif (argType === 'string' || argType === 'number') {\n\t\t\t\tclasses.push(this && this[arg] || arg);\n\t\t\t} else if (Array.isArray(arg)) {\n\t\t\t\tclasses.push(classNames.apply(this, arg));\n\t\t\t} else if (argType === 'object') {\n\t\t\t\tfor (var key in arg) {\n\t\t\t\t\tif (hasOwn.call(arg, key) && arg[key]) {\n\t\t\t\t\t\tclasses.push(this && this[key] || key);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn classes.join(' ');\n\t}\n\n\tif (typeof module !== 'undefined' && module.exports) {\n\t\tclassNames.default = classNames;\n\t\tmodule.exports = classNames;\n\t} else if (typeof define === 'function' && typeof define.amd === 'object' && define.amd) {\n\t\t// register as 'classnames', consistent with npm package name\n\t\tdefine('classnames', [], function () {\n\t\t\treturn classNames;\n\t\t});\n\t} else {\n\t\twindow.classNames = classNames;\n\t}\n}());\n","export default function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}","\"use strict\";\r\n\r\nvar tester = /^[-!#$%&'*+\\/0-9=?A-Z^_a-z{|}~](\\.?[-!#$%&'*+\\/0-9=?A-Z^_a-z`{|}~])*@[a-zA-Z0-9](-*\\.?[a-zA-Z0-9])*\\.[a-zA-Z](-?[a-zA-Z0-9])+$/;\r\n// Thanks to:\r\n// http://fightingforalostcause.net/misc/2006/compare-email-regex.php\r\n// http://thedailywtf.com/Articles/Validating_Email_Addresses.aspx\r\n// http://stackoverflow.com/questions/201323/what-is-the-best-regular-expression-for-validating-email-addresses/201378#201378\r\nexports.validate = function(email)\r\n{\r\n\tif (!email)\r\n\t\treturn false;\r\n\t\t\r\n\tif(email.length>254)\r\n\t\treturn false;\r\n\r\n\tvar valid = tester.test(email);\r\n\tif(!valid)\r\n\t\treturn false;\r\n\r\n\t// Further checking of some things regex can't handle\r\n\tvar parts = email.split(\"@\");\r\n\tif(parts[0].length>64)\r\n\t\treturn false;\r\n\r\n\tvar domainParts = parts[1].split(\".\");\r\n\tif(domainParts.some(function(part) { return part.length>63; }))\r\n\t\treturn false;\r\n\r\n\treturn true;\r\n}","!function(e,t){\"object\"==typeof exports&&\"object\"==typeof module?module.exports=t(require(\"react\")):\"function\"==typeof define&&define.amd?define([\"react\"],t):\"object\"==typeof exports?exports.FacebookLogin=t(require(\"react\")):e.FacebookLogin=t(e.react)}(this,function(e){return function(e){function t(n){if(o[n])return o[n].exports;var r=o[n]={exports:{},id:n,loaded:!1};return e[n].call(r.exports,r,r.exports,t),r.loaded=!0,r.exports}var o={};return t.m=e,t.c=o,t.p=\"\",t(0)}([function(e,t,o){e.exports=o(8)},function(e,t,o){e.exports=o(6)()},function(t,o){t.exports=e},function(e,t){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),t[\"default\"]=function(e,t){return decodeURIComponent(e.replace(new RegExp(\"^(?:.*[&\\\\?]\"+encodeURIComponent(t).replace(/[\\.\\+\\*]/g,\"\\\\$&\")+\"(?:\\\\=([^&]*))?)?.*$\",\"i\"),\"$1\"))}},function(e,t,o){\"use strict\";function n(e){return e&&e.__esModule?e:{\"default\":e}}function r(e,t){if(!(e instanceof t))throw new TypeError(\"Cannot call a class as a function\")}function i(e,t){if(!e)throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");return!t||\"object\"!=typeof t&&\"function\"!=typeof t?e:t}function a(e,t){if(\"function\"!=typeof t&&null!==t)throw new TypeError(\"Super expression must either be null or a function, not \"+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,\"__esModule\",{value:!0});var s=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var o=arguments[t];for(var n in o)Object.prototype.hasOwnProperty.call(o,n)&&(e[n]=o[n])}return e},c=function(){function e(e,t){for(var o=0;o<t.length;o++){var n=t[o];n.enumerable=n.enumerable||!1,n.configurable=!0,\"value\"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,o,n){return o&&e(t.prototype,o),n&&e(t,n),t}}(),u=o(2),l=n(u),f=o(1),p=n(f),d=o(5),b=n(d),y=o(3),h=n(y),g=function(){var e=!1;try{e=!!(window.navigator&&window.navigator.standalone||navigator.userAgent.match(\"CriOS\")||navigator.userAgent.match(/mobile/i))}catch(t){}return e},m=function(e){function t(){var e,o,n,a;r(this,t);for(var c=arguments.length,u=Array(c),l=0;l<c;l++)u[l]=arguments[l];return o=n=i(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(u))),n.state={isSdkLoaded:!1,isProcessing:!1},n.responseApi=function(e){window.FB.api(\"/me\",{locale:n.props.language,fields:n.props.fields},function(t){s(t,e),n.props.callback(t)})},n.checkLoginState=function(e){n.setStateIfMounted({isProcessing:!1}),e.authResponse?n.responseApi(e.authResponse):n.props.onFailure?n.props.onFailure({status:e.status}):n.props.callback({status:e.status})},n.checkLoginAfterRefresh=function(e){\"connected\"===e.status?n.checkLoginState(e):window.FB.login(function(e){return n.checkLoginState(e)},!0)},n.click=function(e){if(n.state.isSdkLoaded&&!n.state.isProcessing&&!n.props.isDisabled){n.setState({isProcessing:!0});var t=n.props,o=t.scope,r=t.appId,i=t.onClick,a=t.returnScopes,s=t.responseType,c=t.redirectUri,u=t.disableMobileRedirect,l=t.authType,f=t.state;if(\"function\"!=typeof i||(i(e),!e.defaultPrevented)){var p={client_id:r,redirect_uri:c,state:f,return_scopes:a,scope:o,response_type:s,auth_type:l};if(n.props.isMobile&&!u)window.location.href=\"https://www.facebook.com/dialog/oauth\"+(0,b[\"default\"])(p);else{if(!window.FB)return void(n.props.onFailure&&n.props.onFailure({status:\"facebookNotLoaded\"}));window.FB.login(n.checkLoginState,{scope:o,return_scopes:a,auth_type:p.auth_type})}}}},a=o,i(n,a)}return a(t,e),c(t,[{key:\"componentDidMount\",value:function(){if(this._isMounted=!0,document.getElementById(\"facebook-jssdk\"))return void this.sdkLoaded();this.setFbAsyncInit(),this.loadSdkAsynchronously();var e=document.getElementById(\"fb-root\");e||(e=document.createElement(\"div\"),e.id=\"fb-root\",document.body.appendChild(e))}},{key:\"componentWillReceiveProps\",value:function(e){this.state.isSdkLoaded&&e.autoLoad&&!this.props.autoLoad&&window.FB.getLoginStatus(this.checkLoginAfterRefresh)}},{key:\"componentWillUnmount\",value:function(){this._isMounted=!1}},{key:\"setStateIfMounted\",value:function(e){this._isMounted&&this.setState(e)}},{key:\"setFbAsyncInit\",value:function(){var e=this,t=this.props,o=t.appId,n=t.xfbml,r=t.cookie,i=t.version,a=t.autoLoad;window.fbAsyncInit=function(){window.FB.init({version:\"v\"+i,appId:o,xfbml:n,cookie:r}),e.setStateIfMounted({isSdkLoaded:!0}),(a||e.isRedirectedFromFb())&&window.FB.getLoginStatus(e.checkLoginAfterRefresh)}}},{key:\"isRedirectedFromFb\",value:function(){var e=window.location.search;return(0,h[\"default\"])(e,\"code\")||(0,h[\"default\"])(e,\"granted_scopes\")}},{key:\"sdkLoaded\",value:function(){this.setState({isSdkLoaded:!0})}},{key:\"loadSdkAsynchronously\",value:function(){var e=this.props.language;!function(t,o,n){var r=t.getElementsByTagName(o)[0],i=r,a=r;t.getElementById(n)||(a=t.createElement(o),a.id=n,a.src=\"https://connect.facebook.net/\"+e+\"/sdk.js\",i.parentNode.insertBefore(a,i))}(document,\"script\",\"facebook-jssdk\")}},{key:\"render\",value:function o(){var o=this.props.render;if(!o)throw new Error(\"ReactFacebookLogin requires a render prop to render\");var e={onClick:this.click,isDisabled:!!this.props.isDisabled,isProcessing:this.state.isProcessing,isSdkLoaded:this.state.isSdkLoaded};return this.props.render(e)}}]),t}(l[\"default\"].Component);m.propTypes={isDisabled:p[\"default\"].bool,callback:p[\"default\"].func.isRequired,appId:p[\"default\"].string.isRequired,xfbml:p[\"default\"].bool,cookie:p[\"default\"].bool,authType:p[\"default\"].string,scope:p[\"default\"].string,state:p[\"default\"].string,responseType:p[\"default\"].string,returnScopes:p[\"default\"].bool,redirectUri:p[\"default\"].string,autoLoad:p[\"default\"].bool,disableMobileRedirect:p[\"default\"].bool,isMobile:p[\"default\"].bool,fields:p[\"default\"].string,version:p[\"default\"].string,language:p[\"default\"].string,onClick:p[\"default\"].func,onFailure:p[\"default\"].func,render:p[\"default\"].func.isRequired},m.defaultProps={redirectUri:\"undefined\"!=typeof window?window.location.href:\"/\",scope:\"public_profile,email\",returnScopes:!1,xfbml:!1,cookie:!1,authType:\"\",fields:\"name\",version:\"2.3\",language:\"en_US\",disableMobileRedirect:!1,isMobile:g(),onFailure:null,state:\"facebookdirect\",responseType:\"code\"},t[\"default\"]=m},function(e,t){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),t[\"default\"]=function(e){return\"?\"+Object.keys(e).map(function(t){return t+\"=\"+encodeURIComponent(e[t])}).join(\"&\")}},function(e,t,o){\"use strict\";function n(){}var r=o(7);e.exports=function(){function e(e,t,o,n,i,a){if(a!==r){var s=new Error(\"Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types\");throw s.name=\"Invariant Violation\",s}}function t(){return e}e.isRequired=e;var o={array:e,bool:e,func:e,number:e,object:e,string:e,symbol:e,any:e,arrayOf:t,element:e,instanceOf:t,node:e,objectOf:t,oneOf:t,oneOfType:t,shape:t,exact:t};return o.checkPropTypes=n,o.PropTypes=o,o}},function(e,t){\"use strict\";var o=\"SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED\";e.exports=o},function(e,t,o){\"use strict\";function n(e){return e&&e.__esModule?e:{\"default\":e}}function r(e,t){if(!(e instanceof t))throw new TypeError(\"Cannot call a class as a function\")}function i(e,t){if(!e)throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");return!t||\"object\"!=typeof t&&\"function\"!=typeof t?e:t}function a(e,t){if(\"function\"!=typeof t&&null!==t)throw new TypeError(\"Super expression must either be null or a function, not \"+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,\"__esModule\",{value:!0});var s=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var o=arguments[t];for(var n in o)Object.prototype.hasOwnProperty.call(o,n)&&(e[n]=o[n])}return e},c=function(){function e(e,t){for(var o=0;o<t.length;o++){var n=t[o];n.enumerable=n.enumerable||!1,n.configurable=!0,\"value\"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,o,n){return o&&e(t.prototype,o),n&&e(t,n),t}}(),u=o(2),l=n(u),f=o(1),p=n(f),d=o(9),b=n(d),y=o(4),h=n(y),g=function(e){return[\"button\",\"input\",\"select\",\"textarea\",\"optgroup\",\"option\",\"fieldset\"].indexOf((e+\"\").toLowerCase())>=0},m=function(e){function t(){return r(this,t),i(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return a(t,e),c(t,[{key:\"style\",value:function(){var e=this.constructor.defaultProps.cssClass;return this.props.cssClass===e&&l[\"default\"].createElement(\"style\",{dangerouslySetInnerHTML:{__html:b[\"default\"]}})}},{key:\"containerStyle\",value:function(e){var t=e.isProcessing,o=e.isSdkLoaded,n=e.isDisabled,r={transition:\"opacity 0.5s\"};return(t||!o||n)&&(r.opacity=.6),s(r,this.props.containerStyle)}},{key:\"renderOwnButton\",value:function(e){var t=this.props,o=t.cssClass,n=t.size,r=t.icon,i=t.textButton,a=t.typeButton,c=t.buttonStyle,u=e.onClick,f=e.isDisabled,p=\"string\"==typeof r,d={};return f&&g(this.props.tag)&&(d.disabled=!0),l[\"default\"].createElement(\"span\",{style:this.containerStyle(e)},p&&l[\"default\"].createElement(\"link\",{rel:\"stylesheet\",href:\"https://maxcdn.bootstrapcdn.com/font-awesome/4.5.0/css/font-awesome.min.css\"}),l[\"default\"].createElement(this.props.tag,s({type:a,className:o+\" \"+n,style:c,onClick:u},d),r&&p&&l[\"default\"].createElement(\"i\",{className:\"fa \"+r}),r&&!p&&r,i),this.style())}},{key:\"render\",value:function(){var e=this;return l[\"default\"].createElement(h[\"default\"],s({},this.props,{render:function(t){return e.renderOwnButton(t)}}))}}]),t}(l[\"default\"].Component);m.propTypes={textButton:p[\"default\"].string,typeButton:p[\"default\"].string,size:p[\"default\"].string,cssClass:p[\"default\"].string,icon:p[\"default\"].any,containerStyle:p[\"default\"].object,buttonStyle:p[\"default\"].object,tag:p[\"default\"].oneOfType([p[\"default\"].node,p[\"default\"].func])},m.defaultProps={textButton:\"Login with Facebook\",typeButton:\"button\",size:\"metro\",fields:\"name\",cssClass:\"kep-login-facebook\",tag:\"button\"},t[\"default\"]=m},function(e,t,o){t=e.exports=o(10)(),t.push([e.id,\".kep-login-facebook{font-family:Helvetica,sans-serif;font-weight:700;-webkit-font-smoothing:antialiased;color:#fff;cursor:pointer;display:inline-block;font-size:calc(.27548vw + 12.71074px);text-decoration:none;text-transform:uppercase;transition:background-color .3s,border-color .3s;background-color:#4c69ba;border:calc(.06887vw + .67769px) solid #4c69ba;padding:calc(.34435vw + 13.38843px) calc(.34435vw + 18.38843px)}.kep-login-facebook.small{padding:calc(.34435vw + 3.38843px) calc(.34435vw + 8.38843px)}.kep-login-facebook.medium{padding:calc(.34435vw + 8.38843px) calc(.34435vw + 13.38843px)}.kep-login-facebook.metro{border-radius:0}.kep-login-facebook .fa{margin-right:calc(.34435vw + 3.38843px)}\",\"\"]),t.locals={\"kep-login-facebook\":\"kep-login-facebook\",small:\"small\",medium:\"medium\",metro:\"metro\",fa:\"fa\"}},function(e,t){e.exports=function(){var e=[];return e.toString=function(){for(var e=[],t=0;t<this.length;t++){var o=this[t];o[2]?e.push(\"@media \"+o[2]+\"{\"+o[1]+\"}\"):e.push(o[1])}return e.join(\"\")},e.i=function(t,o){\"string\"==typeof t&&(t=[[null,t,\"\"]]);for(var n={},r=0;r<this.length;r++){var i=this[r][0];\"number\"==typeof i&&(n[i]=!0)}for(r=0;r<t.length;r++){var a=t[r];\"number\"==typeof a[0]&&n[a[0]]||(o&&!a[2]?a[2]=o:o&&(a[2]=\"(\"+a[2]+\") and (\"+o+\")\"),e.push(a))}},e}}])});","/*!\n  Copyright (c) 2017 Jed Watson.\n  Licensed under the MIT License (MIT), see\n  http://jedwatson.github.io/classnames\n*/\n/* global define */\n\n(function () {\n\t'use strict';\n\n\tvar hasOwn = {}.hasOwnProperty;\n\n\tfunction classNames () {\n\t\tvar classes = [];\n\n\t\tfor (var i = 0; i < arguments.length; i++) {\n\t\t\tvar arg = arguments[i];\n\t\t\tif (!arg) continue;\n\n\t\t\tvar argType = typeof arg;\n\n\t\t\tif (argType === 'string' || argType === 'number') {\n\t\t\t\tclasses.push(arg);\n\t\t\t} else if (Array.isArray(arg) && arg.length) {\n\t\t\t\tvar inner = classNames.apply(null, arg);\n\t\t\t\tif (inner) {\n\t\t\t\t\tclasses.push(inner);\n\t\t\t\t}\n\t\t\t} else if (argType === 'object') {\n\t\t\t\tfor (var key in arg) {\n\t\t\t\t\tif (hasOwn.call(arg, key) && arg[key]) {\n\t\t\t\t\t\tclasses.push(key);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn classes.join(' ');\n\t}\n\n\tif (typeof module !== 'undefined' && module.exports) {\n\t\tclassNames.default = classNames;\n\t\tmodule.exports = classNames;\n\t} else if (typeof define === 'function' && typeof define.amd === 'object' && define.amd) {\n\t\t// register as 'classnames', consistent with npm package name\n\t\tdefine('classnames', [], function () {\n\t\t\treturn classNames;\n\t\t});\n\t} else {\n\t\twindow.classNames = classNames;\n\t}\n}());\n","module.exports = function cmp (a, b) {\n    var pa = a.split('.');\n    var pb = b.split('.');\n    for (var i = 0; i < 3; i++) {\n        var na = Number(pa[i]);\n        var nb = Number(pb[i]);\n        if (na > nb) return 1;\n        if (nb > na) return -1;\n        if (!isNaN(na) && isNaN(nb)) return 1;\n        if (isNaN(na) && !isNaN(nb)) return -1;\n    }\n    return 0;\n};\n","'use strict'\n\nvar data = require('./data.json')\n\n/** Precompute name and code lookups. */\nvar nameMap = {}\nvar codeMap = {}\ndata.forEach(mapCodeAndName)\n\nfunction mapCodeAndName (country) {\n  nameMap[country.name.toLowerCase()] = country.code\n  codeMap[country.code.toLowerCase()] = country.name\n}\n\nexports.overwrite = function overwrite (countries) {\n  if (!countries || !countries.length) return\n  countries.forEach(function (country) {\n    var foundIndex = data.findIndex(function (item) {\n      return item.code === country.code\n    })\n    data[foundIndex] = country\n    mapCodeAndName(country)\n  })\n}\n\nexports.getCode = function getCode (name) {\n  return nameMap[name.toLowerCase()]\n}\n\nexports.getName = function getName (code) {\n  return codeMap[code.toLowerCase()]\n}\n\nexports.getNames = function getNames () {\n  return data.map(function (country) {\n    return country.name\n  })\n}\n\nexports.getCodes = function getCodes () {\n  return data.map(function (country) {\n    return country.code\n  })\n}\n\nexports.getCodeList = function getCodeList () {\n  return codeMap\n}\n\nexports.getNameList = function getNameList () {\n  return nameMap\n}\n\nexports.getData = function getData () {\n  return data\n}\n","// The minimum length of the national significant number.\r\nexport const MIN_LENGTH_FOR_NSN = 2\r\n\r\n// The ITU says the maximum length should be 15,\r\n// but one can find longer numbers in Germany.\r\nexport const MAX_LENGTH_FOR_NSN = 17\r\n\r\n// The maximum length of the country calling code.\r\nexport const MAX_LENGTH_COUNTRY_CODE = 3\r\n\r\n// Digits accepted in phone numbers\r\n// (ascii, fullwidth, arabic-indic, and eastern arabic digits).\r\nexport const VALID_DIGITS = '0-9\\uFF10-\\uFF19\\u0660-\\u0669\\u06F0-\\u06F9'\r\n\r\n// `DASHES` will be right after the opening square bracket of the \"character class\"\r\nconst DASHES = '-\\u2010-\\u2015\\u2212\\u30FC\\uFF0D'\r\nconst SLASHES = '\\uFF0F/'\r\nconst DOTS = '\\uFF0E.'\r\nexport const WHITESPACE = ' \\u00A0\\u00AD\\u200B\\u2060\\u3000'\r\nconst BRACKETS = '()\\uFF08\\uFF09\\uFF3B\\uFF3D\\\\[\\\\]'\r\n// export const OPENING_BRACKETS = '(\\uFF08\\uFF3B\\\\\\['\r\nconst TILDES = '~\\u2053\\u223C\\uFF5E'\r\n\r\n// Regular expression of acceptable punctuation found in phone numbers. This\r\n// excludes punctuation found as a leading character only. This consists of dash\r\n// characters, white space characters, full stops, slashes, square brackets,\r\n// parentheses and tildes. Full-width variants are also present.\r\nexport const VALID_PUNCTUATION = `${DASHES}${SLASHES}${DOTS}${WHITESPACE}${BRACKETS}${TILDES}`\r\n\r\nexport const PLUS_CHARS = '+\\uFF0B'\r\n// const LEADING_PLUS_CHARS_PATTERN = new RegExp('^[' + PLUS_CHARS + ']+')","// Checks whether the entire input sequence can be matched\r\n// against the regular expression.\r\nexport function matchesEntirely(text = '', regular_expression) {\r\n\treturn new RegExp('^(?:' + regular_expression + ')$').test(text)\r\n}\r\n\r\n/**\r\n * Merges two arrays.\r\n * @param  {*} a\r\n * @param  {*} b\r\n * @return {*}\r\n */\r\nexport function mergeArrays(a, b) {\r\n\tconst merged = a.slice()\r\n\r\n\tfor (const element of b) {\r\n\t\tif (a.indexOf(element) < 0) {\r\n\t\t\tmerged.push(element)\r\n\t\t}\r\n\t}\r\n\r\n\treturn merged.sort((a, b) => a - b)\r\n\r\n\t// ES6 version, requires Set polyfill.\r\n\t// let merged = new Set(a)\r\n\t// for (const element of b)\r\n\t// {\r\n\t// \tmerged.add(i)\r\n\t// }\r\n\t// return Array.from(merged).sort((a, b) => a - b)\r\n}","// https://stackoverflow.com/a/46971044/970769\r\nexport default class ParseError {\r\n  constructor(code) {\r\n    this.name = this.constructor.name\r\n    this.message = code\r\n    this.stack = (new Error(code)).stack\r\n  }\r\n}\r\n\r\nParseError.prototype = Object.create(Error.prototype)\r\nParseError.prototype.constructor = ParseError","import compare from 'semver-compare'\r\n\r\n// Added \"possibleLengths\" and renamed\r\n// \"country_phone_code_to_countries\" to \"country_calling_codes\".\r\nconst V2 = '1.0.18'\r\n\r\n// Added \"idd_prefix\" and \"default_idd_prefix\".\r\nconst V3 = '1.2.0'\r\n\r\nconst DEFAULT_EXT_PREFIX = ' ext. '\r\n\r\nexport default class Metadata\r\n{\r\n\tconstructor(metadata)\r\n\t{\r\n\t\tvalidateMetadata(metadata)\r\n\r\n\t\tthis.metadata = metadata\r\n\r\n\t\tthis.v1 = !metadata.version\r\n\t\tthis.v2 = metadata.version !== undefined && compare(metadata.version, V3) === -1\r\n\t\tthis.v3 = metadata.version !== undefined // && compare(metadata.version, V4) === -1\r\n\t}\r\n\r\n\thasCountry(country)\r\n\t{\r\n\t\treturn this.metadata.countries[country] !== undefined\r\n\t}\r\n\r\n\tcountry(country)\r\n\t{\r\n\t\tif (!country)\r\n\t\t{\r\n\t\t\tthis._country = undefined\r\n\t\t\tthis.country_metadata = undefined\r\n\t\t\treturn this\r\n\t\t}\r\n\r\n\t\tif (!this.hasCountry(country))\r\n\t\t{\r\n\t\t\tthrow new Error(`Unknown country: ${country}`)\r\n\t\t}\r\n\r\n\t\tthis._country = country\r\n\t\tthis.country_metadata = this.metadata.countries[country]\r\n\t\treturn this\r\n\t}\r\n\r\n\tgetDefaultCountryMetadataForRegion()\r\n\t{\r\n\t\treturn this.metadata.countries[this.countryCallingCodes()[this.countryCallingCode()][0]]\r\n\t}\r\n\r\n\tcountryCallingCode()\r\n\t{\r\n\t\treturn this.country_metadata[0]\r\n\t}\r\n\r\n\tIDDPrefix()\r\n\t{\r\n\t\tif (this.v1 || this.v2) return\r\n\t\treturn this.country_metadata[1]\r\n\t}\r\n\r\n\tdefaultIDDPrefix()\r\n\t{\r\n\t\tif (this.v1 || this.v2) return\r\n\t\treturn this.country_metadata[12]\r\n\t}\r\n\r\n\tnationalNumberPattern()\r\n\t{\r\n\t\tif (this.v1 || this.v2) return this.country_metadata[1]\r\n\t\treturn this.country_metadata[2]\r\n\t}\r\n\r\n\tpossibleLengths()\r\n\t{\r\n\t\tif (this.v1) return\r\n\t\treturn this.country_metadata[this.v2 ? 2 : 3]\r\n\t}\r\n\r\n\t_getFormats(country_metadata)\r\n\t{\r\n\t\treturn country_metadata[this.v1 ? 2 : this.v2 ? 3 : 4]\r\n\t}\r\n\r\n\t// For countries of the same region (e.g. NANPA)\r\n\t// formats are all stored in the \"main\" country for that region.\r\n\t// E.g. \"RU\" and \"KZ\", \"US\" and \"CA\".\r\n\tformats()\r\n\t{\r\n\t\tconst formats = this._getFormats(this.country_metadata) || this._getFormats(this.getDefaultCountryMetadataForRegion()) || []\r\n\t\treturn formats.map(_ => new Format(_, this))\r\n\t}\r\n\r\n\tnationalPrefix()\r\n\t{\r\n\t\treturn this.country_metadata[this.v1 ? 3 : this.v2 ? 4 : 5]\r\n\t}\r\n\r\n\t_getNationalPrefixFormattingRule(country_metadata)\r\n\t{\r\n\t\treturn country_metadata[this.v1 ? 4 : this.v2 ? 5 : 6]\r\n\t}\r\n\r\n\t// For countries of the same region (e.g. NANPA)\r\n\t// national prefix formatting rule is stored in the \"main\" country for that region.\r\n\t// E.g. \"RU\" and \"KZ\", \"US\" and \"CA\".\r\n\tnationalPrefixFormattingRule()\r\n\t{\r\n\t\treturn this._getNationalPrefixFormattingRule(this.country_metadata) || this._getNationalPrefixFormattingRule(this.getDefaultCountryMetadataForRegion())\r\n\t}\r\n\r\n\tnationalPrefixForParsing()\r\n\t{\r\n\t\t// If `national_prefix_for_parsing` is not set explicitly,\r\n\t\t// then infer it from `national_prefix` (if any)\r\n\t\treturn this.country_metadata[this.v1 ? 5 : this.v2 ? 6 : 7] || this.nationalPrefix()\r\n\t}\r\n\r\n\tnationalPrefixTransformRule()\r\n\t{\r\n\t\treturn this.country_metadata[this.v1 ? 6 : this.v2 ? 7 : 8]\r\n\t}\r\n\r\n\t_getNationalPrefixIsOptionalWhenFormatting()\r\n\t{\r\n\t\treturn !!this.country_metadata[this.v1 ? 7 : this.v2 ? 8 : 9]\r\n\t}\r\n\r\n\t// For countries of the same region (e.g. NANPA)\r\n\t// \"national prefix is optional when parsing\" flag is\r\n\t// stored in the \"main\" country for that region.\r\n\t// E.g. \"RU\" and \"KZ\", \"US\" and \"CA\".\r\n\tnationalPrefixIsOptionalWhenFormatting()\r\n\t{\r\n\t\treturn this._getNationalPrefixIsOptionalWhenFormatting(this.country_metadata) ||\r\n\t\t\tthis._getNationalPrefixIsOptionalWhenFormatting(this.getDefaultCountryMetadataForRegion())\r\n\t}\r\n\r\n\tleadingDigits()\r\n\t{\r\n\t\treturn this.country_metadata[this.v1 ? 8 : this.v2 ? 9 : 10]\r\n\t}\r\n\r\n\ttypes()\r\n\t{\r\n\t\treturn this.country_metadata[this.v1 ? 9 : this.v2 ? 10 : 11]\r\n\t}\r\n\r\n\thasTypes()\r\n\t{\r\n\t\t// Versions 1.2.0 - 1.2.4: can be `[]`.\r\n\t\t/* istanbul ignore next */\r\n\t\tif (this.types() && this.types().length === 0) {\r\n\t\t\treturn false\r\n\t\t}\r\n\t\t// Versions <= 1.2.4: can be `undefined`.\r\n\t\t// Version >= 1.2.5: can be `0`.\r\n\t\treturn !!this.types()\r\n\t}\r\n\r\n\ttype(type)\r\n\t{\r\n\t\tif (this.hasTypes() && getType(this.types(), type))\r\n\t\t{\r\n\t\t\treturn new Type(getType(this.types(), type), this)\r\n\t\t}\r\n\t}\r\n\r\n\text()\r\n\t{\r\n\t\tif (this.v1 || this.v2) return DEFAULT_EXT_PREFIX\r\n\t\treturn this.country_metadata[13] || DEFAULT_EXT_PREFIX\r\n\t}\r\n\r\n\tcountryCallingCodes()\r\n\t{\r\n\t\tif (this.v1) return this.metadata.country_phone_code_to_countries\r\n\t\treturn this.metadata.country_calling_codes\r\n\t}\r\n\r\n\t// Formatting information for regions which share\r\n\t// a country calling code is contained by only one region\r\n\t// for performance reasons. For example, for NANPA region\r\n\t// (\"North American Numbering Plan Administration\",\r\n\t//  which includes USA, Canada, Cayman Islands, Bahamas, etc)\r\n\t// it will be contained in the metadata for `US`.\r\n\t//\r\n\t// `country_calling_code` is always valid.\r\n\t// But the actual country may not necessarily be part of the metadata.\r\n\t//\r\n\tchooseCountryByCountryCallingCode(country_calling_code)\r\n\t{\r\n\t\tconst country = this.countryCallingCodes()[country_calling_code][0]\r\n\r\n\t\t// Do not want to test this case.\r\n\t\t// (custom metadata, not all countries).\r\n\t\t/* istanbul ignore else */\r\n\t\tif (this.hasCountry(country))\r\n\t\t{\r\n\t\t\tthis.country(country)\r\n\t\t}\r\n\t}\r\n\r\n\tselectedCountry()\r\n\t{\r\n\t\treturn this._country\r\n\t}\r\n}\r\n\r\nclass Format\r\n{\r\n\tconstructor(format, metadata)\r\n\t{\r\n\t\tthis._format = format\r\n\t\tthis.metadata = metadata\r\n\t}\r\n\r\n\tpattern()\r\n\t{\r\n\t\treturn this._format[0]\r\n\t}\r\n\r\n\tformat()\r\n\t{\r\n\t\treturn this._format[1]\r\n\t}\r\n\r\n\tleadingDigitsPatterns()\r\n\t{\r\n\t\treturn this._format[2] || []\r\n\t}\r\n\r\n\tnationalPrefixFormattingRule()\r\n\t{\r\n\t\treturn this._format[3] || this.metadata.nationalPrefixFormattingRule()\r\n\t}\r\n\r\n\tnationalPrefixIsOptionalWhenFormatting()\r\n\t{\r\n\t\treturn !!this._format[4] || this.metadata.nationalPrefixIsOptionalWhenFormatting()\r\n\t}\r\n\r\n\tnationalPrefixIsMandatoryWhenFormatting()\r\n\t{\r\n\t\t// National prefix is omitted if there's no national prefix formatting rule\r\n\t\t// set for this country, or when the national prefix formatting rule\r\n\t\t// contains no national prefix itself, or when this rule is set but\r\n\t\t// national prefix is optional for this phone number format\r\n\t\t// (and it is not enforced explicitly)\r\n\t\treturn this.usesNationalPrefix() && !this.nationalPrefixIsOptionalWhenFormatting()\r\n\t}\r\n\r\n\t// Checks whether national prefix formatting rule contains national prefix.\r\n\tusesNationalPrefix()\r\n\t{\r\n\t\treturn this.nationalPrefixFormattingRule() &&\r\n\t\t\t// Check that national prefix formatting rule is not a dummy one.\r\n\t\t\tthis.nationalPrefixFormattingRule() !== '$1' &&\r\n\t\t\t// Check that national prefix formatting rule actually has national prefix digit(s).\r\n\t\t\t/\\d/.test(this.nationalPrefixFormattingRule().replace('$1', ''))\r\n\t}\r\n\r\n\tinternationalFormat()\r\n\t{\r\n\t\treturn this._format[5] || this.format()\r\n\t}\r\n}\r\n\r\nclass Type\r\n{\r\n\tconstructor(type, metadata)\r\n\t{\r\n\t\tthis.type = type\r\n\t\tthis.metadata = metadata\r\n\t}\r\n\r\n\tpattern()\r\n\t{\r\n\t\tif (this.metadata.v1) return this.type\r\n\t\treturn this.type[0]\r\n\t}\r\n\r\n\tpossibleLengths()\r\n\t{\r\n\t\tif (this.metadata.v1) return\r\n\t\treturn this.type[1] || this.metadata.possibleLengths()\r\n\t}\r\n}\r\n\r\nfunction getType(types, type)\r\n{\r\n\tswitch (type)\r\n\t{\r\n\t\tcase 'FIXED_LINE':\r\n\t\t\treturn types[0]\r\n\t\tcase 'MOBILE':\r\n\t\t\treturn types[1]\r\n\t\tcase 'TOLL_FREE':\r\n\t\t\treturn types[2]\r\n\t\tcase 'PREMIUM_RATE':\r\n\t\t\treturn types[3]\r\n\t\tcase 'PERSONAL_NUMBER':\r\n\t\t\treturn types[4]\r\n\t\tcase 'VOICEMAIL':\r\n\t\t\treturn types[5]\r\n\t\tcase 'UAN':\r\n\t\t\treturn types[6]\r\n\t\tcase 'PAGER':\r\n\t\t\treturn types[7]\r\n\t\tcase 'VOIP':\r\n\t\t\treturn types[8]\r\n\t\tcase 'SHARED_COST':\r\n\t\t\treturn types[9]\r\n\t}\r\n}\r\n\r\nexport function validateMetadata(metadata)\r\n{\r\n\tif (!metadata)\r\n\t{\r\n\t\tthrow new Error('[libphonenumber-js] `metadata` argument not passed. Check your arguments.')\r\n\t}\r\n\r\n\t// `country_phone_code_to_countries` was renamed to\r\n\t// `country_calling_codes` in `1.0.18`.\r\n\tif\r\n\t(\r\n\t\t!is_object(metadata) ||\r\n\t\t!is_object(metadata.countries) ||\r\n\t\t(!is_object(metadata.country_calling_codes) && !is_object(metadata.country_phone_code_to_countries))\r\n\t)\r\n\t{\r\n\t\tthrow new Error(`[libphonenumber-js] \\`metadata\\` argument was passed but it's not a valid metadata. Must be an object having \\`.countries\\` and \\`.country_calling_codes\\` child object properties. Got ${is_object(metadata) ? 'an object of shape: { ' + Object.keys(metadata).join(', ') + ' }' : 'a ' + type_of(metadata) + ': ' + metadata}.`)\r\n\t}\r\n}\r\n\r\n// Babel transforms `typeof` into some \"branches\"\r\n// so istanbul will show this as \"branch not covered\".\r\n/* istanbul ignore next */\r\nconst is_object = _ => typeof _ === 'object'\r\n\r\n// Babel transforms `typeof` into some \"branches\"\r\n// so istanbul will show this as \"branch not covered\".\r\n/* istanbul ignore next */\r\nconst type_of = _ => typeof _\r\n\r\n/**\r\n * Returns extension prefix for a country.\r\n * @param  {string} country\r\n * @param  {object} metadata\r\n * @return {string?}\r\n * @example\r\n * // Returns \" ext. \"\r\n * getExtPrefix(\"US\")\r\n */\r\nexport function getExtPrefix(country, metadata)\r\n{\r\n\tmetadata = new Metadata(metadata)\r\n\tif (metadata.hasCountry(country)) {\r\n\t\treturn metadata.country(country).ext()\r\n\t}\r\n\treturn DEFAULT_EXT_PREFIX\r\n}\r\n\r\n/**\r\n * Returns \"country calling code\" for a country.\r\n * Throws an error if the country doesn't exist or isn't supported by this library.\r\n * @param  {string} country\r\n * @param  {object} metadata\r\n * @return {string}\r\n * @example\r\n * // Returns \"44\"\r\n * getCountryCallingCode(\"GB\")\r\n */\r\nexport function getCountryCallingCode(country, metadata)\r\n{\r\n\tmetadata = new Metadata(metadata)\r\n\tif (metadata.hasCountry(country)) {\r\n\t\treturn metadata.country(country).countryCallingCode()\r\n\t}\r\n\tthrow new Error(`Unknown country: ${country}`)\r\n}\r\n\r\nexport function isSupportedCountry(country, metadata)\r\n{\r\n\t// metadata = new Metadata(metadata)\r\n\t// return metadata.hasCountry(country)\r\n\treturn metadata.countries[country] !== undefined\r\n}","import { VALID_DIGITS } from './constants'\r\n\r\n// The RFC 3966 format for extensions.\r\nconst RFC3966_EXTN_PREFIX = ';ext='\r\n\r\n// Pattern to capture digits used in an extension.\r\n// Places a maximum length of '7' for an extension.\r\nconst CAPTURING_EXTN_DIGITS = '([' + VALID_DIGITS + ']{1,7})'\r\n\r\n/**\r\n * Regexp of all possible ways to write extensions, for use when parsing. This\r\n * will be run as a case-insensitive regexp match. Wide character versions are\r\n * also provided after each ASCII version. There are three regular expressions\r\n * here. The first covers RFC 3966 format, where the extension is added using\r\n * ';ext='. The second more generic one starts with optional white space and\r\n * ends with an optional full stop (.), followed by zero or more spaces/tabs\r\n * /commas and then the numbers themselves. The other one covers the special\r\n * case of American numbers where the extension is written with a hash at the\r\n * end, such as '- 503#'. Note that the only capturing groups should be around\r\n * the digits that you want to capture as part of the extension, or else parsing\r\n * will fail! We allow two options for representing the accented o - the\r\n * character itself, and one in the unicode decomposed form with the combining\r\n * acute accent.\r\n */\r\nfunction create_extension_pattern(purpose)\r\n{\r\n\t// One-character symbols that can be used to indicate an extension.\r\n\tlet single_extension_characters = 'x\\uFF58#\\uFF03~\\uFF5E'\r\n\r\n\tswitch (purpose)\r\n\t{\r\n\t\t// For parsing, we are slightly more lenient in our interpretation than for matching. Here we\r\n\t\t// allow \"comma\" and \"semicolon\" as possible extension indicators. When matching, these are\r\n\t\tcase 'parsing':\r\n\t\t\tsingle_extension_characters = ',;' + single_extension_characters\r\n\t}\r\n\r\n\treturn RFC3966_EXTN_PREFIX +\r\n\t\tCAPTURING_EXTN_DIGITS + '|' +\r\n\t\t'[ \\u00A0\\\\t,]*' +\r\n\t\t'(?:e?xt(?:ensi(?:o\\u0301?|\\u00F3))?n?|\\uFF45?\\uFF58\\uFF54\\uFF4E?|' +\r\n\t\t// \"доб.\"\r\n\t\t'\\u0434\\u043E\\u0431|' +\r\n\t\t'[' + single_extension_characters + ']|int|anexo|\\uFF49\\uFF4E\\uFF54)' +\r\n\t\t'[:\\\\.\\uFF0E]?[ \\u00A0\\\\t,-]*' +\r\n\t\tCAPTURING_EXTN_DIGITS + '#?|' +\r\n\t\t'[- ]+([' + VALID_DIGITS + ']{1,5})#'\r\n}\r\n\r\n/**\r\n * Regexp of all possible ways to write extensions, for use when parsing. This\r\n * will be run as a case-insensitive regexp match. Wide character versions are\r\n * also provided after each ASCII version. There are three regular expressions\r\n * here. The first covers RFC 3966 format, where the extension is added using\r\n * ';ext='. The second more generic one starts with optional white space and\r\n * ends with an optional full stop (.), followed by zero or more spaces/tabs\r\n * /commas and then the numbers themselves. The other one covers the special\r\n * case of American numbers where the extension is written with a hash at the\r\n * end, such as '- 503#'. Note that the only capturing groups should be around\r\n * the digits that you want to capture as part of the extension, or else parsing\r\n * will fail! We allow two options for representing the accented o - the\r\n * character itself, and one in the unicode decomposed form with the combining\r\n * acute accent.\r\n */\r\nexport const EXTN_PATTERNS_FOR_PARSING = create_extension_pattern('parsing')\r\n\r\nexport const EXTN_PATTERNS_FOR_MATCHING = create_extension_pattern('matching')\r\n\r\n// Regexp of all known extension prefixes used by different regions followed by\r\n// 1 or more valid digits, for use when parsing.\r\nconst EXTN_PATTERN = new RegExp('(?:' + EXTN_PATTERNS_FOR_PARSING + ')$', 'i')\r\n\r\n// Strips any extension (as in, the part of the number dialled after the call is\r\n// connected, usually indicated with extn, ext, x or similar) from the end of\r\n// the number, and returns it.\r\nexport function extractExtension(number)\r\n{\r\n\tconst start = number.search(EXTN_PATTERN)\r\n\tif (start < 0) {\r\n\t\treturn {}\r\n\t}\r\n\r\n\t// If we find a potential extension, and the number preceding this is a viable\r\n\t// number, we assume it is an extension.\r\n\tconst number_without_extension = number.slice(0, start)\r\n\r\n\tconst matches = number.match(EXTN_PATTERN)\r\n\tlet i = 1\r\n\twhile (i < matches.length)\r\n\t{\r\n\t\tif (matches[i] != null && matches[i].length > 0)\r\n\t\t{\r\n\t\t\treturn {\r\n\t\t\t\tnumber : number_without_extension,\r\n\t\t\t\text    : matches[i]\r\n\t\t\t}\r\n\t\t}\r\n\t\ti++\r\n\t}\r\n}","import {\r\n\tMIN_LENGTH_FOR_NSN,\r\n\tVALID_DIGITS,\r\n\tVALID_PUNCTUATION,\r\n\tPLUS_CHARS\r\n} from './constants'\r\n\r\nimport { EXTN_PATTERNS_FOR_PARSING } from './extension'\r\n\r\n//  Regular expression of viable phone numbers. This is location independent.\r\n//  Checks we have at least three leading digits, and only valid punctuation,\r\n//  alpha characters and digits in the phone number. Does not include extension\r\n//  data. The symbol 'x' is allowed here as valid punctuation since it is often\r\n//  used as a placeholder for carrier codes, for example in Brazilian phone\r\n//  numbers. We also allow multiple '+' characters at the start.\r\n//\r\n//  Corresponds to the following:\r\n//  [digits]{minLengthNsn}|\r\n//  plus_sign*\r\n//  (([punctuation]|[star])*[digits]){3,}([punctuation]|[star]|[digits]|[alpha])*\r\n//\r\n//  The first reg-ex is to allow short numbers (two digits long) to be parsed if\r\n//  they are entered as \"15\" etc, but only if there is no punctuation in them.\r\n//  The second expression restricts the number of digits to three or more, but\r\n//  then allows them to be in international form, and to have alpha-characters\r\n//  and punctuation. We split up the two reg-exes here and combine them when\r\n//  creating the reg-ex VALID_PHONE_NUMBER_PATTERN itself so we can prefix it\r\n//  with ^ and append $ to each branch.\r\n//\r\n//  \"Note VALID_PUNCTUATION starts with a -,\r\n//   so must be the first in the range\" (c) Google devs.\r\n//  (wtf did they mean by saying that; probably nothing)\r\n//\r\nconst MIN_LENGTH_PHONE_NUMBER_PATTERN = '[' + VALID_DIGITS + ']{' + MIN_LENGTH_FOR_NSN + '}'\r\n//\r\n// And this is the second reg-exp:\r\n// (see MIN_LENGTH_PHONE_NUMBER_PATTERN for a full description of this reg-exp)\r\n//\r\nconst VALID_PHONE_NUMBER =\r\n\t'[' + PLUS_CHARS + ']{0,1}' +\r\n\t'(?:' +\r\n\t\t'[' + VALID_PUNCTUATION + ']*' +\r\n\t\t'[' + VALID_DIGITS + ']' +\r\n\t'){3,}' +\r\n\t'[' +\r\n\t\tVALID_PUNCTUATION +\r\n\t\tVALID_DIGITS +\r\n\t']*'\r\n\r\n// The combined regular expression for valid phone numbers:\r\n//\r\nconst VALID_PHONE_NUMBER_PATTERN = new RegExp\r\n(\r\n\t// Either a short two-digit-only phone number\r\n\t'^' +\r\n\t\tMIN_LENGTH_PHONE_NUMBER_PATTERN +\r\n\t'$' +\r\n\t'|' +\r\n\t// Or a longer fully parsed phone number (min 3 characters)\r\n\t'^' +\r\n\t\tVALID_PHONE_NUMBER +\r\n\t\t// Phone number extensions\r\n\t\t'(?:' + EXTN_PATTERNS_FOR_PARSING + ')?' +\r\n\t'$'\r\n,\r\n'i')\r\n\r\n// Checks to see if the string of characters could possibly be a phone number at\r\n// all. At the moment, checks to see that the string begins with at least 2\r\n// digits, ignoring any punctuation commonly found in phone numbers. This method\r\n// does not require the number to be normalized in advance - but does assume\r\n// that leading non-number symbols have been removed, such as by the method\r\n// `extract_possible_number`.\r\n//\r\nexport default function isViablePhoneNumber(number)\r\n{\r\n\treturn number.length >= MIN_LENGTH_FOR_NSN &&\r\n\t\tVALID_PHONE_NUMBER_PATTERN.test(number)\r\n}","// These mappings map a character (key) to a specific digit that should\r\n// replace it for normalization purposes. Non-European digits that\r\n// may be used in phone numbers are mapped to a European equivalent.\r\n//\r\n// E.g. in Iraq they don't write `+442323234` but rather `+٤٤٢٣٢٣٢٣٤`.\r\n//\r\nexport const DIGITS =\r\n{\r\n\t'0': '0',\r\n\t'1': '1',\r\n\t'2': '2',\r\n\t'3': '3',\r\n\t'4': '4',\r\n\t'5': '5',\r\n\t'6': '6',\r\n\t'7': '7',\r\n\t'8': '8',\r\n\t'9': '9',\r\n\t'\\uFF10': '0', // Fullwidth digit 0\r\n\t'\\uFF11': '1', // Fullwidth digit 1\r\n\t'\\uFF12': '2', // Fullwidth digit 2\r\n\t'\\uFF13': '3', // Fullwidth digit 3\r\n\t'\\uFF14': '4', // Fullwidth digit 4\r\n\t'\\uFF15': '5', // Fullwidth digit 5\r\n\t'\\uFF16': '6', // Fullwidth digit 6\r\n\t'\\uFF17': '7', // Fullwidth digit 7\r\n\t'\\uFF18': '8', // Fullwidth digit 8\r\n\t'\\uFF19': '9', // Fullwidth digit 9\r\n\t'\\u0660': '0', // Arabic-indic digit 0\r\n\t'\\u0661': '1', // Arabic-indic digit 1\r\n\t'\\u0662': '2', // Arabic-indic digit 2\r\n\t'\\u0663': '3', // Arabic-indic digit 3\r\n\t'\\u0664': '4', // Arabic-indic digit 4\r\n\t'\\u0665': '5', // Arabic-indic digit 5\r\n\t'\\u0666': '6', // Arabic-indic digit 6\r\n\t'\\u0667': '7', // Arabic-indic digit 7\r\n\t'\\u0668': '8', // Arabic-indic digit 8\r\n\t'\\u0669': '9', // Arabic-indic digit 9\r\n\t'\\u06F0': '0', // Eastern-Arabic digit 0\r\n\t'\\u06F1': '1', // Eastern-Arabic digit 1\r\n\t'\\u06F2': '2', // Eastern-Arabic digit 2\r\n\t'\\u06F3': '3', // Eastern-Arabic digit 3\r\n\t'\\u06F4': '4', // Eastern-Arabic digit 4\r\n\t'\\u06F5': '5', // Eastern-Arabic digit 5\r\n\t'\\u06F6': '6', // Eastern-Arabic digit 6\r\n\t'\\u06F7': '7', // Eastern-Arabic digit 7\r\n\t'\\u06F8': '8', // Eastern-Arabic digit 8\r\n\t'\\u06F9': '9'  // Eastern-Arabic digit 9\r\n}\r\n\r\nexport function parseDigit(character)\r\n{\r\n\treturn DIGITS[character]\r\n}\r\n\r\n/**\r\n * Parses phone number digits from a string.\r\n * Drops all punctuation leaving only digits.\r\n * Also converts wide-ascii and arabic-indic numerals to conventional numerals.\r\n * E.g. in Iraq they don't write `+442323234` but rather `+٤٤٢٣٢٣٢٣٤`.\r\n * @param  {string} string\r\n * @return {string}\r\n * @example\r\n * ```js\r\n * parseDigits('8 (800) 555')\r\n * // Outputs '8800555'.\r\n * ```\r\n */\r\nexport default function parseDigits(string)\r\n{\r\n\tlet result = ''\r\n\r\n\t// Using `.split('')` here instead of normal `for ... of`\r\n\t// because the importing application doesn't neccessarily include an ES6 polyfill.\r\n\t// The `.split('')` approach discards \"exotic\" UTF-8 characters\r\n\t// (the ones consisting of four bytes) but digits\r\n\t// (including non-European ones) don't fall into that range\r\n\t// so such \"exotic\" characters would be discarded anyway.\r\n\tfor (const character of string.split(''))\r\n\t{\r\n\t\tconst digit = parseDigit(character)\r\n\t\tif (digit) {\r\n\t\t\tresult += digit\r\n\t\t}\r\n\t}\r\n\r\n\treturn result\r\n}","import { parseDigit } from './parseDigits'\r\n\r\n/**\r\n * Parses phone number characters from a string.\r\n * Drops all punctuation leaving only digits and the leading `+` sign (if any).\r\n * Also converts wide-ascii and arabic-indic numerals to conventional numerals.\r\n * E.g. in Iraq they don't write `+442323234` but rather `+٤٤٢٣٢٣٢٣٤`.\r\n * @param  {string} string\r\n * @return {string}\r\n * @example\r\n * ```js\r\n * parseIncompletePhoneNumber('8 (800) 555')\r\n * // Outputs '8800555'.\r\n * parseIncompletePhoneNumber('+7 800 555')\r\n * // Outputs '+7800555'.\r\n * ```\r\n */\r\nexport default function parseIncompletePhoneNumber(string)\r\n{\r\n\tlet result = ''\r\n\r\n\t// Using `.split('')` here instead of normal `for ... of`\r\n\t// because the importing application doesn't neccessarily include an ES6 polyfill.\r\n\t// The `.split('')` approach discards \"exotic\" UTF-8 characters\r\n\t// (the ones consisting of four bytes) but digits\r\n\t// (including non-European ones) don't fall into that range\r\n\t// so such \"exotic\" characters would be discarded anyway.\r\n\tfor (const character of string.split(''))\r\n\t{\r\n\t\tresult += parsePhoneNumberCharacter(character, result) || ''\r\n\t}\r\n\r\n\treturn result\r\n}\r\n\r\n/**\r\n * `input-format` `parse()` function.\r\n * https://github.com/catamphetamine/input-format\r\n * @param  {string} character - Yet another character from raw input string.\r\n * @param  {string} value - The value parsed so far.\r\n * @param  {object} meta - Optional custom use-case-specific metadata.\r\n * @return {string?} The parsed character.\r\n */\r\nexport function parsePhoneNumberCharacter(character, value)\r\n{\r\n\t// Only allow a leading `+`.\r\n\tif (character === '+')\r\n\t{\r\n\t\t// If this `+` is not the first parsed character\r\n\t\t// then discard it.\r\n\t\tif (value) {\r\n\t\t\treturn\r\n\t\t}\r\n\r\n\t\treturn '+'\r\n\t}\r\n\r\n\t// Allow digits.\r\n\treturn parseDigit(character)\r\n}","import Metadata from './metadata'\r\nimport { matchesEntirely, mergeArrays } from './util'\r\n\r\nconst NON_FIXED_LINE_PHONE_TYPES =\r\n[\r\n\t'MOBILE',\r\n\t'PREMIUM_RATE',\r\n\t'TOLL_FREE',\r\n\t'SHARED_COST',\r\n\t'VOIP',\r\n\t'PERSONAL_NUMBER',\r\n\t'PAGER',\r\n\t'UAN',\r\n\t'VOICEMAIL'\r\n]\r\n\r\n// Finds out national phone number type (fixed line, mobile, etc)\r\nexport default function getNumberType(input, options = {}, metadata)\r\n{\r\n\t// When `parse()` returned `{}`\r\n\t// meaning that the phone number is not a valid one.\r\n\tif (!input.country)\r\n\t{\r\n\t\treturn\r\n\t}\r\n\r\n\tmetadata = new Metadata(metadata)\r\n\r\n\tif (!metadata.hasCountry(input.country))\r\n\t{\r\n\t\tthrow new Error(`Unknown country: ${input.country}`)\r\n\t}\r\n\r\n\tconst nationalNumber = options.v2 ? input.nationalNumber : input.phone\r\n\tmetadata.country(input.country)\r\n\r\n\t// The following is copy-pasted from the original function:\r\n\t// https://github.com/googlei18n/libphonenumber/blob/3ea547d4fbaa2d0b67588904dfa5d3f2557c27ff/javascript/i18n/phonenumbers/phonenumberutil.js#L2835\r\n\r\n\t// Is this national number even valid for this country\r\n\tif (!matchesEntirely(nationalNumber, metadata.nationalNumberPattern()))\r\n\t{\r\n\t\treturn\r\n\t}\r\n\r\n\t// Is it fixed line number\r\n\tif (is_of_type(nationalNumber, 'FIXED_LINE', metadata))\r\n\t{\r\n\t\t// Because duplicate regular expressions are removed\r\n\t\t// to reduce metadata size, if \"mobile\" pattern is \"\"\r\n\t\t// then it means it was removed due to being a duplicate of the fixed-line pattern.\r\n\t\t//\r\n\t\tif (metadata.type('MOBILE') && metadata.type('MOBILE').pattern() === '')\r\n\t\t{\r\n\t\t\treturn 'FIXED_LINE_OR_MOBILE'\r\n\t\t}\r\n\r\n\t\t// v1 metadata.\r\n\t\t// Legacy.\r\n\t\t// Deprecated.\r\n\t\tif (!metadata.type('MOBILE'))\r\n\t\t{\r\n\t\t\treturn 'FIXED_LINE_OR_MOBILE'\r\n\t\t}\r\n\r\n\t\t// Check if the number happens to qualify as both fixed line and mobile.\r\n\t\t// (no such country in the minimal metadata set)\r\n\t\t/* istanbul ignore if */\r\n\t\tif (is_of_type(nationalNumber, 'MOBILE', metadata))\r\n\t\t{\r\n\t\t\treturn 'FIXED_LINE_OR_MOBILE'\r\n\t\t}\r\n\r\n\t\treturn 'FIXED_LINE'\r\n\t}\r\n\r\n\tfor (const _type of NON_FIXED_LINE_PHONE_TYPES)\r\n\t{\r\n\t\tif (is_of_type(nationalNumber, _type, metadata))\r\n\t\t{\r\n\t\t\treturn _type\r\n\t\t}\r\n\t}\r\n}\r\n\r\nexport function is_of_type(nationalNumber, type, metadata)\r\n{\r\n\ttype = metadata.type(type)\r\n\r\n\tif (!type || !type.pattern())\r\n\t{\r\n\t\treturn false\r\n\t}\r\n\r\n\t// Check if any possible number lengths are present;\r\n\t// if so, we use them to avoid checking\r\n\t// the validation pattern if they don't match.\r\n\t// If they are absent, this means they match\r\n\t// the general description, which we have\r\n\t// already checked before a specific number type.\r\n\tif (type.possibleLengths() &&\r\n\t\ttype.possibleLengths().indexOf(nationalNumber.length) < 0)\r\n\t{\r\n\t\treturn false\r\n\t}\r\n\r\n\treturn matchesEntirely(nationalNumber, type.pattern())\r\n}\r\n\r\n// Should only be called for the \"new\" metadata which has \"possible lengths\".\r\nexport function checkNumberLengthForType(nationalNumber, type, metadata)\r\n{\r\n\tconst type_info = metadata.type(type)\r\n\r\n\t// There should always be \"<possiblePengths/>\" set for every type element.\r\n\t// This is declared in the XML schema.\r\n\t// For size efficiency, where a sub-description (e.g. fixed-line)\r\n\t// has the same \"<possiblePengths/>\" as the \"general description\", this is missing,\r\n\t// so we fall back to the \"general description\". Where no numbers of the type\r\n\t// exist at all, there is one possible length (-1) which is guaranteed\r\n\t// not to match the length of any real phone number.\r\n\tlet possible_lengths = type_info && type_info.possibleLengths() || metadata.possibleLengths()\r\n\t// let local_lengths    = type_info && type.possibleLengthsLocal() || metadata.possibleLengthsLocal()\r\n\r\n\tif (type === 'FIXED_LINE_OR_MOBILE')\r\n\t{\r\n\t\t// No such country in metadata.\r\n\t\t/* istanbul ignore next */\r\n\t\tif (!metadata.type('FIXED_LINE'))\r\n\t\t{\r\n\t\t\t// The rare case has been encountered where no fixedLine data is available\r\n\t\t\t// (true for some non-geographical entities), so we just check mobile.\r\n\t\t\treturn checkNumberLengthForType(nationalNumber, 'MOBILE', metadata)\r\n\t\t}\r\n\r\n\t\tconst mobile_type = metadata.type('MOBILE')\r\n\r\n\t\tif (mobile_type)\r\n\t\t{\r\n\t\t\t// Merge the mobile data in if there was any. \"Concat\" creates a new\r\n\t\t\t// array, it doesn't edit possible_lengths in place, so we don't need a copy.\r\n\t\t\t// Note that when adding the possible lengths from mobile, we have\r\n\t\t\t// to again check they aren't empty since if they are this indicates\r\n\t\t\t// they are the same as the general desc and should be obtained from there.\r\n\t\t\tpossible_lengths = mergeArrays(possible_lengths, mobile_type.possibleLengths())\r\n\t\t\t// The current list is sorted; we need to merge in the new list and\r\n\t\t\t// re-sort (duplicates are okay). Sorting isn't so expensive because\r\n\t\t\t// the lists are very small.\r\n\r\n\t\t\t// if (local_lengths)\r\n\t\t\t// {\r\n\t\t\t// \tlocal_lengths = mergeArrays(local_lengths, mobile_type.possibleLengthsLocal())\r\n\t\t\t// }\r\n\t\t\t// else\r\n\t\t\t// {\r\n\t\t\t// \tlocal_lengths = mobile_type.possibleLengthsLocal()\r\n\t\t\t// }\r\n\t\t}\r\n\t}\r\n\t// If the type doesn't exist then return 'INVALID_LENGTH'.\r\n\telse if (type && !type_info)\r\n\t{\r\n\t\treturn 'INVALID_LENGTH'\r\n\t}\r\n\r\n\tconst actual_length = nationalNumber.length\r\n\r\n\t// In `libphonenumber-js` all \"local-only\" formats are dropped for simplicity.\r\n\t// // This is safe because there is never an overlap beween the possible lengths\r\n\t// // and the local-only lengths; this is checked at build time.\r\n\t// if (local_lengths && local_lengths.indexOf(nationalNumber.length) >= 0)\r\n\t// {\r\n\t// \treturn 'IS_POSSIBLE_LOCAL_ONLY'\r\n\t// }\r\n\r\n\tconst minimum_length = possible_lengths[0]\r\n\r\n\tif (minimum_length === actual_length)\r\n\t{\r\n\t\treturn 'IS_POSSIBLE'\r\n\t}\r\n\r\n\tif (minimum_length > actual_length)\r\n\t{\r\n\t\treturn 'TOO_SHORT'\r\n\t}\r\n\r\n\tif (possible_lengths[possible_lengths.length - 1] < actual_length)\r\n\t{\r\n\t\treturn 'TOO_LONG'\r\n\t}\r\n\r\n\t// We skip the first element since we've already checked it.\r\n\treturn possible_lengths.indexOf(actual_length, 1) >= 0 ? 'IS_POSSIBLE' : 'INVALID_LENGTH'\r\n}","import Metadata from './metadata'\r\nimport { checkNumberLengthForType } from './getNumberType_'\r\n\r\nexport default function isPossibleNumber(input, options, metadata)\r\n{\r\n\t/* istanbul ignore if */\r\n\tif (options === undefined) {\r\n\t\toptions = {}\r\n\t}\r\n\r\n\tmetadata = new Metadata(metadata)\r\n\r\n\tif (options.v2)\r\n\t{\r\n\t\tif (!input.countryCallingCode) {\r\n\t\t\tthrow new Error('Invalid phone number object passed')\r\n\t\t}\r\n\t\tmetadata.chooseCountryByCountryCallingCode(input.countryCallingCode)\r\n\t}\r\n\telse\r\n\t{\r\n\t\tif (!input.phone) {\r\n\t\t\treturn false\r\n\t\t}\r\n\t\tif (input.country) {\r\n\t\t\tif (!metadata.hasCountry(input.country)) {\r\n\t\t\t\tthrow new Error(`Unknown country: ${input.country}`)\r\n\t\t\t}\r\n\t\t\tmetadata.country(input.country)\r\n\t\t} else {\r\n\t\t\tif (!input.countryCallingCode) {\r\n\t\t\t\tthrow new Error('Invalid phone number object passed')\r\n\t\t\t}\r\n\t\t\tmetadata.chooseCountryByCountryCallingCode(input.countryCallingCode)\r\n\t\t}\r\n\t}\r\n\r\n\tif (!metadata.possibleLengths()) {\r\n\t\tthrow new Error('Metadata too old')\r\n\t}\r\n\r\n\treturn is_possible_number(input.phone || input.nationalNumber, undefined, metadata)\r\n}\r\n\r\nexport function is_possible_number(national_number, is_international, metadata)\r\n{\r\n\tswitch (checkNumberLengthForType(national_number, undefined, metadata))\r\n\t{\r\n\t\tcase 'IS_POSSIBLE':\r\n\t\t\treturn true\r\n\t\t// case 'IS_POSSIBLE_LOCAL_ONLY':\r\n\t\t// \treturn !is_international\r\n\t\tdefault:\r\n\t\t\treturn false\r\n\t}\r\n}","import Metadata from './metadata'\r\nimport { VALID_DIGITS } from './constants'\r\n\r\nconst CAPTURING_DIGIT_PATTERN = new RegExp('([' + VALID_DIGITS + '])')\r\n\r\n/**\r\n * Pattern that makes it easy to distinguish whether a region has a single\r\n * international dialing prefix or not. If a region has a single international\r\n * prefix (e.g. 011 in USA), it will be represented as a string that contains\r\n * a sequence of ASCII digits, and possibly a tilde, which signals waiting for\r\n * the tone. If there are multiple available international prefixes in a\r\n * region, they will be represented as a regex string that always contains one\r\n * or more characters that are not ASCII digits or a tilde.\r\n */\r\nconst SINGLE_IDD_PREFIX = /^[\\d]+(?:[~\\u2053\\u223C\\uFF5E][\\d]+)?$/\r\n\r\n// For regions that have multiple IDD prefixes\r\n// a preferred IDD prefix is returned.\r\nexport function getIDDPrefix(country, metadata)\r\n{\r\n\tconst countryMetadata = new Metadata(metadata)\r\n\tcountryMetadata.country(country)\r\n\r\n\tif (SINGLE_IDD_PREFIX.test(countryMetadata.IDDPrefix()))\r\n\t{\r\n\t\treturn countryMetadata.IDDPrefix()\r\n\t}\r\n\r\n\treturn countryMetadata.defaultIDDPrefix()\r\n}\r\n\r\nexport function stripIDDPrefix(number, country, metadata)\r\n{\r\n\tif (!country) {\r\n\t\treturn\r\n\t}\r\n\r\n\t// Check if the number is IDD-prefixed.\r\n\r\n\tconst countryMetadata = new Metadata(metadata)\r\n\tcountryMetadata.country(country)\r\n\r\n\tconst IDDPrefixPattern = new RegExp(countryMetadata.IDDPrefix())\r\n\r\n\tif (number.search(IDDPrefixPattern) !== 0) {\r\n\t\treturn\r\n\t}\r\n\r\n\t// Strip IDD prefix.\r\n\tnumber = number.slice(number.match(IDDPrefixPattern)[0].length)\r\n\r\n\t// Some kind of a weird edge case.\r\n\t// No explanation from Google given.\r\n\tconst matchedGroups = number.match(CAPTURING_DIGIT_PATTERN)\r\n\t/* istanbul ignore next */\r\n\tif (matchedGroups && matchedGroups[1] != null && matchedGroups[1].length > 0)\r\n\t{\r\n\t\tif (matchedGroups[1] === '0')\r\n\t\t{\r\n\t\t\treturn\r\n\t\t}\r\n\t}\r\n\r\n\treturn number\r\n}","import isViablePhoneNumber from './isViablePhoneNumber'\r\n\r\n// https://www.ietf.org/rfc/rfc3966.txt\r\n\r\n/**\r\n * @param  {string} text - Phone URI (RFC 3966).\r\n * @return {object} `{ ?number, ?ext }`.\r\n */\r\nexport function parseRFC3966(text)\r\n{\r\n\tlet number\r\n\tlet ext\r\n\r\n\t// Replace \"tel:\" with \"tel=\" for parsing convenience.\r\n\ttext = text.replace(/^tel:/, 'tel=')\r\n\r\n\tfor (const part of text.split(';'))\r\n\t{\r\n\t\tconst [name, value] = part.split('=')\r\n\t\tswitch (name)\r\n\t\t{\r\n\t\t\tcase 'tel':\r\n\t\t\t\tnumber = value\r\n\t\t\t\tbreak\r\n\t\t\tcase 'ext':\r\n\t\t\t\text = value\r\n\t\t\t\tbreak\r\n\t\t\tcase 'phone-context':\r\n\t\t\t\t// Only \"country contexts\" are supported.\r\n\t\t\t\t// \"Domain contexts\" are ignored.\r\n\t\t\t\tif (value[0] === '+') {\r\n\t\t\t\t\tnumber = value + number\r\n\t\t\t\t}\r\n\t\t\t\tbreak\r\n\t\t}\r\n\t}\r\n\r\n\t// If the phone number is not viable, then abort.\r\n\tif (!isViablePhoneNumber(number))\r\n\t{\r\n\t\treturn {}\r\n\t}\r\n\r\n\tconst result = { number }\r\n\tif (ext) {\r\n\t\tresult.ext = ext\r\n\t}\r\n\treturn result\r\n}\r\n\r\n/**\r\n * @param  {object} - `{ ?number, ?extension }`.\r\n * @return {string} Phone URI (RFC 3966).\r\n */\r\nexport function formatRFC3966({ number, ext })\r\n{\r\n\tif (!number)\r\n\t{\r\n\t\treturn ''\r\n\t}\r\n\r\n\tif (number[0] !== '+')\r\n\t{\r\n\t\tthrow new Error(`\"formatRFC3966()\" expects \"number\" to be in E.164 format.`)\r\n\t}\r\n\r\n\treturn `tel:${number}${ext ? ';ext=' + ext : ''}`\r\n}","import Metadata from './metadata'\r\nimport { matchesEntirely } from './util'\r\nimport getNumberType from './getNumberType_'\r\n\r\n/**\r\n * Checks if a given phone number is valid.\r\n *\r\n * If the `number` is a string, it will be parsed to an object,\r\n * but only if it contains only valid phone number characters (including punctuation).\r\n * If the `number` is an object, it is used as is.\r\n *\r\n * The optional `defaultCountry` argument is the default country.\r\n * I.e. it does not restrict to just that country,\r\n * e.g. in those cases where several countries share\r\n * the same phone numbering rules (NANPA, Britain, etc).\r\n * For example, even though the number `07624 369230`\r\n * belongs to the Isle of Man (\"IM\" country code)\r\n * calling `isValidNumber('07624369230', 'GB', metadata)`\r\n * still returns `true` because the country is not restricted to `GB`,\r\n * it's just that `GB` is the default one for the phone numbering rules.\r\n * For restricting the country see `isValidNumberForRegion()`\r\n * though restricting a country might not be a good idea.\r\n * https://github.com/googlei18n/libphonenumber/blob/master/FAQ.md#when-should-i-use-isvalidnumberforregion\r\n *\r\n * Examples:\r\n *\r\n * ```js\r\n * isValidNumber('+78005553535', metadata)\r\n * isValidNumber('8005553535', 'RU', metadata)\r\n * isValidNumber('88005553535', 'RU', metadata)\r\n * isValidNumber({ phone: '8005553535', country: 'RU' }, metadata)\r\n * ```\r\n */\r\nexport default function isValidNumber(input, options = {}, metadata)\r\n{\r\n\tmetadata = new Metadata(metadata)\r\n\r\n\t// This is just to support `isValidNumber({})`\r\n\t// for cases when `parseNumber()` returns `{}`.\r\n\tif (!input.country)\r\n\t{\r\n\t\treturn false\r\n\t}\r\n\r\n\tif (!metadata.hasCountry(input.country))\r\n\t{\r\n\t\tthrow new Error(`Unknown country: ${input.country}`)\r\n\t}\r\n\r\n\tmetadata.country(input.country)\r\n\r\n\t// By default, countries only have type regexps when it's required for\r\n\t// distinguishing different countries having the same `countryCallingCode`.\r\n\tif (metadata.hasTypes())\r\n\t{\r\n\t\treturn getNumberType(input, options, metadata.metadata) !== undefined\r\n\t}\r\n\r\n\t// If there are no type regexps for this country in metadata then use\r\n\t// `nationalNumberPattern` as a \"better than nothing\" replacement.\r\n\tconst national_number = options.v2 ? input.nationalNumber : input.phone\r\n\treturn matchesEntirely(national_number, metadata.nationalNumberPattern())\r\n}","// This is a port of Google Android `libphonenumber`'s\r\n// `phonenumberutil.js` of December 31th, 2018.\r\n//\r\n// https://github.com/googlei18n/libphonenumber/commits/master/javascript/i18n/phonenumbers/phonenumberutil.js\r\n\r\nimport { VALID_PUNCTUATION } from './constants'\r\nimport { matchesEntirely } from './util'\r\nimport Metadata from './metadata'\r\nimport { getIDDPrefix } from './IDD'\r\nimport { formatRFC3966 } from './RFC3966'\r\n\r\nconst defaultOptions =\r\n{\r\n\tformatExtension: (formattedNumber, extension, metadata) => `${formattedNumber}${metadata.ext()}${extension}`\r\n}\r\n\r\n// Formats a phone number\r\n//\r\n// Example use cases:\r\n//\r\n// ```js\r\n// formatNumber('8005553535', 'RU', 'INTERNATIONAL')\r\n// formatNumber('8005553535', 'RU', 'INTERNATIONAL', metadata)\r\n// formatNumber({ phone: '8005553535', country: 'RU' }, 'INTERNATIONAL')\r\n// formatNumber({ phone: '8005553535', country: 'RU' }, 'INTERNATIONAL', metadata)\r\n// formatNumber('+78005553535', 'NATIONAL')\r\n// formatNumber('+78005553535', 'NATIONAL', metadata)\r\n// ```\r\n//\r\nexport default function formatNumber(input, format, options, metadata)\r\n{\r\n\t// Apply default options.\r\n\tif (options) {\r\n\t\toptions = { ...defaultOptions, ...options }\r\n\t} else {\r\n\t\toptions = defaultOptions\r\n\t}\r\n\r\n\tmetadata = new Metadata(metadata)\r\n\r\n\tif (input.country)\r\n\t{\r\n\t\t// Validate `input.country`.\r\n\t\tif (!metadata.hasCountry(input.country)) {\r\n\t\t\tthrow new Error(`Unknown country: ${input.country}`)\r\n\t\t}\r\n\t\tmetadata.country(input.country)\r\n\t}\r\n\telse if (input.countryCallingCode)\r\n\t{\r\n\t\tmetadata.chooseCountryByCountryCallingCode(input.countryCallingCode)\r\n\t}\r\n\telse return input.phone || ''\r\n\r\n\tconst countryCallingCode = metadata.countryCallingCode()\r\n\r\n\tconst nationalNumber = options.v2 ? input.nationalNumber : input.phone\r\n\r\n\t// This variable should have been declared inside `case`s\r\n\t// but Babel has a bug and it says \"duplicate variable declaration\".\r\n\tlet number\r\n\r\n\tswitch (format)\r\n\t{\r\n\t\tcase 'NATIONAL':\r\n\t\t\t// Legacy argument support.\r\n\t\t\t// (`{ country: ..., phone: '' }`)\r\n\t\t\tif (!nationalNumber) {\r\n\t\t\t\treturn ''\r\n\t\t\t}\r\n\t\t\tnumber = format_national_number(nationalNumber, 'NATIONAL', metadata)\r\n\t\t\treturn addExtension(number, input.ext, metadata, options.formatExtension)\r\n\r\n\t\tcase 'INTERNATIONAL':\r\n\t\t\t// Legacy argument support.\r\n\t\t\t// (`{ country: ..., phone: '' }`)\r\n\t\t\tif (!nationalNumber) {\r\n\t\t\t\treturn `+${countryCallingCode}`\r\n\t\t\t}\r\n\t\t\tnumber = format_national_number(nationalNumber, 'INTERNATIONAL', metadata)\r\n\t\t\tnumber = `+${countryCallingCode} ${number}`\r\n\t\t\treturn addExtension(number, input.ext, metadata, options.formatExtension)\r\n\r\n\t\tcase 'E.164':\r\n\t\t\t// `E.164` doesn't define \"phone number extensions\".\r\n\t\t\treturn `+${countryCallingCode}${nationalNumber}`\r\n\r\n\t\tcase 'RFC3966':\r\n\t\t\treturn formatRFC3966\r\n\t\t\t({\r\n\t\t\t\tnumber : `+${countryCallingCode}${nationalNumber}`,\r\n\t\t\t\text    : input.ext\r\n\t\t\t})\r\n\r\n\t\tcase 'IDD':\r\n\t\t\tif (!options.fromCountry) {\r\n\t\t\t\treturn\r\n\t\t\t\t// throw new Error('`fromCountry` option not passed for IDD-prefixed formatting.')\r\n\t\t\t}\r\n\t\t\tconst IDDPrefix = getIDDPrefix(options.fromCountry, metadata.metadata)\r\n\t\t\tif (!IDDPrefix) {\r\n\t\t\t\treturn\r\n\t\t\t}\r\n\t\t\tif (options.humanReadable)\r\n\t\t\t{\r\n\t\t\t\tconst formattedForSameCountryCallingCode = countryCallingCode && formatIDDSameCountryCallingCodeNumber(nationalNumber, metadata.countryCallingCode(), options.fromCountry, metadata)\r\n\t\t\t\tif (formattedForSameCountryCallingCode) {\r\n\t\t\t\t\tnumber = formattedForSameCountryCallingCode\r\n\t\t\t\t} else {\r\n\t\t\t\t\tnumber = `${IDDPrefix} ${countryCallingCode} ${format_national_number(nationalNumber, 'INTERNATIONAL', metadata)}`\r\n\t\t\t\t}\r\n\t\t\t\treturn addExtension(number, input.ext, metadata, options.formatExtension)\r\n\t\t\t}\r\n\t\t\treturn `${IDDPrefix}${countryCallingCode}${nationalNumber}`\r\n\r\n\t\tdefault:\r\n\t\t\tthrow new Error(`Unknown \"format\" argument passed to \"formatNumber()\": \"${format}\"`)\r\n\t}\r\n}\r\n\r\n// This was originally set to $1 but there are some countries for which the\r\n// first group is not used in the national pattern (e.g. Argentina) so the $1\r\n// group does not match correctly.  Therefore, we use \\d, so that the first\r\n// group actually used in the pattern will be matched.\r\nexport const FIRST_GROUP_PATTERN = /(\\$\\d)/\r\n\r\nexport function format_national_number_using_format(number, format, useInternationalFormat, includeNationalPrefixForNationalFormat, metadata)\r\n{\r\n\tconst formattedNumber = number.replace(\r\n\t\tnew RegExp(format.pattern()),\r\n\t\tuseInternationalFormat ?\r\n\t\t\tformat.internationalFormat() :\r\n\t\t\tformat.nationalPrefixFormattingRule() && (!format.nationalPrefixIsOptionalWhenFormatting() || includeNationalPrefixForNationalFormat) ?\r\n\t\t\t\tformat.format().replace(FIRST_GROUP_PATTERN, format.nationalPrefixFormattingRule()) :\r\n\t\t\t\tformat.format()\r\n\t)\r\n\r\n\tif (useInternationalFormat) {\r\n\t\treturn changeInternationalFormatStyle(formattedNumber)\r\n\t}\r\n\r\n\treturn formattedNumber\r\n}\r\n\r\nfunction format_national_number(number, format_as, metadata)\r\n{\r\n\tconst format = choose_format_for_number(metadata.formats(), number)\r\n\tif (!format) {\r\n\t\treturn number\r\n\t}\r\n\treturn format_national_number_using_format(number, format, format_as === 'INTERNATIONAL', true, metadata)\r\n}\r\n\r\nexport function choose_format_for_number(available_formats, national_number)\r\n{\r\n\tfor (const format of available_formats)\r\n\t{\r\n\t\t// Validate leading digits\r\n\t\tif (format.leadingDigitsPatterns().length > 0)\r\n\t\t{\r\n\t\t\t// The last leading_digits_pattern is used here, as it is the most detailed\r\n\t\t\tconst last_leading_digits_pattern = format.leadingDigitsPatterns()[format.leadingDigitsPatterns().length - 1]\r\n\r\n\t\t\t// If leading digits don't match then move on to the next phone number format\r\n\t\t\tif (national_number.search(last_leading_digits_pattern) !== 0)\r\n\t\t\t{\r\n\t\t\t\tcontinue\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Check that the national number matches the phone number format regular expression\r\n\t\tif (matchesEntirely(national_number, format.pattern()))\r\n\t\t{\r\n\t\t\treturn format\r\n\t\t}\r\n\t}\r\n}\r\n\r\n// Removes brackets and replaces dashes with spaces.\r\n//\r\n// E.g. \"(999) 111-22-33\" -> \"999 111 22 33\"\r\n//\r\n// For some reason Google's metadata contains `<intlFormat/>`s with brackets and dashes.\r\n// Meanwhile, there's no single opinion about using punctuation in international phone numbers.\r\n//\r\n// For example, Google's `<intlFormat/>` for USA is `+1 213-373-4253`.\r\n// And here's a quote from WikiPedia's \"North American Numbering Plan\" page:\r\n// https://en.wikipedia.org/wiki/North_American_Numbering_Plan\r\n//\r\n// \"The country calling code for all countries participating in the NANP is 1.\r\n// In international format, an NANP number should be listed as +1 301 555 01 00,\r\n// where 301 is an area code (Maryland).\"\r\n//\r\n// I personally prefer the international format without any punctuation.\r\n// For example, brackets are remnants of the old age, meaning that the\r\n// phone number part in brackets (so called \"area code\") can be omitted\r\n// if dialing within the same \"area\".\r\n// And hyphens were clearly introduced for splitting local numbers into memorizable groups.\r\n// For example, remembering \"5553535\" is difficult but \"555-35-35\" is much simpler.\r\n// Imagine a man taking a bus from home to work and seeing an ad with a phone number.\r\n// He has a couple of seconds to memorize that number until it passes by.\r\n// If it were spaces instead of hyphens the man wouldn't necessarily get it,\r\n// but with hyphens instead of spaces the grouping is more explicit.\r\n// I personally think that hyphens introduce visual clutter,\r\n// so I prefer replacing them with spaces in international numbers.\r\n// In the modern age all output is done on displays where spaces are clearly distinguishable\r\n// so hyphens can be safely replaced with spaces without losing any legibility.\r\n//\r\nexport function changeInternationalFormatStyle(local)\r\n{\r\n\treturn local.replace(new RegExp(`[${VALID_PUNCTUATION}]+`, 'g'), ' ').trim()\r\n}\r\n\r\nfunction addExtension(formattedNumber, ext, metadata, formatExtension)\r\n{\r\n\treturn ext ? formatExtension(formattedNumber, ext, metadata) : formattedNumber\r\n}\r\n\r\nexport function formatIDDSameCountryCallingCodeNumber(number, toCountryCallingCode, fromCountry, toCountryMetadata)\r\n{\r\n\tconst fromCountryMetadata = new Metadata(toCountryMetadata.metadata)\r\n\tfromCountryMetadata.country(fromCountry)\r\n\r\n\t// If calling within the same country calling code.\r\n\tif (toCountryCallingCode === fromCountryMetadata.countryCallingCode())\r\n\t{\r\n\t\t// For NANPA regions, return the national format for these regions\r\n\t\t// but prefix it with the country calling code.\r\n\t\tif (toCountryCallingCode === '1')\r\n\t\t{\r\n\t\t\treturn toCountryCallingCode + ' ' + format_national_number(number, 'NATIONAL', toCountryMetadata)\r\n\t\t}\r\n\r\n\t\t// If regions share a country calling code, the country calling code need\r\n\t\t// not be dialled. This also applies when dialling within a region, so this\r\n\t\t// if clause covers both these cases. Technically this is the case for\r\n\t\t// dialling from La Reunion to other overseas departments of France (French\r\n\t\t// Guiana, Martinique, Guadeloupe), but not vice versa - so we don't cover\r\n\t\t// this edge case for now and for those cases return the version including\r\n\t\t// country calling code. Details here:\r\n\t\t// http://www.petitfute.com/voyage/225-info-pratiques-reunion\r\n\t\t//\r\n\t\treturn format_national_number(number, 'NATIONAL', toCountryMetadata)\r\n\t}\r\n}","import Metadata from './metadata'\r\nimport isPossibleNumber from './isPossibleNumber_'\r\nimport isValidNumber from './validate_'\r\nimport isValidNumberForRegion from './isValidNumberForRegion_'\r\nimport getNumberType from './getNumberType_'\r\nimport formatNumber from './format_'\r\n\r\nexport default class PhoneNumber {\r\n\tconstructor(countryCallingCode, nationalNumber, metadata) {\r\n\t\tif (!countryCallingCode) {\r\n\t\t\tthrow new TypeError('`countryCallingCode` not passed')\r\n\t\t}\r\n\t\tif (!nationalNumber) {\r\n\t\t\tthrow new TypeError('`nationalNumber` not passed')\r\n\t\t}\r\n\t\t// If country code is passed then derive `countryCallingCode` from it.\r\n\t\t// Also store the country code as `.country`.\r\n\t\tif (isCountryCode(countryCallingCode)) {\r\n\t\t\tthis.country = countryCallingCode\r\n\t\t\tconst _metadata = new Metadata(metadata)\r\n\t\t\t_metadata.country(countryCallingCode)\r\n\t\t\tcountryCallingCode = _metadata.countryCallingCode()\r\n\t\t}\r\n\t\tthis.countryCallingCode = countryCallingCode\r\n\t\tthis.nationalNumber = nationalNumber\r\n\t\tthis.number = '+' + this.countryCallingCode + this.nationalNumber\r\n\t\tthis.metadata = metadata\r\n\t}\r\n\r\n\tisPossible() {\r\n\t\treturn isPossibleNumber(this, { v2: true }, this.metadata)\r\n\t}\r\n\r\n\tisValid() {\r\n\t\treturn isValidNumber(this, { v2: true }, this.metadata)\r\n\t}\r\n\r\n\t// // Is just an alias for `this.isValid() && this.country === country`.\r\n\t// // https://github.com/googlei18n/libphonenumber/blob/master/FAQ.md#when-should-i-use-isvalidnumberforregion\r\n\t// isValidForRegion(country) {\r\n\t// \treturn isValidNumberForRegion(this, country, { v2: true }, this.metadata)\r\n\t// }\r\n\r\n\tgetType() {\r\n\t\treturn getNumberType(this, { v2: true }, this.metadata)\r\n\t}\r\n\r\n\tformat(format, options) {\r\n\t\treturn formatNumber(this, format, options ? { ...options, v2: true } : { v2: true }, this.metadata)\r\n\t}\r\n\r\n\tformatNational(options) {\r\n\t\treturn this.format('NATIONAL', options)\r\n\t}\r\n\r\n\tformatInternational(options) {\r\n\t\treturn this.format('INTERNATIONAL', options)\r\n\t}\r\n\r\n\tgetURI(options) {\r\n\t\treturn this.format('RFC3966', options)\r\n\t}\r\n}\r\n\r\nconst isCountryCode = (value) => /^[A-Z]{2}$/.test(value)","// This is a port of Google Android `libphonenumber`'s\r\n// `phonenumberutil.js` of December 31th, 2018.\r\n//\r\n// https://github.com/googlei18n/libphonenumber/commits/master/javascript/i18n/phonenumbers/phonenumberutil.js\r\n\r\nimport {\r\n\tVALID_DIGITS,\r\n\tVALID_PUNCTUATION,\r\n\tPLUS_CHARS,\r\n\tMIN_LENGTH_FOR_NSN,\r\n\tMAX_LENGTH_FOR_NSN,\r\n\tMAX_LENGTH_COUNTRY_CODE\r\n} from './constants'\r\n\r\nimport { matchesEntirely } from './util'\r\nimport ParseError from './ParseError'\r\nimport Metadata from './metadata'\r\nimport isViablePhoneNumber from './isViablePhoneNumber'\r\nimport { extractExtension } from './extension'\r\nimport parseIncompletePhoneNumber from './parseIncompletePhoneNumber'\r\nimport getCountryCallingCode from './getCountryCallingCode'\r\nimport getNumberType, { checkNumberLengthForType } from './getNumberType_'\r\nimport { is_possible_number } from './isPossibleNumber_'\r\nimport { stripIDDPrefix } from './IDD'\r\nimport { parseRFC3966 } from './RFC3966'\r\nimport PhoneNumber from './PhoneNumber'\r\n\r\n// We don't allow input strings for parsing to be longer than 250 chars.\r\n// This prevents malicious input from consuming CPU.\r\nconst MAX_INPUT_STRING_LENGTH = 250\r\n\r\n// This consists of the plus symbol, digits, and arabic-indic digits.\r\nconst PHONE_NUMBER_START_PATTERN = new RegExp('[' + PLUS_CHARS + VALID_DIGITS + ']')\r\n\r\n// Regular expression of trailing characters that we want to remove.\r\nconst AFTER_PHONE_NUMBER_END_PATTERN = new RegExp('[^' + VALID_DIGITS + ']+$')\r\n\r\n// `options`:\r\n//  {\r\n//    country:\r\n//    {\r\n//      restrict - (a two-letter country code)\r\n//                 the phone number must be in this country\r\n//\r\n//      default - (a two-letter country code)\r\n//                default country to use for phone number parsing and validation\r\n//                (if no country code could be derived from the phone number)\r\n//    }\r\n//  }\r\n//\r\n// Returns `{ country, number }`\r\n//\r\n// Example use cases:\r\n//\r\n// ```js\r\n// parse('8 (800) 555-35-35', 'RU')\r\n// parse('8 (800) 555-35-35', 'RU', metadata)\r\n// parse('8 (800) 555-35-35', { country: { default: 'RU' } })\r\n// parse('8 (800) 555-35-35', { country: { default: 'RU' } }, metadata)\r\n// parse('+7 800 555 35 35')\r\n// parse('+7 800 555 35 35', metadata)\r\n// ```\r\n//\r\nexport default function parse(text, options = {}, metadata)\r\n{\r\n\tmetadata = new Metadata(metadata)\r\n\r\n\t// Validate `defaultCountry`.\r\n\tif (options.defaultCountry && !metadata.hasCountry(options.defaultCountry))\r\n\t{\r\n\t\tif (options.v2) {\r\n\t\t\tthrow new ParseError('INVALID_COUNTRY')\r\n\t\t}\r\n\t\tthrow new Error(`Unknown country: ${options.defaultCountry}`)\r\n\t}\r\n\r\n\t// Parse the phone number.\r\n\tconst { number: formatted_phone_number, ext } = parse_input(text, options.v2)\r\n\r\n\t// If the phone number is not viable then return nothing.\r\n\tif (!formatted_phone_number)\r\n\t{\r\n\t\tif (options.v2) {\r\n\t\t\tthrow new ParseError('NOT_A_NUMBER')\r\n\t\t}\r\n\t\treturn {}\r\n\t}\r\n\r\n\tconst\r\n\t{\r\n\t\tcountry,\r\n\t\tnational_number : nationalNumber,\r\n\t\tcountryCallingCode,\r\n\t\tcarrierCode\r\n\t}\r\n\t= parse_phone_number\r\n\t(\r\n\t\tformatted_phone_number,\r\n\t\toptions.defaultCountry,\r\n\t\tmetadata\r\n\t)\r\n\r\n\tif (!metadata.selectedCountry())\r\n\t{\r\n\t\tif (options.v2) {\r\n\t\t\tthrow new ParseError('INVALID_COUNTRY')\r\n\t\t}\r\n\t\treturn {}\r\n\t}\r\n\r\n\t// Validate national (significant) number length.\r\n\tif (nationalNumber.length < MIN_LENGTH_FOR_NSN) {\r\n\t\t// Won't throw here because the regexp already demands length > 1.\r\n\t\t/* istanbul ignore if */\r\n\t\tif (options.v2) {\r\n\t\t\tthrow new ParseError('TOO_SHORT')\r\n\t\t}\r\n\t\t// Google's demo just throws an error in this case.\r\n\t\treturn {}\r\n\t}\r\n\r\n\t// Validate national (significant) number length.\r\n\t//\r\n\t// A sidenote:\r\n\t//\r\n\t// They say that sometimes national (significant) numbers\r\n\t// can be longer than `MAX_LENGTH_FOR_NSN` (e.g. in Germany).\r\n\t// https://github.com/googlei18n/libphonenumber/blob/7e1748645552da39c4e1ba731e47969d97bdb539/resources/phonenumber.proto#L36\r\n\t// Such numbers will just be discarded.\r\n\t//\r\n\tif (nationalNumber.length > MAX_LENGTH_FOR_NSN) {\r\n\t\tif (options.v2) {\r\n\t\t\tthrow new ParseError('TOO_LONG')\r\n\t\t}\r\n\t\t// Google's demo just throws an error in this case.\r\n\t\treturn {}\r\n\t}\r\n\r\n\tif (options.v2)\r\n\t{\r\n\t\tconst phoneNumber = new PhoneNumber(\r\n\t\t\tcountryCallingCode,\r\n\t\t\tnationalNumber,\r\n\t\t\tmetadata.metadata\r\n\t\t)\r\n\r\n\t\tif (country) {\r\n\t\t\tphoneNumber.country = country\r\n\t\t}\r\n\t\tif (carrierCode) {\r\n\t\t\tphoneNumber.carrierCode = carrierCode\r\n\t\t}\r\n\t\tif (ext) {\r\n\t\t\tphoneNumber.ext = ext\r\n\t\t}\r\n\r\n\t\treturn phoneNumber\r\n\t}\r\n\r\n\t// Check if national phone number pattern matches the number.\r\n\t// National number pattern is different for each country,\r\n\t// even for those ones which are part of the \"NANPA\" group.\r\n\tconst valid = country && matchesEntirely(nationalNumber, metadata.nationalNumberPattern()) ? true : false\r\n\r\n\tif (!options.extended)\r\n\t{\r\n\t\treturn valid ? result(country, nationalNumber, ext) : {}\r\n\t}\r\n\r\n\treturn {\r\n\t\tcountry,\r\n\t\tcountryCallingCode,\r\n\t\tcarrierCode,\r\n\t\tvalid,\r\n\t\tpossible : valid ? true : (options.extended === true) && metadata.possibleLengths() && is_possible_number(nationalNumber, countryCallingCode !== undefined, metadata),\r\n\t\tphone : nationalNumber,\r\n\t\text\r\n\t}\r\n}\r\n\r\n/**\r\n * Extracts a parseable phone number.\r\n * @param  {string} text - Input.\r\n * @return {string}.\r\n */\r\nexport function extract_formatted_phone_number(text, v2)\r\n{\r\n\tif (!text)\r\n\t{\r\n\t\treturn\r\n\t}\r\n\r\n\tif (text.length > MAX_INPUT_STRING_LENGTH)\r\n\t{\r\n\t\tif (v2) {\r\n\t\t\tthrow new ParseError('TOO_LONG')\r\n\t\t}\r\n\t\treturn\r\n\t}\r\n\r\n\t// Attempt to extract a possible number from the string passed in\r\n\r\n\tconst starts_at = text.search(PHONE_NUMBER_START_PATTERN)\r\n\r\n\tif (starts_at < 0)\r\n\t{\r\n\t\treturn\r\n\t}\r\n\r\n\treturn text\r\n\t\t// Trim everything to the left of the phone number\r\n\t\t.slice(starts_at)\r\n\t\t// Remove trailing non-numerical characters\r\n\t\t.replace(AFTER_PHONE_NUMBER_END_PATTERN, '')\r\n}\r\n\r\n// Strips any national prefix (such as 0, 1) present in the number provided.\r\n// \"Carrier codes\" are only used  in Colombia and Brazil,\r\n// and only when dialing within those countries from a mobile phone to a fixed line number.\r\nexport function strip_national_prefix_and_carrier_code(number, metadata)\r\n{\r\n\tif (!number || !metadata.nationalPrefixForParsing())\r\n\t{\r\n\t\treturn { number }\r\n\t}\r\n\r\n\t// Attempt to parse the first digits as a national prefix\r\n\tconst national_prefix_pattern = new RegExp('^(?:' + metadata.nationalPrefixForParsing() + ')')\r\n\tconst national_prefix_matcher = national_prefix_pattern.exec(number)\r\n\r\n\t// If no national prefix is present in the phone number,\r\n\t// but the national prefix is optional for this country,\r\n\t// then consider this phone number valid.\r\n\t//\r\n\t// Google's reference `libphonenumber` implementation\r\n\t// wouldn't recognize such phone numbers as valid,\r\n\t// but I think it would perfectly make sense\r\n\t// to consider such phone numbers as valid\r\n\t// because if a national phone number was originally\r\n\t// formatted without the national prefix\r\n\t// then it must be parseable back into the original national number.\r\n\t// In other words, `parse(format(number))`\r\n\t// must always be equal to `number`.\r\n\t//\r\n\tif (!national_prefix_matcher)\r\n\t{\r\n\t\treturn { number }\r\n\t}\r\n\r\n\tlet national_significant_number\r\n\r\n\t// `national_prefix_for_parsing` capturing groups\r\n\t// (used only for really messy cases: Argentina, Brazil, Mexico, Somalia)\r\n\tconst captured_groups_count = national_prefix_matcher.length - 1\r\n\r\n\t// If the national number tranformation is needed then do it.\r\n\t//\r\n\t// `national_prefix_matcher[captured_groups_count]` means that\r\n\t// the corresponding captured group is not empty.\r\n\t// It can be empty if it's optional.\r\n\t// Example: \"0?(?:...)?\" for Argentina.\r\n\t//\r\n\tif (metadata.nationalPrefixTransformRule() && national_prefix_matcher[captured_groups_count])\r\n\t{\r\n\t\tnational_significant_number = number.replace(national_prefix_pattern, metadata.nationalPrefixTransformRule())\r\n\t}\r\n\t// Else, no transformation is necessary,\r\n\t// and just strip the national prefix.\r\n\telse\r\n\t{\r\n\t\tnational_significant_number = number.slice(national_prefix_matcher[0].length)\r\n\t}\r\n\r\n\tlet carrierCode\r\n\tif (captured_groups_count > 0)\r\n\t{\r\n\t\tcarrierCode = national_prefix_matcher[1]\r\n\t}\r\n\r\n\t// The following is done in `get_country_and_national_number_for_local_number()` instead.\r\n\t//\r\n\t// // Verify the parsed national (significant) number for this country\r\n\t// const national_number_rule = new RegExp(metadata.nationalNumberPattern())\r\n\t// //\r\n\t// // If the original number (before stripping national prefix) was viable,\r\n\t// // and the resultant number is not, then prefer the original phone number.\r\n\t// // This is because for some countries (e.g. Russia) the same digit could be both\r\n\t// // a national prefix and a leading digit of a valid national phone number,\r\n\t// // like `8` is the national prefix for Russia and both\r\n\t// // `8 800 555 35 35` and `800 555 35 35` are valid numbers.\r\n\t// if (matchesEntirely(number, national_number_rule) &&\r\n\t// \t\t!matchesEntirely(national_significant_number, national_number_rule))\r\n\t// {\r\n\t// \treturn number\r\n\t// }\r\n\r\n\t// Return the parsed national (significant) number\r\n   return {\r\n   \tnumber: national_significant_number,\r\n   \tcarrierCode\r\n   }\r\n}\r\n\r\nexport function find_country_code(country_calling_code, national_phone_number, metadata)\r\n{\r\n\t// Is always non-empty, because `country_calling_code` is always valid\r\n\tconst possible_countries = metadata.countryCallingCodes()[country_calling_code]\r\n\r\n\t// If there's just one country corresponding to the country code,\r\n\t// then just return it, without further phone number digits validation.\r\n\tif (possible_countries.length === 1)\r\n\t{\r\n\t\treturn possible_countries[0]\r\n\t}\r\n\r\n\treturn _find_country_code(possible_countries, national_phone_number, metadata.metadata)\r\n}\r\n\r\n// Changes `metadata` `country`.\r\nfunction _find_country_code(possible_countries, national_phone_number, metadata)\r\n{\r\n\tmetadata = new Metadata(metadata)\r\n\r\n\tfor (const country of possible_countries)\r\n\t{\r\n\t\tmetadata.country(country)\r\n\r\n\t\t// Leading digits check would be the simplest one\r\n\t\tif (metadata.leadingDigits())\r\n\t\t{\r\n\t\t\tif (national_phone_number &&\r\n\t\t\t\tnational_phone_number.search(metadata.leadingDigits()) === 0)\r\n\t\t\t{\r\n\t\t\t\treturn country\r\n\t\t\t}\r\n\t\t}\r\n\t\t// Else perform full validation with all of those\r\n\t\t// fixed-line/mobile/etc regular expressions.\r\n\t\telse if (getNumberType({ phone: national_phone_number, country }, undefined, metadata.metadata))\r\n\t\t{\r\n\t\t\treturn country\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * @param  {string} text - Input.\r\n * @return {object} `{ ?number, ?ext }`.\r\n */\r\nfunction parse_input(text, v2)\r\n{\r\n\t// Parse RFC 3966 phone number URI.\r\n\tif (text && text.indexOf('tel:') === 0)\r\n\t{\r\n\t\treturn parseRFC3966(text)\r\n\t}\r\n\r\n\tlet number = extract_formatted_phone_number(text, v2)\r\n\r\n\t// If the phone number is not viable, then abort.\r\n\tif (!number || !isViablePhoneNumber(number))\r\n\t{\r\n\t\treturn {}\r\n\t}\r\n\r\n\t// Attempt to parse extension first, since it doesn't require region-specific\r\n\t// data and we want to have the non-normalised number here.\r\n\tconst with_extension_stripped = extractExtension(number)\r\n\tif (with_extension_stripped.ext)\r\n\t{\r\n\t\treturn with_extension_stripped\r\n\t}\r\n\r\n\treturn { number }\r\n}\r\n\r\n/**\r\n * Creates `parse()` result object.\r\n */\r\nfunction result(country, national_number, ext)\r\n{\r\n\tconst result =\r\n\t{\r\n\t\tcountry,\r\n\t\tphone : national_number\r\n\t}\r\n\r\n\tif (ext)\r\n\t{\r\n\t\tresult.ext = ext\r\n\t}\r\n\r\n\treturn result\r\n}\r\n\r\n/**\r\n * Parses a viable phone number.\r\n * Returns `{ country, countryCallingCode, national_number }`.\r\n */\r\nfunction parse_phone_number(formatted_phone_number, default_country, metadata)\r\n{\r\n\tlet { countryCallingCode, number } = extractCountryCallingCode(formatted_phone_number, default_country, metadata.metadata)\r\n\r\n\tif (!number) {\r\n\t\treturn { countryCallingCode }\r\n\t}\r\n\r\n\tlet country\r\n\r\n\tif (countryCallingCode)\r\n\t{\r\n\t\tmetadata.chooseCountryByCountryCallingCode(countryCallingCode)\r\n\t}\r\n\telse if (default_country)\r\n\t{\r\n\t\tmetadata.country(default_country)\r\n\t\tcountry = default_country\r\n\t\tcountryCallingCode = getCountryCallingCode(default_country, metadata.metadata)\r\n\t}\r\n\telse return {}\r\n\r\n\tconst { national_number, carrier_code } = parse_national_number(number, metadata)\r\n\r\n\t// Sometimes there are several countries\r\n\t// corresponding to the same country phone code\r\n\t// (e.g. NANPA countries all having `1` country phone code).\r\n\t// Therefore, to reliably determine the exact country,\r\n\t// national (significant) number should have been parsed first.\r\n\t//\r\n\t// When `metadata.json` is generated, all \"ambiguous\" country phone codes\r\n\t// get their countries populated with the full set of\r\n\t// \"phone number type\" regular expressions.\r\n\t//\r\n\tconst exactCountry = find_country_code(countryCallingCode, national_number, metadata)\r\n\tif (exactCountry)\r\n\t{\r\n\t\tcountry = exactCountry\r\n\t\tmetadata.country(country)\r\n\t}\r\n\r\n\treturn {\r\n\t\tcountry,\r\n\t\tcountryCallingCode,\r\n\t\tnational_number,\r\n\t\tcarrierCode: carrier_code\r\n\t}\r\n}\r\n\r\nfunction parse_national_number(number, metadata)\r\n{\r\n\tlet national_number = parseIncompletePhoneNumber(number)\r\n\tlet carrier_code\r\n\r\n\t// Parsing national prefixes and carrier codes\r\n\t// is only required for local phone numbers\r\n\t// but some people don't understand that\r\n\t// and sometimes write international phone numbers\r\n\t// with national prefixes (or maybe even carrier codes).\r\n\t// http://ucken.blogspot.ru/2016/03/trunk-prefixes-in-skype4b.html\r\n\t// Google's original library forgives such mistakes\r\n\t// and so does this library, because it has been requested:\r\n\t// https://github.com/catamphetamine/libphonenumber-js/issues/127\r\n\tconst { number: potential_national_number, carrierCode } = strip_national_prefix_and_carrier_code(national_number, metadata)\r\n\r\n\t// If metadata has \"possible lengths\" then employ the new algorythm.\r\n\tif (metadata.possibleLengths())\r\n\t{\r\n\t\t// We require that the NSN remaining after stripping the national prefix and\r\n\t\t// carrier code be long enough to be a possible length for the region.\r\n\t\t// Otherwise, we don't do the stripping, since the original number could be\r\n\t\t// a valid short number.\r\n\t\tswitch (checkNumberLengthForType(potential_national_number, undefined, metadata))\r\n\t\t{\r\n\t\t\tcase 'TOO_SHORT':\r\n\t\t\t// case 'IS_POSSIBLE_LOCAL_ONLY':\r\n\t\t\tcase 'INVALID_LENGTH':\r\n\t\t\t\tbreak\r\n\t\t\tdefault:\r\n\t\t\t\tnational_number = potential_national_number\r\n\t\t\t\tcarrier_code = carrierCode\r\n\t\t}\r\n\t}\r\n\telse\r\n\t{\r\n\t\t// If the original number (before stripping national prefix) was viable,\r\n\t\t// and the resultant number is not, then prefer the original phone number.\r\n\t\t// This is because for some countries (e.g. Russia) the same digit could be both\r\n\t\t// a national prefix and a leading digit of a valid national phone number,\r\n\t\t// like `8` is the national prefix for Russia and both\r\n\t\t// `8 800 555 35 35` and `800 555 35 35` are valid numbers.\r\n\t\tif (matchesEntirely(national_number, metadata.nationalNumberPattern()) &&\r\n\t\t\t\t!matchesEntirely(potential_national_number, metadata.nationalNumberPattern()))\r\n\t\t{\r\n\t\t\t// Keep the number without stripping national prefix.\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tnational_number = potential_national_number\r\n\t\t\tcarrier_code = carrierCode\r\n\t\t}\r\n\t}\r\n\r\n\treturn {\r\n\t\tnational_number,\r\n\t\tcarrier_code\r\n\t}\r\n}\r\n\r\n// Determines the country for a given (possibly incomplete) phone number.\r\n// export function get_country_from_phone_number(number, metadata)\r\n// {\r\n// \treturn parse_phone_number(number, null, metadata).country\r\n// }\r\n\r\n// Parses a formatted phone number\r\n// and returns `{ countryCallingCode, number }`\r\n// where `number` is just the \"number\" part\r\n// which is left after extracting `countryCallingCode`\r\n// and is not necessarily a \"national (significant) number\"\r\n// and might as well contain national prefix.\r\n//\r\nexport function extractCountryCallingCode(number, country, metadata)\r\n{\r\n\tnumber = parseIncompletePhoneNumber(number)\r\n\r\n\tif (!number)\r\n\t{\r\n\t\treturn {}\r\n\t}\r\n\r\n\t// If this is not an international phone number,\r\n\t// then don't extract country phone code.\r\n\tif (number[0] !== '+')\r\n\t{\r\n\t\t// Convert an \"out-of-country\" dialing phone number\r\n\t\t// to a proper international phone number.\r\n\t\tconst numberWithoutIDD = stripIDDPrefix(number, country, metadata)\r\n\r\n\t\t// If an IDD prefix was stripped then\r\n\t\t// convert the number to international one\r\n\t\t// for subsequent parsing.\r\n\t\tif (numberWithoutIDD && numberWithoutIDD !== number) {\r\n\t\t\tnumber = '+' + numberWithoutIDD\r\n\t\t} else {\r\n\t\t\treturn { number }\r\n\t\t}\r\n\t}\r\n\r\n\t// Fast abortion: country codes do not begin with a '0'\r\n\tif (number[1] === '0')\r\n\t{\r\n\t\treturn {}\r\n\t}\r\n\r\n\tmetadata = new Metadata(metadata)\r\n\r\n\t// The thing with country phone codes\r\n\t// is that they are orthogonal to each other\r\n\t// i.e. there's no such country phone code A\r\n\t// for which country phone code B exists\r\n\t// where B starts with A.\r\n\t// Therefore, while scanning digits,\r\n\t// if a valid country code is found,\r\n\t// that means that it is the country code.\r\n\t//\r\n\tlet i = 2\r\n\twhile (i - 1 <= MAX_LENGTH_COUNTRY_CODE && i <= number.length)\r\n\t{\r\n\t\tconst countryCallingCode = number.slice(1, i)\r\n\r\n\t\tif (metadata.countryCallingCodes()[countryCallingCode])\r\n\t\t{\r\n\t\t\treturn {\r\n\t\t\t\tcountryCallingCode,\r\n\t\t\t\tnumber: number.slice(i)\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\ti++\r\n\t}\r\n\r\n\treturn {}\r\n}\r\n","import parseNumber from './parse_'\r\n\r\nexport default function parsePhoneNumber(text, options, metadata) {\r\n\treturn parseNumber(text, { ...options, v2: true }, metadata)\r\n}","import parsePhoneNumber_ from './parsePhoneNumber_'\r\n\r\nexport default function parsePhoneNumber() {\r\n\tconst { text, options, metadata } = normalizeArguments(arguments)\r\n\treturn parsePhoneNumber_(text, options, metadata)\r\n}\r\n\r\nexport function normalizeArguments(args)\r\n{\r\n\tconst [arg_1, arg_2, arg_3, arg_4] = Array.prototype.slice.call(args)\r\n\r\n\tlet text\r\n\tlet options\r\n\tlet metadata\r\n\r\n\t// If the phone number is passed as a string.\r\n\t// `parsePhoneNumber('88005553535', ...)`.\r\n\tif (typeof arg_1 === 'string') {\r\n\t\ttext = arg_1\r\n\t}\r\n\telse throw new TypeError('A text for parsing must be a string.')\r\n\r\n\t// If \"default country\" argument is being passed then move it to `options`.\r\n\t// `parsePhoneNumber('88005553535', 'RU', [options], metadata)`.\r\n\tif (!arg_2 || typeof arg_2 === 'string')\r\n\t{\r\n\t\tif (arg_4) {\r\n\t\t\toptions = arg_3\r\n\t\t\tmetadata = arg_4\r\n\t\t} else {\r\n\t\t\toptions = undefined\r\n\t\t\tmetadata = arg_3\r\n\t\t}\r\n\r\n\t\tif (arg_2) {\r\n\t\t\toptions = { defaultCountry: arg_2, ...options }\r\n\t\t}\r\n\t}\r\n\t// `defaultCountry` is not passed.\r\n\t// Example: `parsePhoneNumber('+78005553535', [options], metadata)`.\r\n\telse if (isObject(arg_2))\r\n\t{\r\n\t\tif (arg_3) {\r\n\t\t\toptions  = arg_2\r\n\t\t\tmetadata = arg_3\r\n\t\t} else {\r\n\t\t\tmetadata = arg_2\r\n\t\t}\r\n\t}\r\n\telse throw new Error(`Invalid second argument: ${arg_2}`)\r\n\r\n\treturn {\r\n\t\ttext,\r\n\t\toptions,\r\n\t\tmetadata\r\n\t}\r\n}\r\n\r\n// Otherwise istanbul would show this as \"branch not covered\".\r\n/* istanbul ignore next */\r\nconst isObject = _ => typeof _ === 'object'","import parsePhoneNumber from './parsePhoneNumber_'\r\nimport ParseError from './ParseError'\r\nimport { isSupportedCountry } from './metadata'\r\n\r\nexport default function parsePhoneNumberFromString(text, options, metadata) {\r\n\t// Validate `defaultCountry`.\r\n\tif (options && options.defaultCountry && !isSupportedCountry(options.defaultCountry, metadata)) {\r\n\t\toptions = {\r\n\t\t\t...options,\r\n\t\t\tdefaultCountry: undefined\r\n\t\t}\r\n\t}\r\n\t// Parse phone number.\r\n\ttry {\r\n\t\treturn parsePhoneNumber(text, options, metadata)\r\n\t} catch (error) {\r\n\t\t/* istanbul ignore else */\r\n\t\tif (error instanceof ParseError) {\r\n\t\t\t//\r\n\t\t} else {\r\n\t\t\tthrow error\r\n\t\t}\r\n\t}\r\n}\r\n","import { normalizeArguments } from './parsePhoneNumber'\r\nimport parsePhoneNumberFromString_ from './parsePhoneNumberFromString_'\r\n\r\nexport default function parsePhoneNumberFromString() {\r\n\tconst { text, options, metadata } = normalizeArguments(arguments)\r\n\treturn parsePhoneNumberFromString_(text, options, metadata)\r\n}\r\n","/** Returns a regular expression quantifier with an upper and lower limit. */\r\nexport function limit(lower, upper)\r\n{\r\n\tif ((lower < 0) || (upper <= 0) || (upper < lower)) {\r\n\t\tthrow new TypeError()\r\n\t}\r\n\treturn `{${lower},${upper}}`\r\n}\r\n\r\n/**\r\n * Trims away any characters after the first match of {@code pattern} in {@code candidate},\r\n * returning the trimmed version.\r\n */\r\nexport function trimAfterFirstMatch(regexp, string)\r\n{\r\n\tconst index = string.search(regexp)\r\n\r\n\tif (index >= 0) {\r\n\t\treturn string.slice(0, index)\r\n\t}\r\n\r\n\treturn string\r\n}\r\n\r\nexport function startsWith(string, substring)\r\n{\r\n\treturn string.indexOf(substring) === 0\r\n}\r\n\r\nexport function endsWith(string, substring)\r\n{\r\n\treturn string.indexOf(substring, string.length - substring.length) === string.length - substring.length\r\n}\r\n","import { trimAfterFirstMatch } from './util'\r\n\r\n// Regular expression of characters typically used to start a second phone number for the purposes\r\n// of parsing. This allows us to strip off parts of the number that are actually the start of\r\n// another number, such as for: (530) 583-6985 x302/x2303 -> the second extension here makes this\r\n// actually two phone numbers, (530) 583-6985 x302 and (530) 583-6985 x2303. We remove the second\r\n// extension so that the first number is parsed correctly.\r\n//\r\n// Matches a slash (\\ or /) followed by a space followed by an `x`.\r\n//\r\nconst SECOND_NUMBER_START_PATTERN = /[\\\\/] *x/\r\n\r\nexport default function parsePreCandidate(candidate)\r\n{\r\n\t// Check for extra numbers at the end.\r\n\t// TODO: This is the place to start when trying to support extraction of multiple phone number\r\n\t// from split notations (+41 79 123 45 67 / 68).\r\n\treturn trimAfterFirstMatch(SECOND_NUMBER_START_PATTERN, candidate)\r\n}","// Matches strings that look like dates using \"/\" as a separator.\r\n// Examples: 3/10/2011, 31/10/96 or 08/31/95.\r\nconst SLASH_SEPARATED_DATES = /(?:(?:[0-3]?\\d\\/[01]?\\d)|(?:[01]?\\d\\/[0-3]?\\d))\\/(?:[12]\\d)?\\d{2}/\r\n\r\n// Matches timestamps.\r\n// Examples: \"2012-01-02 08:00\".\r\n// Note that the reg-ex does not include the\r\n// trailing \":\\d\\d\" -- that is covered by TIME_STAMPS_SUFFIX.\r\nconst TIME_STAMPS = /[12]\\d{3}[-/]?[01]\\d[-/]?[0-3]\\d +[0-2]\\d$/\r\nconst TIME_STAMPS_SUFFIX_LEADING = /^:[0-5]\\d/\r\n\r\nexport default function isValidPreCandidate(candidate, offset, text)\r\n{\r\n\t// Skip a match that is more likely to be a date.\r\n\tif (SLASH_SEPARATED_DATES.test(candidate)) {\r\n\t\treturn false\r\n\t}\r\n\r\n\t// Skip potential time-stamps.\r\n\tif (TIME_STAMPS.test(candidate))\r\n\t{\r\n\t\tconst followingText = text.slice(offset + candidate.length)\r\n\t\tif (TIME_STAMPS_SUFFIX_LEADING.test(followingText)) {\r\n\t\t\treturn false\r\n\t\t}\r\n\t}\r\n\r\n\treturn true\r\n}","// Javascript doesn't support UTF-8 regular expressions.\r\n// So mimicking them here.\r\n\r\n// Copy-pasted from `PhoneNumberMatcher.js`.\r\n\r\n/**\r\n * \"\\p{Z}\" is any kind of whitespace or invisible separator (\"Separator\").\r\n * http://www.regular-expressions.info/unicode.html\r\n * \"\\P{Z}\" is the reverse of \"\\p{Z}\".\r\n * \"\\p{N}\" is any kind of numeric character in any script (\"Number\").\r\n * \"\\p{Nd}\" is a digit zero through nine in any script except \"ideographic scripts\" (\"Decimal_Digit_Number\").\r\n * \"\\p{Sc}\" is a currency symbol (\"Currency_Symbol\").\r\n * \"\\p{L}\" is any kind of letter from any language (\"Letter\").\r\n * \"\\p{Mn}\" is \"non-spacing mark\".\r\n *\r\n * Javascript doesn't support Unicode Regular Expressions\r\n * so substituting it with this explicit set of characters.\r\n *\r\n * https://stackoverflow.com/questions/13210194/javascript-regex-equivalent-of-a-za-z-using-pl\r\n * https://github.com/danielberndt/babel-plugin-utf-8-regex/blob/master/src/transformer.js\r\n */\r\n\r\nconst _pZ = '\\u0020\\u00A0\\u1680\\u180E\\u2000-\\u200A\\u2028\\u2029\\u202F\\u205F\\u3000'\r\nexport const pZ = `[${_pZ}]`\r\nexport const PZ = `[^${_pZ}]`\r\n\r\nexport const _pN = '\\u0030-\\u0039\\u00B2\\u00B3\\u00B9\\u00BC-\\u00BE\\u0660-\\u0669\\u06F0-\\u06F9\\u07C0-\\u07C9\\u0966-\\u096F\\u09E6-\\u09EF\\u09F4-\\u09F9\\u0A66-\\u0A6F\\u0AE6-\\u0AEF\\u0B66-\\u0B6F\\u0B72-\\u0B77\\u0BE6-\\u0BF2\\u0C66-\\u0C6F\\u0C78-\\u0C7E\\u0CE6-\\u0CEF\\u0D66-\\u0D75\\u0E50-\\u0E59\\u0ED0-\\u0ED9\\u0F20-\\u0F33\\u1040-\\u1049\\u1090-\\u1099\\u1369-\\u137C\\u16EE-\\u16F0\\u17E0-\\u17E9\\u17F0-\\u17F9\\u1810-\\u1819\\u1946-\\u194F\\u19D0-\\u19DA\\u1A80-\\u1A89\\u1A90-\\u1A99\\u1B50-\\u1B59\\u1BB0-\\u1BB9\\u1C40-\\u1C49\\u1C50-\\u1C59\\u2070\\u2074-\\u2079\\u2080-\\u2089\\u2150-\\u2182\\u2185-\\u2189\\u2460-\\u249B\\u24EA-\\u24FF\\u2776-\\u2793\\u2CFD\\u3007\\u3021-\\u3029\\u3038-\\u303A\\u3192-\\u3195\\u3220-\\u3229\\u3248-\\u324F\\u3251-\\u325F\\u3280-\\u3289\\u32B1-\\u32BF\\uA620-\\uA629\\uA6E6-\\uA6EF\\uA830-\\uA835\\uA8D0-\\uA8D9\\uA900-\\uA909\\uA9D0-\\uA9D9\\uAA50-\\uAA59\\uABF0-\\uABF9\\uFF10-\\uFF19'\r\n// const pN = `[${_pN}]`\r\n\r\nconst _pNd = '\\u0030-\\u0039\\u0660-\\u0669\\u06F0-\\u06F9\\u07C0-\\u07C9\\u0966-\\u096F\\u09E6-\\u09EF\\u0A66-\\u0A6F\\u0AE6-\\u0AEF\\u0B66-\\u0B6F\\u0BE6-\\u0BEF\\u0C66-\\u0C6F\\u0CE6-\\u0CEF\\u0D66-\\u0D6F\\u0E50-\\u0E59\\u0ED0-\\u0ED9\\u0F20-\\u0F29\\u1040-\\u1049\\u1090-\\u1099\\u17E0-\\u17E9\\u1810-\\u1819\\u1946-\\u194F\\u19D0-\\u19D9\\u1A80-\\u1A89\\u1A90-\\u1A99\\u1B50-\\u1B59\\u1BB0-\\u1BB9\\u1C40-\\u1C49\\u1C50-\\u1C59\\uA620-\\uA629\\uA8D0-\\uA8D9\\uA900-\\uA909\\uA9D0-\\uA9D9\\uAA50-\\uAA59\\uABF0-\\uABF9\\uFF10-\\uFF19'\r\nexport const pNd = `[${_pNd}]`\r\n\r\nexport const _pL = '\\u0041-\\u005A\\u0061-\\u007A\\u00AA\\u00B5\\u00BA\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0370-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u048A-\\u0527\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0620-\\u064A\\u066E\\u066F\\u0671-\\u06D3\\u06D5\\u06E5\\u06E6\\u06EE\\u06EF\\u06FA-\\u06FC\\u06FF\\u0710\\u0712-\\u072F\\u074D-\\u07A5\\u07B1\\u07CA-\\u07EA\\u07F4\\u07F5\\u07FA\\u0800-\\u0815\\u081A\\u0824\\u0828\\u0840-\\u0858\\u08A0\\u08A2-\\u08AC\\u0904-\\u0939\\u093D\\u0950\\u0958-\\u0961\\u0971-\\u0977\\u0979-\\u097F\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BD\\u09CE\\u09DC\\u09DD\\u09DF-\\u09E1\\u09F0\\u09F1\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A59-\\u0A5C\\u0A5E\\u0A72-\\u0A74\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABD\\u0AD0\\u0AE0\\u0AE1\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3D\\u0B5C\\u0B5D\\u0B5F-\\u0B61\\u0B71\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BD0\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C33\\u0C35-\\u0C39\\u0C3D\\u0C58\\u0C59\\u0C60\\u0C61\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBD\\u0CDE\\u0CE0\\u0CE1\\u0CF1\\u0CF2\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D\\u0D4E\\u0D60\\u0D61\\u0D7A-\\u0D7F\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0E01-\\u0E30\\u0E32\\u0E33\\u0E40-\\u0E46\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB0\\u0EB2\\u0EB3\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EDC-\\u0EDF\\u0F00\\u0F40-\\u0F47\\u0F49-\\u0F6C\\u0F88-\\u0F8C\\u1000-\\u102A\\u103F\\u1050-\\u1055\\u105A-\\u105D\\u1061\\u1065\\u1066\\u106E-\\u1070\\u1075-\\u1081\\u108E\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u1380-\\u138F\\u13A0-\\u13F4\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u1700-\\u170C\\u170E-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176C\\u176E-\\u1770\\u1780-\\u17B3\\u17D7\\u17DC\\u1820-\\u1877\\u1880-\\u18A8\\u18AA\\u18B0-\\u18F5\\u1900-\\u191C\\u1950-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19C1-\\u19C7\\u1A00-\\u1A16\\u1A20-\\u1A54\\u1AA7\\u1B05-\\u1B33\\u1B45-\\u1B4B\\u1B83-\\u1BA0\\u1BAE\\u1BAF\\u1BBA-\\u1BE5\\u1C00-\\u1C23\\u1C4D-\\u1C4F\\u1C5A-\\u1C7D\\u1CE9-\\u1CEC\\u1CEE-\\u1CF1\\u1CF5\\u1CF6\\u1D00-\\u1DBF\\u1E00-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u2071\\u207F\\u2090-\\u209C\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D\\u212F-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2183\\u2184\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CEE\\u2CF2\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D80-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u2E2F\\u3005\\u3006\\u3031-\\u3035\\u303B\\u303C\\u3041-\\u3096\\u309D-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312D\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FCC\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA61F\\uA62A\\uA62B\\uA640-\\uA66E\\uA67F-\\uA697\\uA6A0-\\uA6E5\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA78E\\uA790-\\uA793\\uA7A0-\\uA7AA\\uA7F8-\\uA801\\uA803-\\uA805\\uA807-\\uA80A\\uA80C-\\uA822\\uA840-\\uA873\\uA882-\\uA8B3\\uA8F2-\\uA8F7\\uA8FB\\uA90A-\\uA925\\uA930-\\uA946\\uA960-\\uA97C\\uA984-\\uA9B2\\uA9CF\\uAA00-\\uAA28\\uAA40-\\uAA42\\uAA44-\\uAA4B\\uAA60-\\uAA76\\uAA7A\\uAA80-\\uAAAF\\uAAB1\\uAAB5\\uAAB6\\uAAB9-\\uAABD\\uAAC0\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEA\\uAAF2-\\uAAF4\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uABC0-\\uABE2\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D\\uFB1F-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF21-\\uFF3A\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC'\r\nconst pL = `[${_pL}]`\r\nconst pL_regexp = new RegExp(pL)\r\n\r\nconst _pSc = '\\u0024\\u00A2-\\u00A5\\u058F\\u060B\\u09F2\\u09F3\\u09FB\\u0AF1\\u0BF9\\u0E3F\\u17DB\\u20A0-\\u20B9\\uA838\\uFDFC\\uFE69\\uFF04\\uFFE0\\uFFE1\\uFFE5\\uFFE6'\r\nconst pSc = `[${_pSc}]`\r\nconst pSc_regexp = new RegExp(pSc)\r\n\r\nconst _pMn = '\\u0300-\\u036F\\u0483-\\u0487\\u0591-\\u05BD\\u05BF\\u05C1\\u05C2\\u05C4\\u05C5\\u05C7\\u0610-\\u061A\\u064B-\\u065F\\u0670\\u06D6-\\u06DC\\u06DF-\\u06E4\\u06E7\\u06E8\\u06EA-\\u06ED\\u0711\\u0730-\\u074A\\u07A6-\\u07B0\\u07EB-\\u07F3\\u0816-\\u0819\\u081B-\\u0823\\u0825-\\u0827\\u0829-\\u082D\\u0859-\\u085B\\u08E4-\\u08FE\\u0900-\\u0902\\u093A\\u093C\\u0941-\\u0948\\u094D\\u0951-\\u0957\\u0962\\u0963\\u0981\\u09BC\\u09C1-\\u09C4\\u09CD\\u09E2\\u09E3\\u0A01\\u0A02\\u0A3C\\u0A41\\u0A42\\u0A47\\u0A48\\u0A4B-\\u0A4D\\u0A51\\u0A70\\u0A71\\u0A75\\u0A81\\u0A82\\u0ABC\\u0AC1-\\u0AC5\\u0AC7\\u0AC8\\u0ACD\\u0AE2\\u0AE3\\u0B01\\u0B3C\\u0B3F\\u0B41-\\u0B44\\u0B4D\\u0B56\\u0B62\\u0B63\\u0B82\\u0BC0\\u0BCD\\u0C3E-\\u0C40\\u0C46-\\u0C48\\u0C4A-\\u0C4D\\u0C55\\u0C56\\u0C62\\u0C63\\u0CBC\\u0CBF\\u0CC6\\u0CCC\\u0CCD\\u0CE2\\u0CE3\\u0D41-\\u0D44\\u0D4D\\u0D62\\u0D63\\u0DCA\\u0DD2-\\u0DD4\\u0DD6\\u0E31\\u0E34-\\u0E3A\\u0E47-\\u0E4E\\u0EB1\\u0EB4-\\u0EB9\\u0EBB\\u0EBC\\u0EC8-\\u0ECD\\u0F18\\u0F19\\u0F35\\u0F37\\u0F39\\u0F71-\\u0F7E\\u0F80-\\u0F84\\u0F86\\u0F87\\u0F8D-\\u0F97\\u0F99-\\u0FBC\\u0FC6\\u102D-\\u1030\\u1032-\\u1037\\u1039\\u103A\\u103D\\u103E\\u1058\\u1059\\u105E-\\u1060\\u1071-\\u1074\\u1082\\u1085\\u1086\\u108D\\u109D\\u135D-\\u135F\\u1712-\\u1714\\u1732-\\u1734\\u1752\\u1753\\u1772\\u1773\\u17B4\\u17B5\\u17B7-\\u17BD\\u17C6\\u17C9-\\u17D3\\u17DD\\u180B-\\u180D\\u18A9\\u1920-\\u1922\\u1927\\u1928\\u1932\\u1939-\\u193B\\u1A17\\u1A18\\u1A56\\u1A58-\\u1A5E\\u1A60\\u1A62\\u1A65-\\u1A6C\\u1A73-\\u1A7C\\u1A7F\\u1B00-\\u1B03\\u1B34\\u1B36-\\u1B3A\\u1B3C\\u1B42\\u1B6B-\\u1B73\\u1B80\\u1B81\\u1BA2-\\u1BA5\\u1BA8\\u1BA9\\u1BAB\\u1BE6\\u1BE8\\u1BE9\\u1BED\\u1BEF-\\u1BF1\\u1C2C-\\u1C33\\u1C36\\u1C37\\u1CD0-\\u1CD2\\u1CD4-\\u1CE0\\u1CE2-\\u1CE8\\u1CED\\u1CF4\\u1DC0-\\u1DE6\\u1DFC-\\u1DFF\\u20D0-\\u20DC\\u20E1\\u20E5-\\u20F0\\u2CEF-\\u2CF1\\u2D7F\\u2DE0-\\u2DFF\\u302A-\\u302D\\u3099\\u309A\\uA66F\\uA674-\\uA67D\\uA69F\\uA6F0\\uA6F1\\uA802\\uA806\\uA80B\\uA825\\uA826\\uA8C4\\uA8E0-\\uA8F1\\uA926-\\uA92D\\uA947-\\uA951\\uA980-\\uA982\\uA9B3\\uA9B6-\\uA9B9\\uA9BC\\uAA29-\\uAA2E\\uAA31\\uAA32\\uAA35\\uAA36\\uAA43\\uAA4C\\uAAB0\\uAAB2-\\uAAB4\\uAAB7\\uAAB8\\uAABE\\uAABF\\uAAC1\\uAAEC\\uAAED\\uAAF6\\uABE5\\uABE8\\uABED\\uFB1E\\uFE00-\\uFE0F\\uFE20-\\uFE26'\r\nconst pMn = `[${_pMn}]`\r\nconst pMn_regexp = new RegExp(pMn)\r\n\r\nconst _InBasic_Latin = '\\u0000-\\u007F'\r\nconst _InLatin_1_Supplement = '\\u0080-\\u00FF'\r\nconst _InLatin_Extended_A = '\\u0100-\\u017F'\r\nconst _InLatin_Extended_Additional = '\\u1E00-\\u1EFF'\r\nconst _InLatin_Extended_B = '\\u0180-\\u024F'\r\nconst _InCombining_Diacritical_Marks = '\\u0300-\\u036F'\r\n\r\nconst latinLetterRegexp = new RegExp\r\n(\r\n\t'[' +\r\n\t_InBasic_Latin +\r\n\t_InLatin_1_Supplement +\r\n\t_InLatin_Extended_A +\r\n\t_InLatin_Extended_Additional +\r\n\t_InLatin_Extended_B +\r\n\t_InCombining_Diacritical_Marks +\r\n\t']'\r\n)\r\n\r\n/**\r\n * Helper method to determine if a character is a Latin-script letter or not.\r\n * For our purposes, combining marks should also return true since we assume\r\n * they have been added to a preceding Latin character.\r\n */\r\nexport function isLatinLetter(letter)\r\n{\r\n\t// Combining marks are a subset of non-spacing-mark.\r\n\tif (!pL_regexp.test(letter) && !pMn_regexp.test(letter)) {\r\n\t\treturn false\r\n\t}\r\n\r\n\treturn latinLetterRegexp.test(letter)\r\n}\r\n\r\nexport function isInvalidPunctuationSymbol(character)\r\n{\r\n\treturn character === '%' || pSc_regexp.test(character)\r\n}","// Copy-pasted from `PhoneNumberMatcher.js`.\r\n\r\nimport { PLUS_CHARS } from '../constants'\r\nimport { limit } from './util'\r\n\r\nimport {\r\n\tisLatinLetter,\r\n\tisInvalidPunctuationSymbol\r\n} from './utf-8'\r\n\r\nconst OPENING_PARENS = '(\\\\[\\uFF08\\uFF3B'\r\nconst CLOSING_PARENS = ')\\\\]\\uFF09\\uFF3D'\r\nconst NON_PARENS = `[^${OPENING_PARENS}${CLOSING_PARENS}]`\r\n\r\nexport const LEAD_CLASS = `[${OPENING_PARENS}${PLUS_CHARS}]`\r\n\r\n// Punctuation that may be at the start of a phone number - brackets and plus signs.\r\nconst LEAD_CLASS_LEADING = new RegExp('^' + LEAD_CLASS)\r\n\r\n// Limit on the number of pairs of brackets in a phone number.\r\nconst BRACKET_PAIR_LIMIT = limit(0, 3)\r\n\r\n/**\r\n * Pattern to check that brackets match. Opening brackets should be closed within a phone number.\r\n * This also checks that there is something inside the brackets. Having no brackets at all is also\r\n * fine.\r\n *\r\n * An opening bracket at the beginning may not be closed, but subsequent ones should be.  It's\r\n * also possible that the leading bracket was dropped, so we shouldn't be surprised if we see a\r\n * closing bracket first. We limit the sets of brackets in a phone number to four.\r\n */\r\nconst MATCHING_BRACKETS_ENTIRE = new RegExp\r\n(\r\n\t'^'\r\n\t+ \"(?:[\" + OPENING_PARENS + \"])?\" + \"(?:\" + NON_PARENS + \"+\" + \"[\" + CLOSING_PARENS + \"])?\"\r\n\t+ NON_PARENS + \"+\"\r\n\t+ \"(?:[\" + OPENING_PARENS + \"]\" + NON_PARENS + \"+[\" + CLOSING_PARENS + \"])\" + BRACKET_PAIR_LIMIT\r\n\t+ NON_PARENS + \"*\"\r\n\t+ '$'\r\n)\r\n\r\n/**\r\n * Matches strings that look like publication pages. Example:\r\n * <pre>Computing Complete Answers to Queries in the Presence of Limited Access Patterns.\r\n * Chen Li. VLDB J. 12(3): 211-227 (2003).</pre>\r\n *\r\n * The string \"211-227 (2003)\" is not a telephone number.\r\n */\r\nconst PUB_PAGES = /\\d{1,5}-+\\d{1,5}\\s{0,4}\\(\\d{1,4}/\r\n\r\nexport default function isValidCandidate(candidate, offset, text, leniency)\r\n{\r\n\t// Check the candidate doesn't contain any formatting\r\n\t// which would indicate that it really isn't a phone number.\r\n\tif (!MATCHING_BRACKETS_ENTIRE.test(candidate) || PUB_PAGES.test(candidate)) {\r\n\t\treturn\r\n\t}\r\n\r\n\t// If leniency is set to VALID or stricter, we also want to skip numbers that are surrounded\r\n\t// by Latin alphabetic characters, to skip cases like abc8005001234 or 8005001234def.\r\n\tif (leniency !== 'POSSIBLE')\r\n\t{\r\n\t\t// If the candidate is not at the start of the text,\r\n\t\t// and does not start with phone-number punctuation,\r\n\t\t// check the previous character.\r\n\t\tif (offset > 0 && !LEAD_CLASS_LEADING.test(candidate))\r\n\t\t{\r\n\t\t\tconst previousChar = text[offset - 1]\r\n\t\t\t// We return null if it is a latin letter or an invalid punctuation symbol.\r\n\t\t\tif (isInvalidPunctuationSymbol(previousChar) || isLatinLetter(previousChar)) {\r\n\t\t\t\treturn false\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tconst lastCharIndex = offset + candidate.length\r\n\t\tif (lastCharIndex < text.length)\r\n\t\t{\r\n\t\t\tconst nextChar = text[lastCharIndex]\r\n\t\t\tif (isInvalidPunctuationSymbol(nextChar) || isLatinLetter(nextChar)) {\r\n\t\t\t\treturn false\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\treturn true\r\n}","// This is a legacy function.\r\n// Use `findNumbers()` instead.\r\n\r\nimport {\r\n\tPLUS_CHARS,\r\n\tVALID_PUNCTUATION,\r\n\tVALID_DIGITS,\r\n\tWHITESPACE\r\n} from './constants'\r\n\r\nimport { EXTN_PATTERNS_FOR_PARSING } from './extension'\r\n\r\nimport parse from './parse_'\r\n\r\nimport parsePreCandidate from './findNumbers/parsePreCandidate'\r\nimport isValidPreCandidate from './findNumbers/isValidPreCandidate'\r\nimport isValidCandidate from './findNumbers/isValidCandidate'\r\n\r\n// Copy-pasted from `./parse.js`.\r\nconst VALID_PHONE_NUMBER =\r\n\t'[' + PLUS_CHARS + ']{0,1}' +\r\n\t'(?:' +\r\n\t\t'[' + VALID_PUNCTUATION + ']*' +\r\n\t\t'[' + VALID_DIGITS + ']' +\r\n\t'){3,}' +\r\n\t'[' +\r\n\t\tVALID_PUNCTUATION +\r\n\t\tVALID_DIGITS +\r\n\t']*'\r\n\r\nconst WHITESPACE_IN_THE_BEGINNING_PATTERN = new RegExp('^[' + WHITESPACE + ']+')\r\nconst PUNCTUATION_IN_THE_END_PATTERN = new RegExp('[' + VALID_PUNCTUATION + ']+$')\r\n\r\n// // Regular expression for getting opening brackets for a valid number\r\n// // found using `PHONE_NUMBER_START_PATTERN` for prepending those brackets to the number.\r\n// const BEFORE_NUMBER_DIGITS_PUNCTUATION = new RegExp('[' + OPENING_BRACKETS + ']+' + '[' + WHITESPACE + ']*' + '$')\r\n\r\nconst VALID_PRECEDING_CHARACTER_PATTERN = /[^a-zA-Z0-9]/\r\n\r\nexport default function findPhoneNumbers(text, options, metadata)\r\n{\r\n\t/* istanbul ignore if */\r\n\tif (options === undefined) {\r\n\t\toptions = {}\r\n\t}\r\n\r\n\tconst search = new PhoneNumberSearch(text, options, metadata)\r\n\tconst phones = []\r\n\twhile (search.hasNext()) {\r\n\t\tphones.push(search.next())\r\n\t}\r\n\treturn phones\r\n}\r\n\r\n/**\r\n * @return ES6 `for ... of` iterator.\r\n */\r\nexport function searchPhoneNumbers(text, options, metadata)\r\n{\r\n\t/* istanbul ignore if */\r\n\tif (options === undefined) {\r\n\t\toptions = {}\r\n\t}\r\n\r\n\tconst search = new PhoneNumberSearch(text, options, metadata)\r\n\r\n\treturn  {\r\n\t\t[Symbol.iterator]() {\r\n\t\t\treturn {\r\n\t    \t\tnext: () => {\r\n\t    \t\t\tif (search.hasNext()) {\r\n\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\tdone: false,\r\n\t\t\t\t\t\t\tvalue: search.next()\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn {\r\n\t\t\t\t\t\tdone: true\r\n\t\t\t\t\t}\r\n\t    \t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * Extracts a parseable phone number including any opening brackets, etc.\r\n * @param  {string} text - Input.\r\n * @return {object} `{ ?number, ?startsAt, ?endsAt }`.\r\n */\r\nexport class PhoneNumberSearch\r\n{\r\n\t// Iteration tristate.\r\n\tstate = 'NOT_READY'\r\n\r\n\tconstructor(text, options = {}, metadata)\r\n\t{\r\n\t\tthis.text = text\r\n\t\tthis.options = options\r\n\t\tthis.metadata = metadata\r\n\r\n\t\tthis.regexp = new RegExp\r\n\t\t(\r\n\t\t\tVALID_PHONE_NUMBER +\r\n\t\t\t// Phone number extensions\r\n\t\t\t'(?:' + EXTN_PATTERNS_FOR_PARSING + ')?',\r\n\t\t\t'ig'\r\n\t\t)\r\n\r\n\t\t// this.searching_from = 0\r\n\t}\r\n\r\n\tfind()\r\n\t{\r\n\t\tconst matches = this.regexp.exec(this.text)\r\n\r\n\t\tif (!matches) {\r\n\t\t\treturn\r\n\t\t}\r\n\r\n\t\tlet number   = matches[0]\r\n\t\tlet startsAt = matches.index\r\n\r\n\t\tnumber = number.replace(WHITESPACE_IN_THE_BEGINNING_PATTERN, '')\r\n\t\tstartsAt += matches[0].length - number.length\r\n\t\t// Fixes not parsing numbers with whitespace in the end.\r\n\t\t// Also fixes not parsing numbers with opening parentheses in the end.\r\n\t\t// https://github.com/catamphetamine/libphonenumber-js/issues/252\r\n\t\tnumber = number.replace(PUNCTUATION_IN_THE_END_PATTERN, '')\r\n\r\n\t\tnumber = parsePreCandidate(number)\r\n\r\n\t\tconst result = this.parseCandidate(number, startsAt)\r\n\r\n\t\tif (result) {\r\n\t\t\treturn result\r\n\t\t}\r\n\r\n\t\t// Tail recursion.\r\n\t\t// Try the next one if this one is not a valid phone number.\r\n\t\treturn this.find()\r\n\t}\r\n\r\n\tparseCandidate(number, startsAt)\r\n\t{\r\n\t\tif (!isValidPreCandidate(number, startsAt, this.text)) {\r\n\t\t\treturn\r\n\t\t}\r\n\r\n\t\t// Don't parse phone numbers which are non-phone numbers\r\n\t\t// due to being part of something else (e.g. a UUID).\r\n\t\t// https://github.com/catamphetamine/libphonenumber-js/issues/213\r\n\t\t// Copy-pasted from Google's `PhoneNumberMatcher.js` (`.parseAndValidate()`).\r\n\t\tif (!isValidCandidate(number, startsAt, this.text, this.options.extended ? 'POSSIBLE' : 'VALID'))\r\n\t\t{\r\n\t\t\treturn\r\n\t\t}\r\n\r\n\t\t// // Prepend any opening brackets left behind by the\r\n\t\t// // `PHONE_NUMBER_START_PATTERN` regexp.\r\n\t\t// const text_before_number = text.slice(this.searching_from, startsAt)\r\n\t\t// const full_number_starts_at = text_before_number.search(BEFORE_NUMBER_DIGITS_PUNCTUATION)\r\n\t\t// if (full_number_starts_at >= 0)\r\n\t\t// {\r\n\t\t// \tnumber   = text_before_number.slice(full_number_starts_at) + number\r\n\t\t// \tstartsAt = full_number_starts_at\r\n\t\t// }\r\n\t\t//\r\n\t\t// this.searching_from = matches.lastIndex\r\n\r\n\t\tconst result = parse(number, this.options, this.metadata)\r\n\r\n\t\tif (!result.phone) {\r\n\t\t\treturn\r\n\t\t}\r\n\r\n\t\tresult.startsAt = startsAt\r\n\t\tresult.endsAt   = startsAt + number.length\r\n\r\n\t\treturn result\r\n\t}\r\n\r\n\thasNext()\r\n\t{\r\n\t\tif (this.state === 'NOT_READY')\r\n\t\t{\r\n\t\t\tthis.last_match = this.find()\r\n\r\n\t\t\tif (this.last_match)\r\n\t\t\t{\r\n\t\t\t\tthis.state = 'READY'\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tthis.state = 'DONE'\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn this.state === 'READY'\r\n\t}\r\n\r\n\tnext()\r\n\t{\r\n\t\t// Check the state and find the next match as a side-effect if necessary.\r\n\t\tif (!this.hasNext())\r\n\t\t{\r\n\t\t\tthrow new Error('No next element')\r\n\t\t}\r\n\r\n\t\t// Don't retain that memory any longer than necessary.\r\n\t\tconst result = this.last_match\r\n\t\tthis.last_match = null\r\n\t\tthis.state = 'NOT_READY'\r\n\t\treturn result\r\n\t}\r\n}","import isValidNumber from '../validate_'\r\nimport parseDigits from '../parseDigits'\r\n\r\nimport {\r\n\tstartsWith,\r\n\tendsWith\r\n} from './util'\r\n\r\n/**\r\n * Leniency when finding potential phone numbers in text segments\r\n * The levels here are ordered in increasing strictness.\r\n */\r\nexport default\r\n{\r\n\t/**\r\n\t * Phone numbers accepted are \"possible\", but not necessarily \"valid\".\r\n\t */\r\n\tPOSSIBLE(number, candidate, metadata)\r\n\t{\r\n\t\treturn true\r\n\t},\r\n\r\n\t/**\r\n\t * Phone numbers accepted are \"possible\" and \"valid\".\r\n\t * Numbers written in national format must have their national-prefix\r\n\t * present if it is usually written for a number of this type.\r\n\t */\r\n\tVALID(number, candidate, metadata)\r\n\t{\r\n\t\tif (!isValidNumber(number, undefined, metadata) ||\r\n\t\t\t!containsOnlyValidXChars(number, candidate.toString(), metadata))\r\n\t\t{\r\n\t\t\treturn false\r\n\t\t}\r\n\r\n    // Skipped for simplicity.\r\n\t\t// return isNationalPrefixPresentIfRequired(number, metadata)\r\n    return true\r\n  },\r\n\r\n\t/**\r\n\t * Phone numbers accepted are \"valid\" and\r\n\t * are grouped in a possible way for this locale. For example, a US number written as\r\n\t * \"65 02 53 00 00\" and \"650253 0000\" are not accepted at this leniency level, whereas\r\n\t * \"650 253 0000\", \"650 2530000\" or \"6502530000\" are.\r\n\t * Numbers with more than one '/' symbol in the national significant number\r\n\t * are also dropped at this level.\r\n\t *\r\n\t * Warning: This level might result in lower coverage especially for regions outside of\r\n\t * country code \"+1\". If you are not sure about which level to use,\r\n\t * email the discussion group libphonenumber-discuss@googlegroups.com.\r\n\t */\r\n\tSTRICT_GROUPING(number, candidate, metadata)\r\n\t{\r\n\t\tconst candidateString = candidate.toString()\r\n\r\n\t\tif (!isValidNumber(number, undefined, metadata)\r\n\t\t\t|| !containsOnlyValidXChars(number, candidateString, metadata)\r\n\t\t\t|| containsMoreThanOneSlashInNationalNumber(number, candidateString)\r\n\t\t\t|| !isNationalPrefixPresentIfRequired(number, metadata))\r\n\t\t{\r\n\t\t\treturn false\r\n\t\t}\r\n\r\n\t\treturn checkNumberGroupingIsValid\r\n\t\t(\r\n\t\t\tnumber,\r\n\t\t\tcandidate,\r\n\t\t\tmetadata,\r\n\t\t\tallNumberGroupsRemainGrouped\r\n\t\t)\r\n  },\r\n\r\n\t/**\r\n\t * Phone numbers accepted are {@linkplain PhoneNumberUtil#isValidNumber(PhoneNumber) valid} and\r\n\t * are grouped in the same way that we would have formatted it, or as a single block. For\r\n\t * example, a US number written as \"650 2530000\" is not accepted at this leniency level, whereas\r\n\t * \"650 253 0000\" or \"6502530000\" are.\r\n\t * Numbers with more than one '/' symbol are also dropped at this level.\r\n\t * <p>\r\n\t * Warning: This level might result in lower coverage especially for regions outside of country\r\n\t * code \"+1\". If you are not sure about which level to use, email the discussion group\r\n\t * libphonenumber-discuss@googlegroups.com.\r\n\t */\r\n\tEXACT_GROUPING(number, candidate, metadata)\r\n\t{\r\n\t\tconst candidateString = candidate.toString()\r\n\r\n\t\tif (!isValidNumber(number, undefined, metadata)\r\n\t\t\t|| !containsOnlyValidXChars(number, candidateString, metadata)\r\n\t\t\t|| containsMoreThanOneSlashInNationalNumber(number, candidateString)\r\n\t\t\t|| !isNationalPrefixPresentIfRequired(number, metadata))\r\n\t\t{\r\n\t\t\treturn false\r\n\t\t}\r\n\r\n\t\treturn checkNumberGroupingIsValid\r\n\t\t(\r\n\t\t\tnumber,\r\n\t\t\tcandidate,\r\n\t\t\tmetadata,\r\n   \t\tallNumberGroupsAreExactlyPresent\r\n\t\t)\r\n\t}\r\n}\r\n\r\nfunction containsOnlyValidXChars(number, candidate, metadata)\r\n{\r\n  // The characters 'x' and 'X' can be (1) a carrier code, in which case they always precede the\r\n  // national significant number or (2) an extension sign, in which case they always precede the\r\n  // extension number. We assume a carrier code is more than 1 digit, so the first case has to\r\n  // have more than 1 consecutive 'x' or 'X', whereas the second case can only have exactly 1 'x'\r\n  // or 'X'. We ignore the character if it appears as the last character of the string.\r\n  for (let index = 0; index < candidate.length - 1; index++)\r\n  {\r\n    const charAtIndex = candidate.charAt(index)\r\n\r\n    if (charAtIndex === 'x' || charAtIndex === 'X')\r\n    {\r\n      const charAtNextIndex = candidate.charAt(index + 1)\r\n\r\n      if (charAtNextIndex === 'x' || charAtNextIndex === 'X')\r\n      {\r\n        // This is the carrier code case, in which the 'X's always precede the national\r\n        // significant number.\r\n        index++\r\n        if (util.isNumberMatch(number, candidate.substring(index)) != MatchType.NSN_MATCH)\r\n        {\r\n          return false\r\n        }\r\n\t      // This is the extension sign case, in which the 'x' or 'X' should always precede the\r\n\t      // extension number.\r\n      }\r\n      else if (parseDigits(candidate.substring(index)) !== number.ext)\r\n      {\r\n        return false\r\n      }\r\n    }\r\n  }\r\n\r\n  return true\r\n}\r\n\r\nfunction isNationalPrefixPresentIfRequired(number, _metadata)\r\n{\r\n  // First, check how we deduced the country code. If it was written in international format, then\r\n  // the national prefix is not required.\r\n  if (number.getCountryCodeSource() != 'FROM_DEFAULT_COUNTRY')\r\n  {\r\n    return true\r\n  }\r\n\r\n  const phoneNumberRegion = util.getRegionCodeForCountryCode(number.getCountryCode())\r\n\r\n  const metadata = util.getMetadataForRegion(phoneNumberRegion)\r\n  if (metadata == null)\r\n  {\r\n    return true\r\n  }\r\n\r\n  // Check if a national prefix should be present when formatting this number.\r\n  const nationalNumber = util.getNationalSignificantNumber(number)\r\n  const formatRule = util.chooseFormattingPatternForNumber(metadata.numberFormats(), nationalNumber)\r\n\r\n  // To do this, we check that a national prefix formatting rule was present\r\n  // and that it wasn't just the first-group symbol ($1) with punctuation.\r\n  if (formatRule && formatRule.getNationalPrefixFormattingRule().length > 0)\r\n  {\r\n    if (formatRule.getNationalPrefixOptionalWhenFormatting())\r\n    {\r\n      // The national-prefix is optional in these cases, so we don't need to check if it was\r\n      // present.\r\n      return true\r\n    }\r\n\r\n    if (PhoneNumberUtil.formattingRuleHasFirstGroupOnly(\r\n        formatRule.getNationalPrefixFormattingRule()))\r\n    {\r\n      // National Prefix not needed for this number.\r\n      return true\r\n    }\r\n\r\n    // Normalize the remainder.\r\n    const rawInputCopy = PhoneNumberUtil.normalizeDigitsOnly(number.getRawInput())\r\n\r\n    // Check if we found a national prefix and/or carrier code at the start of the raw input, and\r\n    // return the result.\r\n    return util.maybeStripNationalPrefixAndCarrierCode(rawInputCopy, metadata, null)\r\n  }\r\n\r\n  return true\r\n}\r\n\r\nexport function containsMoreThanOneSlashInNationalNumber(number, candidate)\r\n{\r\n  const firstSlashInBodyIndex = candidate.indexOf('/')\r\n  if (firstSlashInBodyIndex < 0)\r\n  {\r\n    // No slashes, this is okay.\r\n    return false\r\n  }\r\n\r\n  // Now look for a second one.\r\n  const secondSlashInBodyIndex = candidate.indexOf('/', firstSlashInBodyIndex + 1)\r\n  if (secondSlashInBodyIndex < 0)\r\n  {\r\n    // Only one slash, this is okay.\r\n    return false\r\n  }\r\n\r\n  // If the first slash is after the country calling code, this is permitted.\r\n  const candidateHasCountryCode =\r\n      (number.getCountryCodeSource() === CountryCodeSource.FROM_NUMBER_WITH_PLUS_SIGN\r\n       || number.getCountryCodeSource() === CountryCodeSource.FROM_NUMBER_WITHOUT_PLUS_SIGN)\r\n\r\n  if (candidateHasCountryCode\r\n      && PhoneNumberUtil.normalizeDigitsOnly(candidate.substring(0, firstSlashInBodyIndex))\r\n          === String(number.getCountryCode()))\r\n  {\r\n    // Any more slashes and this is illegal.\r\n    return candidate.slice(secondSlashInBodyIndex + 1).indexOf('/') >= 0\r\n  }\r\n\r\n  return true\r\n}\r\n\r\nfunction checkNumberGroupingIsValid\r\n(\r\n  number,\r\n  candidate,\r\n  metadata,\r\n  checkGroups\r\n)\r\n{\r\n  // TODO: Evaluate how this works for other locales (testing has been limited to NANPA regions)\r\n  // and optimise if necessary.\r\n  const normalizedCandidate = normalizeDigits(candidate, true /* keep non-digits */)\r\n  let formattedNumberGroups = getNationalNumberGroups(metadata, number, null)\r\n  if (checkGroups(metadata, number, normalizedCandidate, formattedNumberGroups))\r\n  {\r\n    return true\r\n  }\r\n\r\n  // If this didn't pass, see if there are any alternate formats, and try them instead.\r\n  const alternateFormats = MetadataManager.getAlternateFormatsForCountry(number.getCountryCode())\r\n\r\n  if (alternateFormats)\r\n  {\r\n    for (const alternateFormat of alternateFormats.numberFormats())\r\n    {\r\n      formattedNumberGroups = getNationalNumberGroups(metadata, number, alternateFormat)\r\n\r\n      if (checkGroups(metadata, number, normalizedCandidate, formattedNumberGroups)) {\r\n        return true\r\n      }\r\n    }\r\n  }\r\n\r\n  return false\r\n}\r\n\r\n/**\r\n * Helper method to get the national-number part of a number, formatted without any national\r\n * prefix, and return it as a set of digit blocks that would be formatted together.\r\n */\r\nfunction getNationalNumberGroups\r\n(\r\n\tmetadata,\r\n\tnumber,\r\n\tformattingPattern\r\n)\r\n{\r\n  if (formattingPattern)\r\n  {\r\n    // We format the NSN only, and split that according to the separator.\r\n    const nationalSignificantNumber = util.getNationalSignificantNumber(number)\r\n    return util.formatNsnUsingPattern(nationalSignificantNumber,\r\n                                      formattingPattern, 'RFC3966', metadata).split('-')\r\n\t}\r\n\r\n  // This will be in the format +CC-DG;ext=EXT where DG represents groups of digits.\r\n  const rfc3966Format = formatNumber(number, 'RFC3966', metadata)\r\n\r\n  // We remove the extension part from the formatted string before splitting it into different\r\n  // groups.\r\n  let endIndex = rfc3966Format.indexOf(';')\r\n  if (endIndex < 0) {\r\n    endIndex = rfc3966Format.length\r\n  }\r\n\r\n  // The country-code will have a '-' following it.\r\n  const startIndex = rfc3966Format.indexOf('-') + 1\r\n  return rfc3966Format.slice(startIndex, endIndex).split('-')\r\n}\r\n\r\nfunction allNumberGroupsAreExactlyPresent\r\n(\r\n\tmetadata,\r\n\tnumber,\r\n\tnormalizedCandidate,\r\n\tformattedNumberGroups\r\n)\r\n{\r\n  const candidateGroups = normalizedCandidate.split(NON_DIGITS_PATTERN)\r\n\r\n  // Set this to the last group, skipping it if the number has an extension.\r\n  let candidateNumberGroupIndex =\r\n      number.hasExtension() ? candidateGroups.length - 2 : candidateGroups.length - 1\r\n\r\n  // First we check if the national significant number is formatted as a block.\r\n  // We use contains and not equals, since the national significant number may be present with\r\n  // a prefix such as a national number prefix, or the country code itself.\r\n  if (candidateGroups.length == 1\r\n      || candidateGroups[candidateNumberGroupIndex].contains(\r\n          util.getNationalSignificantNumber(number)))\r\n  {\r\n    return true\r\n  }\r\n\r\n  // Starting from the end, go through in reverse, excluding the first group, and check the\r\n  // candidate and number groups are the same.\r\n  let formattedNumberGroupIndex = (formattedNumberGroups.length - 1)\r\n  while (formattedNumberGroupIndex > 0 && candidateNumberGroupIndex >= 0)\r\n  {\r\n    if (candidateGroups[candidateNumberGroupIndex] !== formattedNumberGroups[formattedNumberGroupIndex])\r\n    {\r\n      return false\r\n    }\r\n    formattedNumberGroupIndex--\r\n    candidateNumberGroupIndex--\r\n  }\r\n\r\n  // Now check the first group. There may be a national prefix at the start, so we only check\r\n  // that the candidate group ends with the formatted number group.\r\n  return (candidateNumberGroupIndex >= 0\r\n      && endsWith(candidateGroups[candidateNumberGroupIndex], formattedNumberGroups[0]))\r\n}\r\n\r\n\r\nfunction allNumberGroupsRemainGrouped\r\n(\r\n\tmetadata,\r\n\tnumber,\r\n\tnormalizedCandidate,\r\n\tformattedNumberGroups\r\n)\r\n{\r\n  let fromIndex = 0\r\n  if (number.getCountryCodeSource() !== CountryCodeSource.FROM_DEFAULT_COUNTRY)\r\n  {\r\n    // First skip the country code if the normalized candidate contained it.\r\n    const countryCode = String(number.getCountryCode())\r\n    fromIndex = normalizedCandidate.indexOf(countryCode) + countryCode.length()\r\n  }\r\n\r\n  // Check each group of consecutive digits are not broken into separate groupings in the\r\n  // {@code normalizedCandidate} string.\r\n  for (let i = 0; i < formattedNumberGroups.length; i++)\r\n  {\r\n    // Fails if the substring of {@code normalizedCandidate} starting from {@code fromIndex}\r\n    // doesn't contain the consecutive digits in formattedNumberGroups[i].\r\n    fromIndex = normalizedCandidate.indexOf(formattedNumberGroups[i], fromIndex)\r\n    if (fromIndex < 0) {\r\n      return false\r\n    }\r\n    // Moves {@code fromIndex} forward.\r\n    fromIndex += formattedNumberGroups[i].length()\r\n    if (i == 0 && fromIndex < normalizedCandidate.length())\r\n    {\r\n      // We are at the position right after the NDC. We get the region used for formatting\r\n      // information based on the country code in the phone number, rather than the number itself,\r\n      // as we do not need to distinguish between different countries with the same country\r\n      // calling code and this is faster.\r\n      const region = util.getRegionCodeForCountryCode(number.getCountryCode())\r\n      if (util.getNddPrefixForRegion(region, true) != null\r\n          && Character.isDigit(normalizedCandidate.charAt(fromIndex))) {\r\n        // This means there is no formatting symbol after the NDC. In this case, we only\r\n        // accept the number if there is no formatting symbol at all in the number, except\r\n        // for extensions. This is only important for countries with national prefixes.\r\n        const nationalSignificantNumber = util.getNationalSignificantNumber(number)\r\n        return startsWith\r\n        (\r\n      \t  normalizedCandidate.slice(fromIndex - formattedNumberGroups[i].length),\r\n           nationalSignificantNumber\r\n        )\r\n      }\r\n    }\r\n  }\r\n\r\n  // The check here makes sure that we haven't mistakenly already used the extension to\r\n  // match the last group of the subscriber number. Note the extension cannot have\r\n  // formatting in-between digits.\r\n  return normalizedCandidate.slice(fromIndex).contains(number.getExtension())\r\n}","/**\r\n * A port of Google's `PhoneNumberMatcher.java`.\r\n * https://github.com/googlei18n/libphonenumber/blob/master/java/libphonenumber/src/com/google/i18n/phonenumbers/PhoneNumberMatcher.java\r\n * Date: 08.03.2018.\r\n */\r\n\r\nimport PhoneNumber from './PhoneNumber'\r\n\r\nimport {\r\n  MAX_LENGTH_FOR_NSN,\r\n  MAX_LENGTH_COUNTRY_CODE,\r\n  VALID_PUNCTUATION\r\n} from './constants'\r\n\r\nimport { EXTN_PATTERNS_FOR_MATCHING } from './extension'\r\n\r\nimport {\r\n\tlimit,\r\n\ttrimAfterFirstMatch\r\n} from './findNumbers/util'\r\n\r\nimport {\r\n\t_pL,\r\n\t_pN,\r\n\tpZ,\r\n\tPZ,\r\n\tpNd\r\n} from './findNumbers/utf-8'\r\n\r\nimport Leniency from './findNumbers/Leniency'\r\nimport parsePreCandidate from './findNumbers/parsePreCandidate'\r\nimport isValidPreCandidate from './findNumbers/isValidPreCandidate'\r\nimport isValidCandidate, { LEAD_CLASS } from './findNumbers/isValidCandidate'\r\n\r\nimport { isSupportedCountry } from './metadata'\r\n\r\nimport parseNumber from './parse_'\r\n\r\n/**\r\n * Patterns used to extract phone numbers from a larger phone-number-like pattern. These are\r\n * ordered according to specificity. For example, white-space is last since that is frequently\r\n * used in numbers, not just to separate two numbers. We have separate patterns since we don't\r\n * want to break up the phone-number-like text on more than one different kind of symbol at one\r\n * time, although symbols of the same type (e.g. space) can be safely grouped together.\r\n *\r\n * Note that if there is a match, we will always check any text found up to the first match as\r\n * well.\r\n */\r\nconst INNER_MATCHES =\r\n[\r\n\t// Breaks on the slash - e.g. \"651-234-2345/332-445-1234\"\r\n\t'\\\\/+(.*)/',\r\n\r\n\t// Note that the bracket here is inside the capturing group, since we consider it part of the\r\n\t// phone number. Will match a pattern like \"(650) 223 3345 (754) 223 3321\".\r\n\t'(\\\\([^(]*)',\r\n\r\n\t// Breaks on a hyphen - e.g. \"12345 - 332-445-1234 is my number.\"\r\n\t// We require a space on either side of the hyphen for it to be considered a separator.\r\n\t`(?:${pZ}-|-${pZ})${pZ}*(.+)`,\r\n\r\n\t// Various types of wide hyphens. Note we have decided not to enforce a space here, since it's\r\n\t// possible that it's supposed to be used to break two numbers without spaces, and we haven't\r\n\t// seen many instances of it used within a number.\r\n\t`[\\u2012-\\u2015\\uFF0D]${pZ}*(.+)`,\r\n\r\n\t// Breaks on a full stop - e.g. \"12345. 332-445-1234 is my number.\"\r\n\t`\\\\.+${pZ}*([^.]+)`,\r\n\r\n\t// Breaks on space - e.g. \"3324451234 8002341234\"\r\n\t`${pZ}+(${PZ}+)`\r\n]\r\n\r\n// Limit on the number of leading (plus) characters.\r\nconst leadLimit = limit(0, 2)\r\n\r\n// Limit on the number of consecutive punctuation characters.\r\nconst punctuationLimit = limit(0, 4)\r\n\r\n/* The maximum number of digits allowed in a digit-separated block. As we allow all digits in a\r\n * single block, set high enough to accommodate the entire national number and the international\r\n * country code. */\r\nconst digitBlockLimit = MAX_LENGTH_FOR_NSN + MAX_LENGTH_COUNTRY_CODE\r\n\r\n// Limit on the number of blocks separated by punctuation.\r\n// Uses digitBlockLimit since some formats use spaces to separate each digit.\r\nconst blockLimit = limit(0, digitBlockLimit)\r\n\r\n/* A punctuation sequence allowing white space. */\r\nconst punctuation = `[${VALID_PUNCTUATION}]` + punctuationLimit\r\n\r\n// A digits block without punctuation.\r\nconst digitSequence = pNd + limit(1, digitBlockLimit)\r\n\r\n/**\r\n * Phone number pattern allowing optional punctuation.\r\n * The phone number pattern used by `find()`, similar to\r\n * VALID_PHONE_NUMBER, but with the following differences:\r\n * <ul>\r\n *   <li>All captures are limited in order to place an upper bound to the text matched by the\r\n *       pattern.\r\n * <ul>\r\n *   <li>Leading punctuation / plus signs are limited.\r\n *   <li>Consecutive occurrences of punctuation are limited.\r\n *   <li>Number of digits is limited.\r\n * </ul>\r\n *   <li>No whitespace is allowed at the start or end.\r\n *   <li>No alpha digits (vanity numbers such as 1-800-SIX-FLAGS) are currently supported.\r\n * </ul>\r\n */\r\nconst PATTERN = '(?:' + LEAD_CLASS + punctuation + ')' + leadLimit\r\n\t+ digitSequence + '(?:' + punctuation + digitSequence + ')' + blockLimit\r\n\t+ '(?:' + EXTN_PATTERNS_FOR_MATCHING + ')?'\r\n\r\n// Regular expression of trailing characters that we want to remove.\r\n// We remove all characters that are not alpha or numerical characters.\r\n// The hash character is retained here, as it may signify\r\n// the previous block was an extension.\r\n//\r\n// // Don't know what does '&&' mean here.\r\n// const UNWANTED_END_CHAR_PATTERN = new RegExp(`[[\\\\P{N}&&\\\\P{L}]&&[^#]]+$`)\r\n//\r\nconst UNWANTED_END_CHAR_PATTERN = new RegExp(`[^${_pN}${_pL}#]+$`)\r\n\r\nconst NON_DIGITS_PATTERN = /(\\D+)/\r\n\r\nconst MAX_SAFE_INTEGER = Number.MAX_SAFE_INTEGER || Math.pow(2, 53) - 1\r\n\r\n/**\r\n * A stateful class that finds and extracts telephone numbers from {@linkplain CharSequence text}.\r\n * Instances can be created using the {@linkplain PhoneNumberUtil#findNumbers factory methods} in\r\n * {@link PhoneNumberUtil}.\r\n *\r\n * <p>Vanity numbers (phone numbers using alphabetic digits such as <tt>1-800-SIX-FLAGS</tt> are\r\n * not found.\r\n *\r\n * <p>This class is not thread-safe.\r\n */\r\nexport default class PhoneNumberMatcher\r\n{\r\n  /** The iteration tristate. */\r\n  state = 'NOT_READY'\r\n\r\n  /** The next index to start searching at. Undefined in {@link State#DONE}. */\r\n  searchIndex = 0\r\n\r\n  /**\r\n   * Creates a new instance. See the factory methods in {@link PhoneNumberUtil} on how to obtain a\r\n   * new instance.\r\n   *\r\n   * @param util  the phone number util to use\r\n   * @param text  the character sequence that we will search, null for no text\r\n   * @param country  the country to assume for phone numbers not written in international format\r\n   *     (with a leading plus, or with the international dialing prefix of the specified region).\r\n   *     May be null or \"ZZ\" if only numbers with a leading plus should be\r\n   *     considered.\r\n   * @param leniency  the leniency to use when evaluating candidate phone numbers\r\n   * @param maxTries  the maximum number of invalid numbers to try before giving up on the text.\r\n   *     This is to cover degenerate cases where the text has a lot of false positives in it. Must\r\n   *     be {@code >= 0}.\r\n   */\r\n  constructor(text = '', options = {}, metadata)\r\n  {\r\n    options = {\r\n      ...options,\r\n      defaultCountry : options.defaultCountry && isSupportedCountry(options.defaultCountry, metadata) ? options.defaultCountry : undefined,\r\n      leniency : options.leniency || options.extended ? 'POSSIBLE' : 'VALID',\r\n      maxTries : options.maxTries || MAX_SAFE_INTEGER\r\n    }\r\n\r\n\t\tif (!options.leniency) {\r\n\t\t\tthrow new TypeError('`Leniency` not supplied')\r\n\t\t}\r\n\r\n\t\tif (options.maxTries < 0) {\r\n\t\t\tthrow new TypeError('`maxTries` not supplied')\r\n\t\t}\r\n\r\n\t\tthis.text = text\r\n\t\tthis.options = options\r\n    this.metadata = metadata\r\n\r\n\t\t/** The degree of validation requested. */\r\n\t\tthis.leniency = Leniency[options.leniency]\r\n\r\n\t\tif (!this.leniency)\r\n\t\t{\r\n\t\t\tthrow new TypeError(`Unknown leniency: ${options.leniency}.`)\r\n\t\t}\r\n\r\n\t\t/** The maximum number of retries after matching an invalid number. */\r\n\t\tthis.maxTries = options.maxTries\r\n\r\n\t\tthis.PATTERN = new RegExp(PATTERN, 'ig')\r\n  }\r\n\r\n  /**\r\n   * Attempts to find the next subsequence in the searched sequence on or after {@code searchIndex}\r\n   * that represents a phone number. Returns the next match, null if none was found.\r\n   *\r\n   * @param index  the search index to start searching at\r\n   * @return  the phone number match found, null if none can be found\r\n   */\r\n\tfind() // (index)\r\n\t{\r\n\t\t// // Reset the regular expression.\r\n\t\t// this.PATTERN.lastIndex = index\r\n\r\n\t\tlet matches\r\n\t\twhile ((this.maxTries > 0) && (matches = this.PATTERN.exec(this.text)) !== null)\r\n\t\t{\r\n\t\t\tlet candidate = matches[0]\r\n\t\t\tconst offset = matches.index\r\n\r\n\t\t\tcandidate = parsePreCandidate(candidate)\r\n\r\n\t\t\tif (isValidPreCandidate(candidate, offset, this.text))\r\n\t\t\t{\r\n\t\t\t\tconst match =\r\n\t\t\t\t\t// Try to come up with a valid match given the entire candidate.\r\n\t\t\t\t\tthis.parseAndVerify(candidate, offset, this.text)\r\n\t\t\t\t\t// If that failed, try to find an \"inner match\" -\r\n\t\t\t\t\t// there might be a phone number within this candidate.\r\n\t\t\t\t\t|| this.extractInnerMatch(candidate, offset, this.text)\r\n\r\n\t\t\t\tif (match) {\r\n\t\t\t\t\tif (this.options.v2) {\r\n\t\t\t\t\t\tconst phoneNumber = new PhoneNumber(match.country, match.phone, this.metadata)\r\n\t\t\t\t\t\tif (match.ext) {\r\n\t\t\t\t\t\t\tphoneNumber.ext = match.ext\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\tstartsAt: match.startsAt,\r\n\t\t\t\t\t\t\tendsAt: match.endsAt,\r\n\t\t\t\t\t\t\tnumber: phoneNumber\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn match\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tthis.maxTries--\r\n\t\t}\r\n\t}\r\n\r\n  /**\r\n   * Attempts to extract a match from `candidate`\r\n   * if the whole candidate does not qualify as a match.\r\n   */\r\n  extractInnerMatch(candidate, offset, text)\r\n  {\r\n    for (const innerMatchPattern of INNER_MATCHES)\r\n    {\r\n      let isFirstMatch = true\r\n      let matches\r\n      const possibleInnerMatch = new RegExp(innerMatchPattern, 'g')\r\n      while ((matches = possibleInnerMatch.exec(candidate)) !== null && this.maxTries > 0)\r\n      {\r\n        if (isFirstMatch)\r\n        {\r\n          // We should handle any group before this one too.\r\n          const group = trimAfterFirstMatch\r\n          (\r\n            UNWANTED_END_CHAR_PATTERN,\r\n            candidate.slice(0, matches.index)\r\n          )\r\n\r\n          const match = this.parseAndVerify(group, offset, text)\r\n          if (match) {\r\n            return match\r\n          }\r\n\r\n          this.maxTries--\r\n          isFirstMatch = false\r\n        }\r\n\r\n        const group = trimAfterFirstMatch\r\n        (\r\n        \tUNWANTED_END_CHAR_PATTERN,\r\n        \tmatches[1]\r\n        )\r\n\r\n        // Java code does `groupMatcher.start(1)` here,\r\n        // but there's no way in javascript to get a group match start index,\r\n        // therefore using the overall match start index `matches.index`.\r\n        const match = this.parseAndVerify(group, offset + matches.index, text)\r\n        if (match) {\r\n          return match\r\n        }\r\n\r\n        this.maxTries--\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Parses a phone number from the `candidate` using `parseNumber` and\r\n   * verifies it matches the requested `leniency`. If parsing and verification succeed,\r\n   * a corresponding `PhoneNumberMatch` is returned, otherwise this method returns `null`.\r\n   *\r\n   * @param candidate  the candidate match\r\n   * @param offset  the offset of {@code candidate} within {@link #text}\r\n   * @return  the parsed and validated phone number match, or null\r\n   */\r\n  parseAndVerify(candidate, offset, text)\r\n  {\r\n    if (!isValidCandidate(candidate, offset, text, this.options.leniency)) {\r\n      return\r\n  \t}\r\n\r\n    const number = parseNumber(\r\n      candidate, {\r\n        extended: true,\r\n        defaultCountry: this.options.defaultCountry\r\n      },\r\n      this.metadata\r\n    )\r\n\r\n    if (!number.possible) {\r\n      return\r\n    }\r\n\r\n    if (this.leniency(number, candidate, this.metadata))\r\n    {\r\n      // // We used parseAndKeepRawInput to create this number,\r\n      // // but for now we don't return the extra values parsed.\r\n      // // TODO: stop clearing all values here and switch all users over\r\n      // // to using rawInput() rather than the rawString() of PhoneNumberMatch.\r\n      // number.clearCountryCodeSource()\r\n      // number.clearRawInput()\r\n      // number.clearPreferredDomesticCarrierCode()\r\n\r\n      const result = {\r\n        startsAt : offset,\r\n        endsAt   : offset + candidate.length,\r\n        country  : number.country,\r\n        phone    : number.phone\r\n      }\r\n\r\n      if (number.ext) {\r\n        result.ext = number.ext\r\n      }\r\n\r\n      return result\r\n    }\r\n  }\r\n\r\n  hasNext()\r\n  {\r\n    if (this.state === 'NOT_READY')\r\n    {\r\n      this.lastMatch = this.find() // (this.searchIndex)\r\n\r\n      if (this.lastMatch)\r\n      {\r\n        // this.searchIndex = this.lastMatch.endsAt\r\n        this.state = 'READY'\r\n      }\r\n      else\r\n      {\r\n        this.state = 'DONE'\r\n      }\r\n    }\r\n\r\n    return this.state === 'READY'\r\n  }\r\n\r\n  next()\r\n  {\r\n    // Check the state and find the next match as a side-effect if necessary.\r\n    if (!this.hasNext())\r\n    {\r\n      throw new Error('No next element')\r\n    }\r\n\r\n    // Don't retain that memory any longer than necessary.\r\n    const result = this.lastMatch\r\n    this.lastMatch = null\r\n    this.state = 'NOT_READY'\r\n    return result\r\n  }\r\n}","// This is an enhanced port of Google Android `libphonenumber`'s\r\n// `asyoutypeformatter.js` of December 31th, 2018.\r\n//\r\n// https://github.com/googlei18n/libphonenumber/blob/8d21a365061de2ba0675c878a710a7b24f74d2ae/javascript/i18n/phonenumbers/asyoutypeformatter.js\r\n//\r\n// Simplified: does not differentiate between \"local-only\" numbers\r\n// and \"internationally dialable\" numbers.\r\n// For example, doesn't include changes like this:\r\n// https://github.com/googlei18n/libphonenumber/commit/865da605da12b01053c4f053310bac7c5fbb7935\r\n\r\nimport Metadata from './metadata'\r\n\r\nimport PhoneNumber from './PhoneNumber'\r\n\r\nimport {\r\n\tVALID_DIGITS,\r\n\tVALID_PUNCTUATION,\r\n\tPLUS_CHARS\r\n} from './constants'\r\n\r\nimport { matchesEntirely } from './util'\r\n\r\nimport {\r\n\textractCountryCallingCode,\r\n\textract_formatted_phone_number,\r\n\tfind_country_code,\r\n\tstrip_national_prefix_and_carrier_code\r\n} from './parse_'\r\n\r\nimport {\r\n\tFIRST_GROUP_PATTERN,\r\n\tformat_national_number_using_format,\r\n\tchangeInternationalFormatStyle\r\n} from './format_'\r\n\r\nimport { checkNumberLengthForType } from './getNumberType_'\r\n\r\nimport parseIncompletePhoneNumber from './parseIncompletePhoneNumber'\r\n\r\n// Used in phone number format template creation.\r\n// Could be any digit, I guess.\r\nconst DUMMY_DIGIT = '9'\r\n// I don't know why is it exactly `15`\r\nconst LONGEST_NATIONAL_PHONE_NUMBER_LENGTH = 15\r\n// Create a phone number consisting only of the digit 9 that matches the\r\n// `number_pattern` by applying the pattern to the \"longest phone number\" string.\r\nconst LONGEST_DUMMY_PHONE_NUMBER = repeat(DUMMY_DIGIT, LONGEST_NATIONAL_PHONE_NUMBER_LENGTH)\r\n\r\n// The digits that have not been entered yet will be represented by a \\u2008,\r\n// the punctuation space.\r\nexport const DIGIT_PLACEHOLDER = 'x' // '\\u2008' (punctuation space)\r\nconst DIGIT_PLACEHOLDER_MATCHER = new RegExp(DIGIT_PLACEHOLDER)\r\n\r\n// Deprecated: Google has removed some formatting pattern related code from their repo.\r\n// https://github.com/googlei18n/libphonenumber/commit/a395b4fef3caf57c4bc5f082e1152a4d2bd0ba4c\r\n// Because this library supports generating custom metadata\r\n// some users may still be using old metadata so the relevant\r\n// code seems to stay until some next major version update.\r\nconst SUPPORT_LEGACY_FORMATTING_PATTERNS = true\r\n\r\n// A pattern that is used to match character classes in regular expressions.\r\n// An example of a character class is \"[1-4]\".\r\nconst CREATE_CHARACTER_CLASS_PATTERN = SUPPORT_LEGACY_FORMATTING_PATTERNS && (() => /\\[([^\\[\\]])*\\]/g)\r\n\r\n// Any digit in a regular expression that actually denotes a digit. For\r\n// example, in the regular expression \"80[0-2]\\d{6,10}\", the first 2 digits\r\n// (8 and 0) are standalone digits, but the rest are not.\r\n// Two look-aheads are needed because the number following \\\\d could be a\r\n// two-digit number, since the phone number can be as long as 15 digits.\r\nconst CREATE_STANDALONE_DIGIT_PATTERN = SUPPORT_LEGACY_FORMATTING_PATTERNS && (() => /\\d(?=[^,}][^,}])/g)\r\n\r\n// A pattern that is used to determine if a `format` is eligible\r\n// to be used by the \"as you type formatter\".\r\n// It is eligible when the `format` contains groups of the dollar sign\r\n// followed by a single digit, separated by valid phone number punctuation.\r\n// This prevents invalid punctuation (such as the star sign in Israeli star numbers)\r\n// getting into the output of the \"as you type formatter\".\r\nconst ELIGIBLE_FORMAT_PATTERN = new RegExp\r\n(\r\n\t'^' +\r\n\t'[' + VALID_PUNCTUATION + ']*' +\r\n\t'(\\\\$\\\\d[' + VALID_PUNCTUATION + ']*)+' +\r\n\t'$'\r\n)\r\n\r\n// This is the minimum length of the leading digits of a phone number\r\n// to guarantee the first \"leading digits pattern\" for a phone number format\r\n// to be preemptive.\r\nconst MIN_LEADING_DIGITS_LENGTH = 3\r\n\r\nconst VALID_INCOMPLETE_PHONE_NUMBER =\r\n\t'[' + PLUS_CHARS + ']{0,1}' +\r\n\t'[' +\r\n\t\tVALID_PUNCTUATION +\r\n\t\tVALID_DIGITS +\r\n\t']*'\r\n\r\nconst VALID_INCOMPLETE_PHONE_NUMBER_PATTERN = new RegExp('^' + VALID_INCOMPLETE_PHONE_NUMBER + '$', 'i')\r\n\r\nexport default class AsYouType\r\n{\r\n\t// Not setting `options` to a constructor argument\r\n\t// not to break backwards compatibility\r\n\t// for older versions of the library.\r\n\toptions = {}\r\n\r\n\t/**\r\n\t * @param {string?} [defaultCountry] - The default country used for parsing non-international phone numbers.\r\n\t * @param {Object} metadata\r\n\t */\r\n\tconstructor(defaultCountry, metadata)\r\n\t{\r\n\t\tthis.metadata = new Metadata(metadata)\r\n\r\n\t\tif (defaultCountry && this.metadata.hasCountry(defaultCountry)) {\r\n\t\t\tthis.defaultCountry = defaultCountry\r\n\t\t}\r\n\r\n\t\tthis.reset()\r\n\t}\r\n\r\n\tinput(text)\r\n\t{\r\n\t\t// Parse input\r\n\r\n\t\tlet extracted_number = extract_formatted_phone_number(text) || ''\r\n\r\n\t\t// Special case for a lone '+' sign\r\n\t\t// since it's not considered a possible phone number.\r\n\t\tif (!extracted_number)\r\n\t\t{\r\n\t\t\tif (text && text.indexOf('+') >= 0)\r\n\t\t\t{\r\n\t\t\t\textracted_number = '+'\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Validate possible first part of a phone number\r\n\t\tif (!VALID_INCOMPLETE_PHONE_NUMBER_PATTERN.test(extracted_number))\r\n\t\t{\r\n\t\t\treturn this.currentOutput\r\n\t\t}\r\n\r\n\t\treturn this.processInput(parseIncompletePhoneNumber(extracted_number))\r\n\t}\r\n\r\n\tprocessInput(input)\r\n\t{\r\n\t\t// If an out of position '+' sign detected\r\n\t\t// (or a second '+' sign),\r\n\t\t// then just drop it from the input.\r\n\t\tif (input[0] === '+')\r\n\t\t{\r\n\t\t\tif (!this.parsedInput)\r\n\t\t\t{\r\n\t\t\t\tthis.parsedInput += '+'\r\n\r\n\t\t\t\t// If a default country was set\r\n\t\t\t\t// then reset it because an explicitly international\r\n\t\t\t\t// phone number is being entered\r\n\t\t\t\tthis.resetCountriness()\r\n\t\t\t}\r\n\r\n\t\t\tinput = input.slice(1)\r\n\t\t}\r\n\r\n\t\t// Raw phone number\r\n\t\tthis.parsedInput += input\r\n\r\n\t\t// // Reset phone number validation state\r\n\t\t// this.valid = false\r\n\r\n\t\t// Add digits to the national number\r\n\t\tthis.nationalNumber += input\r\n\r\n\t\t// TODO: Deprecated: rename `this.nationalNumber`\r\n\t\t// to `this.nationalNumber` and remove `.getNationalNumber()`.\r\n\r\n\t\t// Try to format the parsed input\r\n\r\n\t\tif (this.isInternational())\r\n\t\t{\r\n\t\t\tif (!this.countryCallingCode)\r\n\t\t\t{\r\n\t\t\t\t// Extract country calling code from the digits entered so far.\r\n\r\n\t\t\t\t// There must be some digits in order to extract anything from them.\r\n\t\t\t\tif (!this.nationalNumber)\r\n\t\t\t\t{\r\n\t\t\t\t\t// Return raw phone number\r\n\t\t\t\t\treturn this.parsedInput\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// If one looks at country phone codes\r\n\t\t\t\t// then he can notice that no one country phone code\r\n\t\t\t\t// is ever a (leftmost) substring of another country phone code.\r\n\t\t\t\t// So if a valid country code is extracted so far\r\n\t\t\t\t// then it means that this is the country code.\r\n\r\n\t\t\t\t// If no country phone code could be extracted so far,\r\n\t\t\t\t// then just return the raw phone number,\r\n\t\t\t\t// because it has no way of knowing\r\n\t\t\t\t// how to format the phone number so far.\r\n\t\t\t\tif (!this.extractCountryCallingCode())\r\n\t\t\t\t{\r\n\t\t\t\t\t// Return raw phone number\r\n\t\t\t\t\treturn this.parsedInput\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Initialize country-specific data\r\n\t\t\t\tthis.initialize_phone_number_formats_for_this_country_calling_code()\r\n\t\t\t\tthis.resetFormat()\r\n\t\t\t\tthis.determineTheCountry()\r\n\t\t\t}\r\n\t\t\t// `this.country` could be `undefined`,\r\n\t\t\t// for instance, when there is ambiguity\r\n\t\t\t// in a form of several different countries\r\n\t\t\t// each corresponding to the same country phone code\r\n\t\t\t// (e.g. NANPA: USA, Canada, etc),\r\n\t\t\t// and there's not enough digits entered\r\n\t\t\t// to reliably determine the country\r\n\t\t\t// the phone number belongs to.\r\n\t\t\t// Therefore, in cases of such ambiguity,\r\n\t\t\t// each time something is input,\r\n\t\t\t// try to determine the country\r\n\t\t\t// (if it's not determined yet).\r\n\t\t\telse if (!this.country)\r\n\t\t\t{\r\n\t\t\t\tthis.determineTheCountry()\r\n\t\t\t}\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\t// Some national prefixes are substrings of other national prefixes\r\n\t\t\t// (for the same country), therefore try to extract national prefix each time\r\n\t\t\t// because a longer national prefix might be available at some point in time.\r\n\r\n\t\t\tconst previous_national_prefix = this.nationalPrefix\r\n\t\t\tthis.nationalNumber = this.nationalPrefix + this.nationalNumber\r\n\r\n\t\t\t// Possibly extract a national prefix\r\n\t\t\tthis.extractNationalPrefix()\r\n\r\n\t\t\tif (this.nationalPrefix !== previous_national_prefix)\r\n\t\t\t{\r\n\t\t\t\t// National number has changed\r\n\t\t\t\t// (due to another national prefix been extracted)\r\n\t\t\t\t// therefore national number has changed\r\n\t\t\t\t// therefore reset all previous formatting data.\r\n\t\t\t\t// (and leading digits matching state)\r\n\t\t\t\tthis.matching_formats = undefined\r\n\t\t\t\tthis.resetFormat()\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// if (!this.shouldFormat())\r\n\t\t// {\r\n\t\t// \treturn this.format_as_non_formatted_number()\r\n\t\t// }\r\n\r\n\t\tif (!this.nationalNumber)\r\n\t\t{\r\n\t\t\treturn this.format_as_non_formatted_number()\r\n\t\t}\r\n\r\n\t\t// Check the available phone number formats\r\n\t\t// based on the currently available leading digits.\r\n\t\tthis.match_formats_by_leading_digits()\r\n\r\n\t\t// Format the phone number (given the next digits)\r\n\t\tconst formatted_national_phone_number = this.formatNationalNumber(input)\r\n\r\n\t\t// If the phone number could be formatted,\r\n\t\t// then return it, possibly prepending with country phone code\r\n\t\t// (for international phone numbers only)\r\n\t\tif (formatted_national_phone_number)\r\n\t\t{\r\n\t\t\treturn this.formatFullNumber(formatted_national_phone_number)\r\n\t\t}\r\n\r\n\t\t// If the phone number couldn't be formatted,\r\n\t\t// then just fall back to the raw phone number.\r\n\t\treturn this.format_as_non_formatted_number()\r\n\t}\r\n\r\n\tformat_as_non_formatted_number()\r\n\t{\r\n\t\t// Strip national prefix for incorrectly inputted international phones.\r\n\t\tif (this.isInternational() && this.countryCallingCode)\r\n\t\t{\r\n\t\t\treturn `+${this.countryCallingCode}${this.nationalNumber}`\r\n\t\t}\r\n\r\n\t\treturn this.parsedInput\r\n\t}\r\n\r\n\tformatNationalNumber(next_digits)\r\n\t{\r\n\t\t// Format the next phone number digits\r\n\t\t// using the previously chosen phone number format.\r\n\t\t//\r\n\t\t// This is done here because if `attempt_to_format_complete_phone_number`\r\n\t\t// was placed before this call then the `template`\r\n\t\t// wouldn't reflect the situation correctly (and would therefore be inconsistent)\r\n\t\t//\r\n\t\tlet national_number_formatted_with_previous_format\r\n\t\tif (this.chosenFormat)\r\n\t\t{\r\n\t\t\tnational_number_formatted_with_previous_format = this.formatNextNationalNumberDigits(next_digits)\r\n\t\t}\r\n\r\n\t\t// See if the input digits can be formatted properly already. If not,\r\n\t\t// use the results from formatNextNationalNumberDigits(), which does formatting\r\n\t\t// based on the formatting pattern chosen.\r\n\r\n\t\tconst formatted_number = this.attempt_to_format_complete_phone_number()\r\n\r\n\t\t// Just because a phone number doesn't have a suitable format\r\n\t\t// that doesn't mean that the phone is invalid\r\n\t\t// because phone number formats only format phone numbers,\r\n\t\t// they don't validate them and some (rare) phone numbers\r\n\t\t// are meant to stay non-formatted.\r\n\t\tif (formatted_number)\r\n\t\t{\r\n\t\t\treturn formatted_number\r\n\t\t}\r\n\r\n\t\t// For some phone number formats national prefix\r\n\r\n\t\t// If the previously chosen phone number format\r\n\t\t// didn't match the next (current) digit being input\r\n\t\t// (leading digits pattern didn't match).\r\n\t\tif (this.chooseAnotherFormat())\r\n\t\t{\r\n\t\t\t// And a more appropriate phone number format\r\n\t\t\t// has been chosen for these `leading digits`,\r\n\t\t\t// then format the national phone number (so far)\r\n\t\t\t// using the newly selected phone number pattern.\r\n\r\n\t\t\t// Will return `undefined` if it couldn't format\r\n\t\t\t// the supplied national number\r\n\t\t\t// using the selected phone number pattern.\r\n\r\n\t\t\treturn this.reformatNationalNumber()\r\n\t\t}\r\n\r\n\t\t// If could format the next (current) digit\r\n\t\t// using the previously chosen phone number format\r\n\t\t// then return the formatted number so far.\r\n\r\n\t\t// If no new phone number format could be chosen,\r\n\t\t// and couldn't format the supplied national number\r\n\t\t// using the selected phone number pattern,\r\n\t\t// then it will return `undefined`.\r\n\r\n\t\treturn national_number_formatted_with_previous_format\r\n\t}\r\n\r\n\treset()\r\n\t{\r\n\t\t// Input stripped of non-phone-number characters.\r\n\t\t// Can only contain a possible leading '+' sign and digits.\r\n\t\tthis.parsedInput = ''\r\n\r\n\t\tthis.currentOutput = ''\r\n\r\n\t\t// This contains the national prefix that has been extracted. It contains only\r\n\t\t// digits without formatting.\r\n\t\tthis.nationalPrefix = ''\r\n\r\n\t\tthis.nationalNumber = ''\r\n\t\tthis.carrierCode = ''\r\n\r\n\t\tthis.resetCountriness()\r\n\r\n\t\tthis.resetFormat()\r\n\r\n\t\treturn this\r\n\t}\r\n\r\n\tresetCountry()\r\n\t{\r\n\t\tif (this.isInternational()) {\r\n\t\t\tthis.country = undefined\r\n\t\t} else {\r\n\t\t\tthis.country = this.defaultCountry\r\n\t\t}\r\n\t}\r\n\r\n\tresetCountriness()\r\n\t{\r\n\t\tthis.resetCountry()\r\n\r\n\t\tif (this.defaultCountry && !this.isInternational())\r\n\t\t{\r\n\t\t\tthis.metadata.country(this.defaultCountry)\r\n\t\t\tthis.countryCallingCode = this.metadata.countryCallingCode()\r\n\r\n\t\t\tthis.initialize_phone_number_formats_for_this_country_calling_code()\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tthis.metadata.country(undefined)\r\n\t\t\tthis.countryCallingCode = undefined\r\n\r\n\t\t\t// \"Available formats\" are all formats available for the country.\r\n\t\t\t// \"Matching formats\" are only formats eligible for the national number being entered.\r\n\t\t\tthis.available_formats = []\r\n\t\t\tthis.matching_formats = undefined\r\n\t\t}\r\n\t}\r\n\r\n\tresetFormat()\r\n\t{\r\n\t\tthis.chosenFormat = undefined\r\n\t\tthis.template = undefined\r\n\t\tthis.partially_populated_template = undefined\r\n\t\tthis.last_match_position = -1\r\n\t}\r\n\r\n\t// Format each digit of national phone number (so far)\r\n\t// using the newly selected phone number pattern.\r\n\treformatNationalNumber()\r\n\t{\r\n\t\t// Format each digit of national phone number (so far)\r\n\t\t// using the selected phone number pattern.\r\n\t\treturn this.formatNextNationalNumberDigits(this.nationalNumber)\r\n\t}\r\n\r\n\tinitialize_phone_number_formats_for_this_country_calling_code()\r\n\t{\r\n\t\t// Get all \"eligible\" phone number formats for this country\r\n\t\tthis.available_formats = this.metadata.formats().filter((format) =>\r\n\t\t{\r\n\t\t\treturn ELIGIBLE_FORMAT_PATTERN.test(format.internationalFormat())\r\n\t\t})\r\n\r\n\t\tthis.matching_formats = undefined\r\n\t}\r\n\r\n\tmatch_formats_by_leading_digits()\r\n\t{\r\n\t\tconst leading_digits = this.nationalNumber\r\n\r\n\t\t// \"leading digits\" pattern list starts with a\r\n\t\t// \"leading digits\" pattern fitting a maximum of 3 leading digits.\r\n\t\t// So, after a user inputs 3 digits of a national (significant) phone number\r\n\t\t// this national (significant) number can already be formatted.\r\n\t\t// The next \"leading digits\" pattern is for 4 leading digits max,\r\n\t\t// and the \"leading digits\" pattern after it is for 5 leading digits max, etc.\r\n\r\n\t\t// This implementation is different from Google's\r\n\t\t// in that it searches for a fitting format\r\n\t\t// even if the user has entered less than\r\n\t\t// `MIN_LEADING_DIGITS_LENGTH` digits of a national number.\r\n\t\t// Because some leading digits patterns already match for a single first digit.\r\n\t\tlet index_of_leading_digits_pattern = leading_digits.length - MIN_LEADING_DIGITS_LENGTH\r\n\t\tif (index_of_leading_digits_pattern < 0) {\r\n\t\t\tindex_of_leading_digits_pattern = 0\r\n\t\t}\r\n\r\n\t\t// \"Available formats\" are all formats available for the country.\r\n\t\t// \"Matching formats\" are only formats eligible for the national number being entered.\r\n\r\n\t\t// If at least `MIN_LEADING_DIGITS_LENGTH` digits of a national number are available\r\n\t\t// then format matching starts narrowing down the list of possible formats\r\n\t\t// (only previously matched formats are considered for next digits).\r\n\t\tconst available_formats = this.had_enough_leading_digits && this.matching_formats || this.available_formats\r\n\t\tthis.had_enough_leading_digits = this.shouldFormat()\r\n\r\n\t\tthis.matching_formats = available_formats.filter((format) =>\r\n\t\t{\r\n\t\t\tconst leading_digits_patterns_count = format.leadingDigitsPatterns().length\r\n\r\n\t\t\t// If this format is not restricted to a certain\r\n\t\t\t// leading digits pattern then it fits.\r\n\t\t\tif (leading_digits_patterns_count === 0)\r\n\t\t\t{\r\n\t\t\t\treturn true\r\n\t\t\t}\r\n\r\n\t\t\tconst leading_digits_pattern_index = Math.min(index_of_leading_digits_pattern, leading_digits_patterns_count - 1)\r\n\t\t\tconst leading_digits_pattern = format.leadingDigitsPatterns()[leading_digits_pattern_index]\r\n\r\n\t\t\t// Brackets are required for `^` to be applied to\r\n\t\t\t// all or-ed (`|`) parts, not just the first one.\r\n\t\t\treturn new RegExp(`^(${leading_digits_pattern})`).test(leading_digits)\r\n\t\t})\r\n\r\n\t\t// If there was a phone number format chosen\r\n\t\t// and it no longer holds given the new leading digits then reset it.\r\n\t\t// The test for this `if` condition is marked as:\r\n\t\t// \"Reset a chosen format when it no longer holds given the new leading digits\".\r\n\t\t// To construct a valid test case for this one can find a country\r\n\t\t// in `PhoneNumberMetadata.xml` yielding one format for 3 `<leadingDigits>`\r\n\t\t// and yielding another format for 4 `<leadingDigits>` (Australia in this case).\r\n\t\tif (this.chosenFormat && this.matching_formats.indexOf(this.chosenFormat) === -1)\r\n\t\t{\r\n\t\t\tthis.resetFormat()\r\n\t\t}\r\n\t}\r\n\r\n\tshouldFormat()\r\n\t{\r\n\t\t// Start matching any formats at all when the national number\r\n\t\t// entered so far is at least 3 digits long,\r\n\t\t// otherwise format matching would give false negatives\r\n\t\t// like when the digits entered so far are `2`\r\n\t\t// and the leading digits pattern is `21` –\r\n\t\t// it's quite obvious in this case that the format could be the one\r\n\t\t// but due to the absence of further digits it would give false negative.\r\n\t\t//\r\n\t\t// Presumably the limitation of \"3 digits min\"\r\n\t\t// is imposed to exclude false matches,\r\n\t\t// e.g. when there are two different formats\r\n\t\t// each one fitting one or two leading digits being input.\r\n\t\t// But for this case I would propose a specific `if/else` condition.\r\n\t\t//\r\n\t\treturn this.nationalNumber.length >= MIN_LEADING_DIGITS_LENGTH\r\n\t}\r\n\r\n\t// Check to see if there is an exact pattern match for these digits. If so, we\r\n\t// should use this instead of any other formatting template whose\r\n\t// `leadingDigitsPattern` also matches the input.\r\n\tattempt_to_format_complete_phone_number()\r\n\t{\r\n\t\tfor (const format of this.matching_formats)\r\n\t\t{\r\n\t\t\tconst matcher = new RegExp(`^(?:${format.pattern()})$`)\r\n\r\n\t\t\tif (!matcher.test(this.nationalNumber))\r\n\t\t\t{\r\n\t\t\t\tcontinue\r\n\t\t\t}\r\n\r\n\t\t\tif (!this.isFormatApplicable(format))\r\n\t\t\t{\r\n\t\t\t\tcontinue\r\n\t\t\t}\r\n\r\n\t\t\t// To leave the formatter in a consistent state\r\n\t\t\tthis.resetFormat()\r\n\t\t\tthis.chosenFormat = format\r\n\r\n\t\t\tlet formatted_number = format_national_number_using_format\r\n\t\t\t(\r\n\t\t\t\tthis.nationalNumber,\r\n\t\t\t\tformat,\r\n\t\t\t\tthis.isInternational(),\r\n\t\t\t\tthis.nationalPrefix !== '',\r\n\t\t\t\tthis.metadata\r\n\t\t\t)\r\n\r\n\t\t\t// Special handling for NANPA countries for AsYouType formatter.\r\n\t\t\t// Copied from Google's `libphonenumber`:\r\n\t\t\t// https://github.com/googlei18n/libphonenumber/blob/66986dbbe443ee8450e2b54dcd44ac384b3bbee8/java/libphonenumber/src/com/google/i18n/phonenumbers/AsYouTypeFormatter.java#L535-L573\r\n\t\t\tif (this.nationalPrefix && this.countryCallingCode === '1') {\r\n\t\t\t\tformatted_number = '1 ' + formatted_number\r\n\t\t\t}\r\n\r\n\t\t\t// Set `this.template` and `this.partially_populated_template`.\r\n\t\t\t//\r\n\t\t\t// `else` case doesn't ever happen\r\n\t\t\t// with the current metadata,\r\n\t\t\t// but just in case.\r\n\t\t\t//\r\n\t\t\t/* istanbul ignore else */\r\n\t\t\tif (this.createFormattingTemplate(format))\r\n\t\t\t{\r\n\t\t\t\t// Populate `this.partially_populated_template`\r\n\t\t\t\tthis.reformatNationalNumber()\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\t// Prepend `+CountryCode` in case of an international phone number\r\n\t\t\t\tconst full_number = this.formatFullNumber(formatted_number)\r\n\t\t\t\tthis.template = full_number.replace(/[\\d\\+]/g, DIGIT_PLACEHOLDER)\r\n\t\t\t\tthis.partially_populated_template = full_number\r\n\t\t\t}\r\n\r\n\t\t\treturn formatted_number\r\n\t\t}\r\n\t}\r\n\r\n\t// Prepends `+CountryCode` in case of an international phone number\r\n\tformatFullNumber(formattedNationalNumber)\r\n\t{\r\n\t\tif (this.isInternational()) {\r\n\t\t\treturn `+${this.countryCallingCode} ${formattedNationalNumber}`\r\n\t\t}\r\n\t\treturn formattedNationalNumber\r\n\t}\r\n\r\n\t// Extracts the country calling code from the beginning\r\n\t// of the entered `national_number` (so far),\r\n\t// and places the remaining input into the `national_number`.\r\n\textractCountryCallingCode()\r\n\t{\r\n\t\tconst { countryCallingCode, number } = extractCountryCallingCode(this.parsedInput, this.defaultCountry, this.metadata.metadata)\r\n\r\n\t\tif (!countryCallingCode)\r\n\t\t{\r\n\t\t\treturn\r\n\t\t}\r\n\r\n\t\tthis.countryCallingCode = countryCallingCode\r\n\r\n\t\t// Sometimes people erroneously write national prefix\r\n\t\t// as part of an international number, e.g. +44 (0) ....\r\n\t\t// This violates the standards for international phone numbers,\r\n\t\t// so \"As You Type\" formatter assumes no national prefix\r\n\t\t// when parsing a phone number starting from `+`.\r\n\t\t// Even if it did attempt to filter-out that national prefix\r\n\t\t// it would look weird for a user trying to enter a digit\r\n\t\t// because from user's perspective the keyboard \"wouldn't be working\".\r\n\t\tthis.nationalNumber = number\r\n\r\n\t\tthis.metadata.chooseCountryByCountryCallingCode(countryCallingCode)\r\n\t\treturn this.metadata.selectedCountry() !== undefined\r\n\t}\r\n\r\n\textractNationalPrefix()\r\n\t{\r\n\t\tthis.nationalPrefix = ''\r\n\r\n\t\tif (!this.metadata.selectedCountry()) {\r\n\t\t\treturn\r\n\t\t}\r\n\r\n\t\t// Only strip national prefixes for non-international phone numbers\r\n\t\t// because national prefixes can't be present in international phone numbers.\r\n\t\t// While `parseNumber()` is forgiving is such cases, `AsYouType` is not.\r\n\t\tconst { number: potential_national_number, carrierCode } = strip_national_prefix_and_carrier_code(this.nationalNumber, this.metadata)\r\n\r\n\t\tif (carrierCode) {\r\n\t\t\tthis.carrierCode = carrierCode\r\n\t\t}\r\n\r\n\t\t// We require that the NSN remaining after stripping the national prefix and\r\n\t\t// carrier code be long enough to be a possible length for the region.\r\n\t\t// Otherwise, we don't do the stripping, since the original number could be\r\n\t\t// a valid short number.\r\n\t\tif (!this.metadata.possibleLengths() ||\r\n\t\t\tthis.isPossibleNumber(this.nationalNumber) &&\r\n\t\t\t!this.isPossibleNumber(potential_national_number))\r\n\t\t{\r\n\t\t\t// Verify the parsed national (significant) number for this country\r\n\t\t\t//\r\n\t\t\t// If the original number (before stripping national prefix) was viable,\r\n\t\t\t// and the resultant number is not, then prefer the original phone number.\r\n\t\t\t// This is because for some countries (e.g. Russia) the same digit could be both\r\n\t\t\t// a national prefix and a leading digit of a valid national phone number,\r\n\t\t\t// like `8` is the national prefix for Russia and both\r\n\t\t\t// `8 800 555 35 35` and `800 555 35 35` are valid numbers.\r\n\t\t\tif (matchesEntirely(this.nationalNumber, this.metadata.nationalNumberPattern()) &&\r\n\t\t\t\t!matchesEntirely(potential_national_number, this.metadata.nationalNumberPattern()))\r\n\t\t\t{\r\n\t\t\t\treturn\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.nationalPrefix = this.nationalNumber.slice(0, this.nationalNumber.length - potential_national_number.length)\r\n\t\tthis.nationalNumber = potential_national_number\r\n\r\n\t\treturn this.nationalPrefix\r\n\t}\r\n\r\n\tisPossibleNumber(number)\r\n\t{\r\n\t\tconst validation_result = checkNumberLengthForType(number, undefined, this.metadata)\r\n\t\tswitch (validation_result)\r\n\t\t{\r\n\t\t\tcase 'IS_POSSIBLE':\r\n\t\t\t\treturn true\r\n\t\t\t// case 'IS_POSSIBLE_LOCAL_ONLY':\r\n\t\t\t// \treturn !this.isInternational()\r\n\t\t\tdefault:\r\n\t\t\t\treturn false\r\n\t\t}\r\n\t}\r\n\r\n\tchooseAnotherFormat()\r\n\t{\r\n\t\t// When there are multiple available formats, the formatter uses the first\r\n\t\t// format where a formatting template could be created.\r\n\t\tfor (const format of this.matching_formats)\r\n\t\t{\r\n\t\t\t// If this format is currently being used\r\n\t\t\t// and is still possible, then stick to it.\r\n\t\t\tif (this.chosenFormat === format) {\r\n\t\t\t\treturn\r\n\t\t\t}\r\n\r\n\t\t\t// If this `format` is suitable for \"as you type\",\r\n\t\t\t// then extract the template from this format\r\n\t\t\t// and use it to format the phone number being input.\r\n\r\n\t\t\tif (!this.isFormatApplicable(format)) {\r\n\t\t\t\tcontinue\r\n\t\t\t}\r\n\r\n\t\t\tif (!this.createFormattingTemplate(format)) {\r\n\t\t\t\tcontinue\r\n\t\t\t}\r\n\r\n\t\t\tthis.chosenFormat = format\r\n\r\n\t\t\t// With a new formatting template, the matched position\r\n\t\t\t// using the old template needs to be reset.\r\n\t\t\tthis.last_match_position = -1\r\n\r\n\t\t\treturn true\r\n\t\t}\r\n\r\n\t\t// No format matches the phone number,\r\n\t\t// therefore set `country` to `undefined`\r\n\t\t// (or to the default country).\r\n\t\tthis.resetCountry()\r\n\r\n\t\t// No format matches the national phone number entered\r\n\t\tthis.resetFormat()\r\n\t}\r\n\r\n\tisFormatApplicable(format)\r\n\t{\r\n\t\t// If national prefix is mandatory for this phone number format\r\n\t\t// and the user didn't input the national prefix\r\n\t\t// then this phone number format isn't suitable.\r\n\t\tif (!this.isInternational() && !this.nationalPrefix && format.nationalPrefixIsMandatoryWhenFormatting()) {\r\n\t\t\treturn false\r\n\t\t}\r\n\t\t// If this format doesn't use national prefix\r\n\t\t// but the user did input national prefix\r\n\t\t// then this phone number format isn't suitable.\r\n\t\tif (this.nationalPrefix && !format.usesNationalPrefix() && !format.nationalPrefixIsOptionalWhenFormatting()) {\r\n\t\t\treturn false\r\n\t\t}\r\n\t\treturn true\r\n\t}\r\n\r\n\tcreateFormattingTemplate(format)\r\n\t{\r\n\t\t// The formatter doesn't format numbers when numberPattern contains '|', e.g.\r\n\t\t// (20|3)\\d{4}. In those cases we quickly return.\r\n\t\t// (Though there's no such format in current metadata)\r\n\t\t/* istanbul ignore if */\r\n\t\tif (SUPPORT_LEGACY_FORMATTING_PATTERNS && format.pattern().indexOf('|') >= 0) {\r\n\t\t\treturn\r\n\t\t}\r\n\r\n\t\t// Get formatting template for this phone number format\r\n\t\tconst template = this.getTemplateForNumberFormatPattern(format)\r\n\r\n\t\t// If the national number entered is too long\r\n\t\t// for any phone number format, then abort.\r\n\t\tif (!template) {\r\n\t\t\treturn\r\n\t\t}\r\n\r\n\t\t// This one is for national number only\r\n\t\tthis.partially_populated_template = template\r\n\r\n\t\t// For convenience, the public `.template` property\r\n\t\t// contains the whole international number\r\n\t\t// if the phone number being input is international:\r\n\t\t// 'x' for the '+' sign, 'x'es for the country phone code,\r\n\t\t// a spacebar and then the template for the formatted national number.\r\n\t\tif (this.isInternational()) {\r\n\t\t\tthis.template = DIGIT_PLACEHOLDER + repeat(DIGIT_PLACEHOLDER, this.countryCallingCode.length) + ' ' + template\r\n\t\t}\r\n\t\t// For local numbers, replace national prefix\r\n\t\t// with a digit placeholder.\r\n\t\telse {\r\n\t\t\tthis.template = template.replace(/\\d/g, DIGIT_PLACEHOLDER)\r\n\t\t}\r\n\r\n\t\t// This one is for the full phone number\r\n\t\treturn this.template\r\n\t}\r\n\r\n\t// Generates formatting template for a phone number format\r\n\tgetTemplateForNumberFormatPattern(format)\r\n\t{\r\n\t\t// A very smart trick by the guys at Google\r\n\t\tlet number_pattern = format.pattern()\r\n\r\n\t\t/* istanbul ignore else */\r\n\t\tif (SUPPORT_LEGACY_FORMATTING_PATTERNS)\r\n\t\t{\r\n\t\t\tnumber_pattern = number_pattern\r\n\t\t\t\t// Replace anything in the form of [..] with \\d\r\n\t\t\t\t.replace(CREATE_CHARACTER_CLASS_PATTERN(), '\\\\d')\r\n\t\t\t\t// Replace any standalone digit (not the one in `{}`) with \\d\r\n\t\t\t\t.replace(CREATE_STANDALONE_DIGIT_PATTERN(), '\\\\d')\r\n\t\t}\r\n\r\n\t\t// This match will always succeed,\r\n\t\t// because the \"longest dummy phone number\"\r\n\t\t// has enough length to accomodate any possible\r\n\t\t// national phone number format pattern.\r\n\t\tlet dummy_phone_number_matching_format_pattern = LONGEST_DUMMY_PHONE_NUMBER.match(number_pattern)[0]\r\n\r\n\t\t// If the national number entered is too long\r\n\t\t// for any phone number format, then abort.\r\n\t\tif (this.nationalNumber.length > dummy_phone_number_matching_format_pattern.length) {\r\n\t\t\treturn\r\n\t\t}\r\n\r\n\t\t// Prepare the phone number format\r\n\t\tconst number_format = this.getFormatFormat(format)\r\n\r\n\t\t// Get a formatting template which can be used to efficiently format\r\n\t\t// a partial number where digits are added one by one.\r\n\r\n\t\t// Below `strict_pattern` is used for the\r\n\t\t// regular expression (with `^` and `$`).\r\n\t\t// This wasn't originally in Google's `libphonenumber`\r\n\t\t// and I guess they don't really need it\r\n\t\t// because they're not using \"templates\" to format phone numbers\r\n\t\t// but I added `strict_pattern` after encountering\r\n\t\t// South Korean phone number formatting bug.\r\n\t\t//\r\n\t\t// Non-strict regular expression bug demonstration:\r\n\t\t//\r\n\t\t// this.nationalNumber : `111111111` (9 digits)\r\n\t\t//\r\n\t\t// number_pattern : (\\d{2})(\\d{3,4})(\\d{4})\r\n\t\t// number_format : `$1 $2 $3`\r\n\t\t// dummy_phone_number_matching_format_pattern : `9999999999` (10 digits)\r\n\t\t//\r\n\t\t// '9999999999'.replace(new RegExp(/(\\d{2})(\\d{3,4})(\\d{4})/g), '$1 $2 $3') = \"99 9999 9999\"\r\n\t\t//\r\n\t\t// template : xx xxxx xxxx\r\n\t\t//\r\n\t\t// But the correct template in this case is `xx xxx xxxx`.\r\n\t\t// The template was generated incorrectly because of the\r\n\t\t// `{3,4}` variability in the `number_pattern`.\r\n\t\t//\r\n\t\t// The fix is, if `this.nationalNumber` has already sufficient length\r\n\t\t// to satisfy the `number_pattern` completely then `this.nationalNumber` is used\r\n\t\t// instead of `dummy_phone_number_matching_format_pattern`.\r\n\r\n\t\tconst strict_pattern = new RegExp('^' + number_pattern + '$')\r\n\t\tconst national_number_dummy_digits = this.nationalNumber.replace(/\\d/g, DUMMY_DIGIT)\r\n\r\n\t\t// If `this.nationalNumber` has already sufficient length\r\n\t\t// to satisfy the `number_pattern` completely then use it\r\n\t\t// instead of `dummy_phone_number_matching_format_pattern`.\r\n\t\tif (strict_pattern.test(national_number_dummy_digits)) {\r\n\t\t\tdummy_phone_number_matching_format_pattern = national_number_dummy_digits\r\n\t\t}\r\n\r\n\t\t// Generate formatting template for this phone number format\r\n\t\treturn dummy_phone_number_matching_format_pattern\r\n\t\t\t// Format the dummy phone number according to the format\r\n\t\t\t.replace(new RegExp(number_pattern), number_format)\r\n\t\t\t// Replace each dummy digit with a DIGIT_PLACEHOLDER\r\n\t\t\t.replace(new RegExp(DUMMY_DIGIT, 'g'), DIGIT_PLACEHOLDER)\r\n\t}\r\n\r\n\tformatNextNationalNumberDigits(digits)\r\n\t{\r\n\t\t// Using `.split('')` to iterate through a string here\r\n\t\t// to avoid requiring `Symbol.iterator` polyfill.\r\n\t\t// `.split('')` is generally not safe for Unicode,\r\n\t\t// but in this particular case for `digits` it is safe.\r\n\t\t// for (const digit of digits)\r\n\t\tfor (const digit of digits.split(''))\r\n\t\t{\r\n\t\t\t// If there is room for more digits in current `template`,\r\n\t\t\t// then set the next digit in the `template`,\r\n\t\t\t// and return the formatted digits so far.\r\n\r\n\t\t\t// If more digits are entered than the current format could handle\r\n\t\t\tif (this.partially_populated_template.slice(this.last_match_position + 1).search(DIGIT_PLACEHOLDER_MATCHER) === -1)\r\n\t\t\t{\r\n\t\t\t\t// Reset the current format,\r\n\t\t\t\t// so that the new format will be chosen\r\n\t\t\t\t// in a subsequent `this.chooseAnotherFormat()` call\r\n\t\t\t\t// later in code.\r\n\t\t\t\tthis.chosenFormat = undefined\r\n\t\t\t\tthis.template = undefined\r\n\t\t\t\tthis.partially_populated_template = undefined\r\n\t\t\t\treturn\r\n\t\t\t}\r\n\r\n\t\t\tthis.last_match_position = this.partially_populated_template.search(DIGIT_PLACEHOLDER_MATCHER)\r\n\t\t\tthis.partially_populated_template = this.partially_populated_template.replace(DIGIT_PLACEHOLDER_MATCHER, digit)\r\n\t\t}\r\n\r\n\t\t// Return the formatted phone number so far.\r\n\t\treturn cut_stripping_dangling_braces(this.partially_populated_template, this.last_match_position + 1)\r\n\r\n\t\t// The old way which was good for `input-format` but is not so good\r\n\t\t// for `react-phone-number-input`'s default input (`InputBasic`).\r\n\t\t// return close_dangling_braces(this.partially_populated_template, this.last_match_position + 1)\r\n\t\t// \t.replace(DIGIT_PLACEHOLDER_MATCHER_GLOBAL, ' ')\r\n\t}\r\n\r\n\tisInternational() {\r\n\t\treturn this.parsedInput && this.parsedInput[0] === '+'\r\n\t}\r\n\r\n\tgetFormatFormat(format)\r\n\t{\r\n\t\tif (this.isInternational()) {\r\n\t\t\treturn changeInternationalFormatStyle(format.internationalFormat())\r\n\t\t}\r\n\r\n\t\t// If national prefix formatting rule is set\r\n\t\t// for this phone number format\r\n\t\tif (format.nationalPrefixFormattingRule())\r\n\t\t{\r\n\t\t\t// If the user did input the national prefix\r\n\t\t\t// (or if the national prefix formatting rule does not require national prefix)\r\n\t\t\t// then maybe make it part of the phone number template\r\n\t\t\tif (this.nationalPrefix || !format.usesNationalPrefix())\r\n\t\t\t{\r\n\t\t\t\t// Make the national prefix part of the phone number template\r\n\t\t\t\treturn format.format().replace(FIRST_GROUP_PATTERN, format.nationalPrefixFormattingRule())\r\n\t\t\t}\r\n\t\t}\r\n\t\t// Special handling for NANPA countries for AsYouType formatter.\r\n\t\t// Copied from Google's `libphonenumber`:\r\n\t\t// https://github.com/googlei18n/libphonenumber/blob/66986dbbe443ee8450e2b54dcd44ac384b3bbee8/java/libphonenumber/src/com/google/i18n/phonenumbers/AsYouTypeFormatter.java#L535-L573\r\n\t\telse if (this.countryCallingCode === '1' && this.nationalPrefix === '1') {\r\n\t\t\treturn `1 ${format.format()}`\r\n\t\t}\r\n\r\n\t\treturn format.format()\r\n\t}\r\n\r\n\t// Determines the country of the phone number\r\n\t// entered so far based on the country phone code\r\n\t// and the national phone number.\r\n\tdetermineTheCountry() {\r\n\t\tthis.country = find_country_code(this.countryCallingCode, this.nationalNumber, this.metadata)\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an instance of `PhoneNumber` class.\r\n\t * Will return `undefined` if no national (significant) number\r\n\t * digits have been entered so far, or if no `defaultCountry` has been\r\n\t * set and the user enters a phone number not in international format.\r\n\t */\r\n\tgetNumber()\r\n\t{\r\n\t\tif (!this.countryCallingCode || !this.nationalNumber) {\r\n\t\t\treturn undefined\r\n\t\t}\r\n\t\tconst phoneNumber = new PhoneNumber(this.country || this.countryCallingCode, this.nationalNumber, this.metadata.metadata)\r\n\t\tif (this.carrierCode) {\r\n\t\t\tphoneNumber.carrierCode = this.carrierCode\r\n\t\t}\r\n\t\t// Phone number extensions are not supported by \"As You Type\" formatter.\r\n\t\treturn phoneNumber\r\n\t}\r\n\r\n\tgetNationalNumber() {\r\n\t\treturn this.nationalNumber\r\n\t}\r\n\r\n\tgetTemplate()\r\n\t{\r\n\t\tif (!this.template) {\r\n\t\t\treturn\r\n\t\t}\r\n\r\n\t\tlet index = -1\r\n\r\n\t\tlet i = 0\r\n\t\twhile (i < this.parsedInput.length)\r\n\t\t{\r\n\t\t\tindex = this.template.indexOf(DIGIT_PLACEHOLDER, index + 1)\r\n\t\t\ti++\r\n\t\t}\r\n\r\n\t\treturn cut_stripping_dangling_braces(this.template, index + 1)\r\n\t}\r\n}\r\n\r\nexport function strip_dangling_braces(string)\r\n{\r\n\tconst dangling_braces =[]\r\n\tlet i = 0\r\n\twhile (i < string.length)\r\n\t{\r\n\t\tif (string[i] === '(') {\r\n\t\t\tdangling_braces.push(i)\r\n\t\t}\r\n\t\telse if (string[i] === ')') {\r\n\t\t\tdangling_braces.pop()\r\n\t\t}\r\n\t\ti++\r\n\t}\r\n\r\n\tlet start = 0\r\n\tlet cleared_string = ''\r\n\tdangling_braces.push(string.length)\r\n\tfor (const index of dangling_braces)\r\n\t{\r\n\t\tcleared_string += string.slice(start, index)\r\n\t\tstart = index + 1\r\n\t}\r\n\r\n\treturn cleared_string\r\n}\r\n\r\nexport function cut_stripping_dangling_braces(string, cut_before_index)\r\n{\r\n\tif (string[cut_before_index] === ')') {\r\n\t\tcut_before_index++\r\n\t}\r\n\treturn strip_dangling_braces(string.slice(0, cut_before_index))\r\n}\r\n\r\nexport function close_dangling_braces(template, cut_before)\r\n{\r\n\tconst retained_template = template.slice(0, cut_before)\r\n\r\n\tconst opening_braces = count_occurences('(', retained_template)\r\n\tconst closing_braces = count_occurences(')', retained_template)\r\n\r\n\tlet dangling_braces = opening_braces - closing_braces\r\n\twhile (dangling_braces > 0 && cut_before < template.length)\r\n\t{\r\n\t\tif (template[cut_before] === ')')\r\n\t\t{\r\n\t\t\tdangling_braces--\r\n\t\t}\r\n\t\tcut_before++\r\n\t}\r\n\r\n\treturn template.slice(0, cut_before)\r\n}\r\n\r\n// Counts all occurences of a symbol in a string.\r\n// Unicode-unsafe (because using `.split()`).\r\nexport function count_occurences(symbol, string)\r\n{\r\n\tlet count = 0\r\n\r\n\t// Using `.split('')` to iterate through a string here\r\n\t// to avoid requiring `Symbol.iterator` polyfill.\r\n\t// `.split('')` is generally not safe for Unicode,\r\n\t// but in this particular case for counting brackets it is safe.\r\n\t// for (const character of string)\r\n\tfor (const character of string.split(''))\r\n\t{\r\n\t\tif (character === symbol)\r\n\t\t{\r\n\t\t\tcount++\r\n\t\t}\r\n\t}\r\n\r\n\treturn count\r\n}\r\n\r\n// Repeats a string (or a symbol) N times.\r\n// http://stackoverflow.com/questions/202605/repeat-string-javascript\r\nexport function repeat(string, times)\r\n{\r\n\tif (times < 1)\r\n\t{\r\n\t\treturn ''\r\n\t}\r\n\r\n\tlet result = ''\r\n\r\n\twhile (times > 1)\r\n\t{\r\n\t\tif (times & 1)\r\n\t\t{\r\n\t\t\tresult += string\r\n\t\t}\r\n\r\n\t\ttimes >>= 1\r\n\t\tstring += string\r\n\t}\r\n\r\n\treturn result + string\r\n}","// Deprecated.\r\n// Use `libphonenumber-js/min` or `libphonenumber-js/max` or `libphonenumber-js/core` instead.\r\n\r\nimport metadata from './metadata.min.json'\r\n\r\nimport parsePhoneNumberCustom from './es6/parsePhoneNumber'\r\nimport parsePhoneNumberFromStringCustom from './es6/parsePhoneNumberFromString'\r\n\r\nimport parseNumberCustom from './es6/parse'\r\nimport formatNumberCustom from './es6/format'\r\nimport getNumberTypeCustom from './es6/getNumberType'\r\nimport getExampleNumberCustom from './es6/getExampleNumber'\r\nimport isPossibleNumberCustom from './es6/isPossibleNumber'\r\nimport isValidNumberCustom from './es6/validate'\r\nimport isValidNumberForRegionCustom from './es6/isValidNumberForRegion'\r\n\r\n// Deprecated\r\nimport findPhoneNumbersCustom, { searchPhoneNumbers as searchPhoneNumbersCustom } from './es6/findPhoneNumbers'\r\nimport { PhoneNumberSearch as PhoneNumberSearchCustom } from './es6/findPhoneNumbers_'\r\n\r\nimport findNumbersCustom from './es6/findNumbers'\r\nimport searchNumbersCustom from './es6/searchNumbers'\r\nimport PhoneNumberMatcherCustom from './es6/PhoneNumberMatcher'\r\n\r\nimport AsYouTypeCustom from './es6/AsYouType'\r\n\r\nimport getCountryCallingCodeCustom from './es6/getCountryCallingCode'\r\nexport { default as Metadata } from './es6/metadata'\r\nimport { getExtPrefix as getExtPrefixCustom, isSupportedCountry as isSupportedCountryCustom } from './es6/metadata'\r\nimport { parseRFC3966 as parseRFC3966Custom, formatRFC3966 as formatRFC3966Custom } from './es6/RFC3966'\r\nimport formatIncompletePhoneNumberCustom from './es6/formatIncompletePhoneNumber'\r\nexport { default as parseIncompletePhoneNumber, parsePhoneNumberCharacter } from './es6/parseIncompletePhoneNumber'\r\n// Deprecated: remove DIGITS export in 2.0.0.\r\n// (it was used in `react-phone-number-input`)\r\nexport { DIGITS, default as parseDigits } from './es6/parseDigits'\r\nexport { default as ParseError } from './es6/ParseError'\r\n\r\nexport function parsePhoneNumber()\r\n{\r\n\tvar parameters = Array.prototype.slice.call(arguments)\r\n\tparameters.push(metadata)\r\n\treturn parsePhoneNumberCustom.apply(this, parameters)\r\n}\r\n\r\nexport function parsePhoneNumberFromString()\r\n{\r\n\tvar parameters = Array.prototype.slice.call(arguments)\r\n\tparameters.push(metadata)\r\n\treturn parsePhoneNumberFromStringCustom.apply(this, parameters)\r\n}\r\n\r\nexport function parseNumber()\r\n{\r\n\tvar parameters = Array.prototype.slice.call(arguments)\r\n\tparameters.push(metadata)\r\n\treturn parseNumberCustom.apply(this, parameters)\r\n}\r\n\r\n// Deprecated: remove `parse()` export in 2.0.0.\r\n// (renamed to `parseNumber()`)\r\nexport function parse()\r\n{\r\n\tvar parameters = Array.prototype.slice.call(arguments)\r\n\tparameters.push(metadata)\r\n\treturn parseNumberCustom.apply(this, parameters)\r\n}\r\n\r\nexport function formatNumber()\r\n{\r\n\tvar parameters = Array.prototype.slice.call(arguments)\r\n\tparameters.push(metadata)\r\n\treturn formatNumberCustom.apply(this, parameters)\r\n}\r\n\r\n// Deprecated: remove `format()` export in 2.0.0.\r\n// (renamed to `formatNumber()`)\r\nexport function format()\r\n{\r\n\tvar parameters = Array.prototype.slice.call(arguments)\r\n\tparameters.push(metadata)\r\n\treturn formatNumberCustom.apply(this, parameters)\r\n}\r\n\r\nexport function getNumberType()\r\n{\r\n\tvar parameters = Array.prototype.slice.call(arguments)\r\n\tparameters.push(metadata)\r\n\treturn getNumberTypeCustom.apply(this, parameters)\r\n}\r\n\r\nexport function getExampleNumber()\r\n{\r\n\tvar parameters = Array.prototype.slice.call(arguments)\r\n\tparameters.push(metadata)\r\n\treturn getExampleNumberCustom.apply(this, parameters)\r\n}\r\n\r\nexport function isPossibleNumber()\r\n{\r\n\tvar parameters = Array.prototype.slice.call(arguments)\r\n\tparameters.push(metadata)\r\n\treturn isPossibleNumberCustom.apply(this, parameters)\r\n}\r\n\r\nexport function isValidNumber()\r\n{\r\n\tvar parameters = Array.prototype.slice.call(arguments)\r\n\tparameters.push(metadata)\r\n\treturn isValidNumberCustom.apply(this, parameters)\r\n}\r\n\r\nexport function isValidNumberForRegion()\r\n{\r\n\tvar parameters = Array.prototype.slice.call(arguments)\r\n\tparameters.push(metadata)\r\n\treturn isValidNumberForRegionCustom.apply(this, parameters)\r\n}\r\n\r\n// Deprecated.\r\nexport function findPhoneNumbers()\r\n{\r\n\tvar parameters = Array.prototype.slice.call(arguments)\r\n\tparameters.push(metadata)\r\n\treturn findPhoneNumbersCustom.apply(this, parameters)\r\n}\r\n\r\n// Deprecated.\r\nexport function searchPhoneNumbers()\r\n{\r\n\tvar parameters = Array.prototype.slice.call(arguments)\r\n\tparameters.push(metadata)\r\n\treturn searchPhoneNumbersCustom.apply(this, parameters)\r\n}\r\n\r\n// Deprecated.\r\nexport function PhoneNumberSearch(text, options)\r\n{\r\n\tPhoneNumberSearchCustom.call(this, text, options, metadata)\r\n}\r\n\r\n// Deprecated.\r\nPhoneNumberSearch.prototype = Object.create(PhoneNumberSearchCustom.prototype, {})\r\nPhoneNumberSearch.prototype.constructor = PhoneNumberSearch\r\n\r\nexport function findNumbers()\r\n{\r\n\tvar parameters = Array.prototype.slice.call(arguments)\r\n\tparameters.push(metadata)\r\n\treturn findNumbersCustom.apply(this, parameters)\r\n}\r\n\r\nexport function searchNumbers()\r\n{\r\n\tvar parameters = Array.prototype.slice.call(arguments)\r\n\tparameters.push(metadata)\r\n\treturn searchNumbersCustom.apply(this, parameters)\r\n}\r\n\r\nexport function PhoneNumberMatcher(text, options)\r\n{\r\n\tPhoneNumberMatcherCustom.call(this, text, options, metadata)\r\n}\r\n\r\nPhoneNumberMatcher.prototype = Object.create(PhoneNumberMatcherCustom.prototype, {})\r\nPhoneNumberMatcher.prototype.constructor = PhoneNumberMatcher\r\n\r\nexport function AsYouType(country)\r\n{\r\n\tAsYouTypeCustom.call(this, country, metadata)\r\n}\r\n\r\nAsYouType.prototype = Object.create(AsYouTypeCustom.prototype, {})\r\nAsYouType.prototype.constructor = AsYouType\r\n\r\nexport function isSupportedCountry()\r\n{\r\n\tvar parameters = Array.prototype.slice.call(arguments)\r\n\tparameters.push(metadata)\r\n\treturn isSupportedCountryCustom.apply(this, parameters)\r\n}\r\n\r\nexport function getExtPrefix()\r\n{\r\n\tvar parameters = Array.prototype.slice.call(arguments)\r\n\tparameters.push(metadata)\r\n\treturn getExtPrefixCustom.apply(this, parameters)\r\n}\r\n\r\nexport function parseRFC3966()\r\n{\r\n\tvar parameters = Array.prototype.slice.call(arguments)\r\n\tparameters.push(metadata)\r\n\treturn parseRFC3966Custom.apply(this, parameters)\r\n}\r\n\r\nexport function formatRFC3966()\r\n{\r\n\tvar parameters = Array.prototype.slice.call(arguments)\r\n\tparameters.push(metadata)\r\n\treturn formatRFC3966Custom.apply(this, parameters)\r\n}\r\n\r\nexport function formatIncompletePhoneNumber()\r\n{\r\n\tvar parameters = Array.prototype.slice.call(arguments)\r\n\tparameters.push(metadata)\r\n\treturn formatIncompletePhoneNumberCustom.apply(this, parameters)\r\n}\r\n\r\n// Deprecated: remove this in 2.0.0 and make `custom.js` in ES6\r\n// (the old `custom.js` becomes `custom.commonjs.js`).\r\nexport { default as parseCustom } from './es6/parse'\r\nexport { default as formatCustom } from './es6/format'\r\nexport { default as isValidNumberCustom } from './es6/validate'\r\nexport { default as findPhoneNumbersCustom } from './es6/findPhoneNumbers'\r\nexport { searchPhoneNumbers as searchPhoneNumbersCustom } from './es6/findPhoneNumbers'\r\nexport { PhoneNumberSearch as PhoneNumberSearchCustom } from './es6/findPhoneNumbers_'\r\nexport { default as getNumberTypeCustom } from './es6/getNumberType'\r\nexport { default as getCountryCallingCodeCustom } from './es6/getCountryCallingCode'\r\n\r\nexport\r\n{\r\n\tdefault as AsYouTypeCustom,\r\n\t// Deprecated: `DIGIT_PLACEHOLDER` was used by `react-phone-number-input`.\r\n\t// Seems to be not used anymore.\r\n\tDIGIT_PLACEHOLDER\r\n}\r\nfrom './es6/AsYouType'\r\n\r\nexport function getCountryCallingCode(country)\r\n{\r\n\treturn getCountryCallingCodeCustom(country, metadata)\r\n}\r\n\r\n// `getPhoneCode` name is deprecated, use `getCountryCallingCode` instead.\r\nexport function getPhoneCode(country)\r\n{\r\n\treturn getCountryCallingCode(country)\r\n}\r\n\r\n// `getPhoneCodeCustom` name is deprecated, use `getCountryCallingCodeCustom` instead.\r\nexport function getPhoneCodeCustom(country, metadata)\r\n{\r\n\treturn getCountryCallingCodeCustom(country, metadata)\r\n}","export var baseThemeStyleName = 'theme-base';\nexport var flagIconClassesPrefixName = 'flag-icon';\nexport var flagIconClassesPrefix = \"\".concat(flagIconClassesPrefixName, \"-\");\nexport var flagIconModulePath = 'node_modules/flag-icon-css';","function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport classnames from 'classnames';\nimport classNameToStyleName from './classNameToStyleName';\nimport { baseThemeStyleName, flagIconClassesPrefix, flagIconClassesPrefixName } from './constants';\nexport var makeClassesObject = function makeClassesObject(props, options) {\n  var _ref;\n\n  var code = props.code,\n      _props$flip = props.flip,\n      flip = _props$flip === void 0 ? '' : _props$flip,\n      _props$size = props.size,\n      size = _props$size === void 0 ? '' : _props$size,\n      _props$squared = props.squared,\n      squared = _props$squared === void 0 ? false : _props$squared,\n      rotate = props.rotate,\n      className = props.className,\n      styleName = props.styleName;\n  var themeStyles = options.themeStyles,\n      useCssModules = options.useCssModules;\n  return _ref = {}, _defineProperty(_ref, flagIconClassesPrefixName, true), _defineProperty(_ref, \"\".concat(flagIconClassesPrefix, \"squared\"), squared), _defineProperty(_ref, \"\".concat(flagIconClassesPrefix).concat(size), size), _defineProperty(_ref, \"\".concat(flagIconClassesPrefix).concat(code), code), _defineProperty(_ref, \"\".concat(flagIconClassesPrefix, \"flip-\").concat(flip), flip), _defineProperty(_ref, \"\".concat(flagIconClassesPrefix, \"rotate-\").concat(rotate || ''), rotate), _defineProperty(_ref, baseThemeStyleName, useCssModules && themeStyles && themeStyles[baseThemeStyleName]), _defineProperty(_ref, styleName || '', useCssModules && themeStyles && styleName && themeStyles[styleName]), _defineProperty(_ref, className || '', className), _ref;\n};\nexport default (function (props, options, styles) {\n  var useCssModules = options.useCssModules;\n  var classesObject = makeClassesObject(props, options);\n  var strClasses = classnames(classesObject);\n\n  if (useCssModules) {\n    var className = props.className;\n    var aClasses = strClasses.split(' ');\n    var nClasses = aClasses.length;\n    strClasses = aClasses.map(function (c, i) {\n      if (className && i === nClasses - 1) return c;\n      return classNameToStyleName(c, styles || {});\n    }).join(' ');\n  }\n\n  return strClasses;\n});","export default (function (className, styles) {\n  if (!styles[className]) {\n    throw new Error(\"Could not resolve the styleName \".concat(className));\n  }\n\n  return styles[className];\n});","export var sizes = ['lg', '2x', '3x', '4x', '5x'];\nexport var rotates = [30, 60, 90, 180, 270];\nexport var flips = ['horizontal', 'vertical'];\nexport var countries = [{\n  name: 'Afghanistan',\n  code: 'af'\n}, {\n  name: 'Åland Islands',\n  code: 'ax'\n}, {\n  name: 'Albania',\n  code: 'al'\n}, {\n  name: 'Algeria',\n  code: 'dz'\n}, {\n  name: 'American Samoa',\n  code: 'as'\n}, {\n  name: 'Andorra',\n  code: 'ad'\n}, {\n  name: 'Angola',\n  code: 'ao'\n}, {\n  name: 'Anguilla',\n  code: 'ai'\n}, {\n  name: 'Antarctica',\n  code: 'aq'\n}, {\n  name: 'Antigua and Barbuda',\n  code: 'ag'\n}, {\n  name: 'Argentina',\n  code: 'ar'\n}, {\n  name: 'Armenia',\n  code: 'am'\n}, {\n  name: 'Aruba',\n  code: 'aw'\n}, {\n  name: 'Australia',\n  code: 'au'\n}, {\n  name: 'Austria',\n  code: 'at'\n}, {\n  name: 'Azerbaijan',\n  code: 'az'\n}, {\n  name: 'Bahamas',\n  code: 'bs'\n}, {\n  name: 'Bahrain',\n  code: 'bh'\n}, {\n  name: 'Bangladesh',\n  code: 'bd'\n}, {\n  name: 'Barbados',\n  code: 'bb'\n}, {\n  name: 'Belarus',\n  code: 'by'\n}, {\n  name: 'Belgium',\n  code: 'be'\n}, {\n  name: 'Belize',\n  code: 'bz'\n}, {\n  name: 'Benin',\n  code: 'bj'\n}, {\n  name: 'Bermuda',\n  code: 'bm'\n}, {\n  name: 'Bhutan',\n  code: 'bt'\n}, {\n  name: 'Bolivia, Plurinational State of',\n  code: 'bo'\n}, {\n  name: 'Bonaire, Sint Eustatius and Saba',\n  code: 'bq'\n}, {\n  name: 'Bosnia and Herzegovina',\n  code: 'ba'\n}, {\n  name: 'Botswana',\n  code: 'bw'\n}, {\n  name: 'Bouvet Island',\n  code: 'bv'\n}, {\n  name: 'Brazil',\n  code: 'br'\n}, {\n  name: 'British Indian Ocean Territory',\n  code: 'io'\n}, {\n  name: 'Brunei Darussalam',\n  code: 'bn'\n}, {\n  name: 'Bulgaria',\n  code: 'bg'\n}, {\n  name: 'Burkina Faso',\n  code: 'bf'\n}, {\n  name: 'Burundi',\n  code: 'bi'\n}, {\n  name: 'Cambodia',\n  code: 'kh'\n}, {\n  name: 'Cameroon',\n  code: 'cm'\n}, {\n  name: 'Canada',\n  code: 'ca'\n}, {\n  name: 'Cape Verde',\n  code: 'cv'\n}, {\n  name: 'Catalonia',\n  code: 'es-ct'\n}, {\n  name: 'Cayman Islands',\n  code: 'ky'\n}, {\n  name: 'Central African Republic',\n  code: 'cf'\n}, {\n  name: 'Chad',\n  code: 'td'\n}, {\n  name: 'Chile',\n  code: 'cl'\n}, {\n  name: 'China',\n  code: 'cn'\n}, {\n  name: 'Christmas Island',\n  code: 'cx'\n}, {\n  name: 'Cocos (Keeling) Islands',\n  code: 'cc'\n}, {\n  name: 'Colombia',\n  code: 'co'\n}, {\n  name: 'Comoros',\n  code: 'km'\n}, {\n  name: 'Congo',\n  code: 'cg'\n}, {\n  name: 'Congo, the Democratic Republic of the',\n  code: 'cd'\n}, {\n  name: 'Cook Islands',\n  code: 'ck'\n}, {\n  name: 'Costa Rica',\n  code: 'cr'\n}, {\n  name: \"Côte d'Ivoire\",\n  code: 'ci'\n}, {\n  name: 'Croatia',\n  code: 'hr'\n}, {\n  name: 'Cuba',\n  code: 'cu'\n}, {\n  name: 'Curaçao',\n  code: 'cw'\n}, {\n  name: 'Cyprus',\n  code: 'cy'\n}, {\n  name: 'Czech Republic',\n  code: 'cz'\n}, {\n  name: 'Denmark',\n  code: 'dk'\n}, {\n  name: 'Djibouti',\n  code: 'dj'\n}, {\n  name: 'Dominica',\n  code: 'dm'\n}, {\n  name: 'Dominican Republic',\n  code: 'do'\n}, {\n  name: 'Ecuador',\n  code: 'ec'\n}, {\n  name: 'Egypt',\n  code: 'eg'\n}, {\n  name: 'El Salvador',\n  code: 'sv'\n}, {\n  name: 'Equatorial Guinea',\n  code: 'gq'\n}, {\n  name: 'Eritrea',\n  code: 'er'\n}, {\n  name: 'Estonia',\n  code: 'ee'\n}, {\n  name: 'Ethiopia',\n  code: 'et'\n}, {\n  name: 'European Union',\n  code: 'eu'\n}, {\n  name: 'Falkland Islands (Malvinas)',\n  code: 'fk'\n}, {\n  name: 'Faroe Islands',\n  code: 'fo'\n}, {\n  name: 'Fiji',\n  code: 'fj'\n}, {\n  name: 'Finland',\n  code: 'fi'\n}, {\n  name: 'France',\n  code: 'fr'\n}, {\n  name: 'French Guiana',\n  code: 'gf'\n}, {\n  name: 'French Polynesia',\n  code: 'pf'\n}, {\n  name: 'French Southern Territories',\n  code: 'tf'\n}, {\n  name: 'Gabon',\n  code: 'ga'\n}, {\n  name: 'Gambia',\n  code: 'gm'\n}, {\n  name: 'Georgia',\n  code: 'ge'\n}, {\n  name: 'Germany',\n  code: 'de'\n}, {\n  name: 'Ghana',\n  code: 'gh'\n}, {\n  name: 'Gibraltar',\n  code: 'gi'\n}, {\n  name: 'Greece',\n  code: 'gr'\n}, {\n  name: 'Greenland',\n  code: 'gl'\n}, {\n  name: 'Grenada',\n  code: 'gd'\n}, {\n  name: 'Guadeloupe',\n  code: 'gp'\n}, {\n  name: 'Guam',\n  code: 'gu'\n}, {\n  name: 'Guatemala',\n  code: 'gt'\n}, {\n  name: 'Guernsey',\n  code: 'gg'\n}, {\n  name: 'Guinea',\n  code: 'gn'\n}, {\n  name: 'Guinea-Bissau',\n  code: 'gw'\n}, {\n  name: 'Guyana',\n  code: 'gy'\n}, {\n  name: 'Haiti',\n  code: 'ht'\n}, {\n  name: 'Heard Island and McDonald Islands',\n  code: 'hm'\n}, {\n  name: 'Holy See (Vatican City State)',\n  code: 'va'\n}, {\n  name: 'Honduras',\n  code: 'hn'\n}, {\n  name: 'Hong Kong',\n  code: 'hk'\n}, {\n  name: 'Hungary',\n  code: 'hu'\n}, {\n  name: 'Iceland',\n  code: 'is'\n}, {\n  name: 'India',\n  code: 'in'\n}, {\n  name: 'Indonesia',\n  code: 'id'\n}, {\n  name: 'Iran, Islamic Republic of',\n  code: 'ir'\n}, {\n  name: 'Iraq',\n  code: 'iq'\n}, {\n  name: 'Ireland',\n  code: 'ie'\n}, {\n  name: 'Isle of Man',\n  code: 'im'\n}, {\n  name: 'Israel',\n  code: 'il'\n}, {\n  name: 'Italy',\n  code: 'it'\n}, {\n  name: 'Jamaica',\n  code: 'jm'\n}, {\n  name: 'Japan',\n  code: 'jp'\n}, {\n  name: 'Jersey',\n  code: 'je'\n}, {\n  name: 'Jordan',\n  code: 'jo'\n}, {\n  name: 'Kazakhstan',\n  code: 'kz'\n}, {\n  name: 'Kenya',\n  code: 'ke'\n}, {\n  name: 'Kiribati',\n  code: 'ki'\n}, {\n  name: \"Korea, Democratic People's Republic of\",\n  code: 'kp'\n}, {\n  name: 'Korea, Republic of',\n  code: 'kr'\n}, {\n  name: 'Kuwait',\n  code: 'kw'\n}, {\n  name: 'Kyrgyzstan',\n  code: 'kg'\n}, {\n  name: \"Lao People's Democratic Republic\",\n  code: 'la'\n}, {\n  name: 'Latvia',\n  code: 'lv'\n}, {\n  name: 'Lebanon',\n  code: 'lb'\n}, {\n  name: 'Lesotho',\n  code: 'ls'\n}, {\n  name: 'Liberia',\n  code: 'lr'\n}, {\n  name: 'Libya',\n  code: 'ly'\n}, {\n  name: 'Liechtenstein',\n  code: 'li'\n}, {\n  name: 'Lithuania',\n  code: 'lt'\n}, {\n  name: 'Luxembourg',\n  code: 'lu'\n}, {\n  name: 'Macao',\n  code: 'mo'\n}, {\n  name: 'Macedonia, the Former Yugoslav Republic of',\n  code: 'mk'\n}, {\n  name: 'Madagascar',\n  code: 'mg'\n}, {\n  name: 'Malawi',\n  code: 'mw'\n}, {\n  name: 'Malaysia',\n  code: 'my'\n}, {\n  name: 'Maldives',\n  code: 'mv'\n}, {\n  name: 'Mali',\n  code: 'ml'\n}, {\n  name: 'Malta',\n  code: 'mt'\n}, {\n  name: 'Marshall Islands',\n  code: 'mh'\n}, {\n  name: 'Martinique',\n  code: 'mq'\n}, {\n  name: 'Mauritania',\n  code: 'mr'\n}, {\n  name: 'Mauritius',\n  code: 'mu'\n}, {\n  name: 'Mayotte',\n  code: 'yt'\n}, {\n  name: 'Mexico',\n  code: 'mx'\n}, {\n  name: 'Micronesia, Federated States of',\n  code: 'fm'\n}, {\n  name: 'Moldova, Republic of',\n  code: 'md'\n}, {\n  name: 'Monaco',\n  code: 'mc'\n}, {\n  name: 'Mongolia',\n  code: 'mn'\n}, {\n  name: 'Montenegro',\n  code: 'me'\n}, {\n  name: 'Montserrat',\n  code: 'ms'\n}, {\n  name: 'Morocco',\n  code: 'ma'\n}, {\n  name: 'Mozambique',\n  code: 'mz'\n}, {\n  name: 'Myanmar',\n  code: 'mm'\n}, {\n  name: 'Namibia',\n  code: 'na'\n}, {\n  name: 'Nauru',\n  code: 'nr'\n}, {\n  name: 'Nepal',\n  code: 'np'\n}, {\n  name: 'Netherlands',\n  code: 'nl'\n}, {\n  name: 'New Caledonia',\n  code: 'nc'\n}, {\n  name: 'New Zealand',\n  code: 'nz'\n}, {\n  name: 'Nicaragua',\n  code: 'ni'\n}, {\n  name: 'Niger',\n  code: 'ne'\n}, {\n  name: 'Nigeria',\n  code: 'ng'\n}, {\n  name: 'Niue',\n  code: 'nu'\n}, {\n  name: 'Norfolk Island',\n  code: 'nf'\n}, {\n  name: 'Northern Mariana Islands',\n  code: 'mp'\n}, {\n  name: 'Norway',\n  code: 'no'\n}, {\n  name: 'Oman',\n  code: 'om'\n}, {\n  name: 'Pakistan',\n  code: 'pk'\n}, {\n  name: 'Palau',\n  code: 'pw'\n}, {\n  name: 'Palestine, State of',\n  code: 'ps'\n}, {\n  name: 'Panama',\n  code: 'pa'\n}, {\n  name: 'Papua New Guinea',\n  code: 'pg'\n}, {\n  name: 'Paraguay',\n  code: 'py'\n}, {\n  name: 'Peru',\n  code: 'pe'\n}, {\n  name: 'Philippines',\n  code: 'ph'\n}, {\n  name: 'Pitcairn',\n  code: 'pn'\n}, {\n  name: 'Poland',\n  code: 'pl'\n}, {\n  name: 'Portugal',\n  code: 'pt'\n}, {\n  name: 'Puerto Rico',\n  code: 'pr'\n}, {\n  name: 'Qatar',\n  code: 'qa'\n}, {\n  name: 'Réunion',\n  code: 're'\n}, {\n  name: 'Romania',\n  code: 'ro'\n}, {\n  name: 'Russian Federation',\n  code: 'ru'\n}, {\n  name: 'Rwanda',\n  code: 'rw'\n}, {\n  name: 'Saint Barthélemy',\n  code: 'bl'\n}, {\n  name: 'Saint Helena, Ascension and Tristan da Cunha',\n  code: 'sh'\n}, {\n  name: 'Saint Kitts and Nevis',\n  code: 'kn'\n}, {\n  name: 'Saint Lucia',\n  code: 'lc'\n}, {\n  name: 'Saint Martin (French part)',\n  code: 'mf'\n}, {\n  name: 'Saint Pierre and Miquelon',\n  code: 'pm'\n}, {\n  name: 'Saint Vincent and the Grenadines',\n  code: 'vc'\n}, {\n  name: 'Samoa',\n  code: 'ws'\n}, {\n  name: 'San Marino',\n  code: 'sm'\n}, {\n  name: 'Sao Tome and Principe',\n  code: 'st'\n}, {\n  name: 'Saudi Arabia',\n  code: 'sa'\n}, {\n  name: 'Senegal',\n  code: 'sn'\n}, {\n  name: 'Serbia',\n  code: 'rs'\n}, {\n  name: 'Seychelles',\n  code: 'sc'\n}, {\n  name: 'Sierra Leone',\n  code: 'sl'\n}, {\n  name: 'Singapore',\n  code: 'sg'\n}, {\n  name: 'Sint Maarten (Dutch part)',\n  code: 'sx'\n}, {\n  name: 'Slovakia',\n  code: 'sk'\n}, {\n  name: 'Slovenia',\n  code: 'si'\n}, {\n  name: 'Solomon Islands',\n  code: 'sb'\n}, {\n  name: 'Somalia',\n  code: 'so'\n}, {\n  name: 'South Africa',\n  code: 'za'\n}, {\n  name: 'South Georgia and the South Sandwich Islands',\n  code: 'gs'\n}, {\n  name: 'South Sudan',\n  code: 'ss'\n}, {\n  name: 'Spain',\n  code: 'es'\n}, {\n  name: 'Sri Lanka',\n  code: 'lk'\n}, {\n  name: 'Sudan',\n  code: 'sd'\n}, {\n  name: 'Suriname',\n  code: 'sr'\n}, {\n  name: 'Svalbard and Jan Mayen',\n  code: 'sj'\n}, {\n  name: 'Swaziland',\n  code: 'sz'\n}, {\n  name: 'Sweden',\n  code: 'se'\n}, {\n  name: 'Switzerland',\n  code: 'ch'\n}, {\n  name: 'Syrian Arab Republic',\n  code: 'sy'\n}, {\n  name: 'Taiwan, Province of China',\n  code: 'tw'\n}, {\n  name: 'Tajikistan',\n  code: 'tj'\n}, {\n  name: 'Tanzania, United Republic of',\n  code: 'tz'\n}, {\n  name: 'Thailand',\n  code: 'th'\n}, {\n  name: 'Timor-Leste',\n  code: 'tl'\n}, {\n  name: 'Togo',\n  code: 'tg'\n}, {\n  name: 'Tokelau',\n  code: 'tk'\n}, {\n  name: 'Tonga',\n  code: 'to'\n}, {\n  name: 'Trinidad and Tobago',\n  code: 'tt'\n}, {\n  name: 'Tunisia',\n  code: 'tn'\n}, {\n  name: 'Turkey',\n  code: 'tr'\n}, {\n  name: 'Turkmenistan',\n  code: 'tm'\n}, {\n  name: 'Turks and Caicos Islands',\n  code: 'tc'\n}, {\n  name: 'Tuvalu',\n  code: 'tv'\n}, {\n  name: 'Uganda',\n  code: 'ug'\n}, {\n  name: 'Ukraine',\n  code: 'ua'\n}, {\n  name: 'United Arab Emirates',\n  code: 'ae'\n}, {\n  name: 'United Kingdom',\n  code: 'gb'\n}, {\n  name: 'England',\n  code: 'gb-eng'\n}, {\n  name: 'Northern Ireland',\n  code: 'gb-nir'\n}, {\n  name: 'Scotland',\n  code: 'gb-sct'\n}, {\n  name: 'Wales',\n  code: 'gb-wls'\n}, {\n  name: 'United Nations',\n  code: 'un'\n}, {\n  name: 'United States',\n  code: 'us'\n}, {\n  name: 'United States Minor Outlying Islands',\n  code: 'um'\n}, {\n  name: 'Uruguay',\n  code: 'uy'\n}, {\n  name: 'Uzbekistan',\n  code: 'uz'\n}, {\n  name: 'Vanuatu',\n  code: 'vu'\n}, {\n  name: 'Venezuela, Bolivarian Republic of',\n  code: 've'\n}, {\n  name: 'Viet Nam',\n  code: 'vn'\n}, {\n  name: 'Virgin Islands, British',\n  code: 'vg'\n}, {\n  name: 'Virgin Islands, U.S.',\n  code: 'vi'\n}, {\n  name: 'Wallis and Futuna',\n  code: 'wf'\n}, {\n  name: 'Western Sahara',\n  code: 'eh'\n}, {\n  name: 'Yemen',\n  code: 'ye'\n}, {\n  name: 'Zambia',\n  code: 'zm'\n}, {\n  name: 'Zimbabwe',\n  code: 'zw'\n}];","var _this = this;\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nvar fnThemeStylesValidator = function fnThemeStylesValidator(propsObject, propsValues, propName, componentName) {\n  var useCssModules = propsValues.useCssModules,\n      customCodes = propsValues.customCodes;\n  if (!useCssModules) return;\n\n  if (customCodes) {\n    var themeStyles = propsValues.themeStyles;\n\n    if (themeStyles) {\n      var themeStylesClassNames = Object.keys(themeStyles);\n      var result = Object.keys(customCodes).filter(function (customCode) {\n        return !themeStylesClassNames.includes(\"flag-icon-\".concat(customCode));\n      });\n\n      if (result.length > 0) {\n        return new Error(\"Invalid prop(s) `themeStyles` supplied to `\".concat(componentName, \"`, expected `.flag-icon-[\").concat(result.join('/'), \"]`.\"));\n      }\n    } else {\n      return new Error(\"Missing required prop(s) `themeStyles` supplied to `\".concat(componentName, \"`.\"));\n    }\n  }\n};\n\nexport var AddThemeStylesValidator = function AddThemeStylesValidator(obj) {\n  var validatorKeyName = '__themeStyles__';\n\n  if (Object.prototype.hasOwnProperty.call(obj, validatorKeyName)) {\n    return obj;\n  }\n\n  return _objectSpread({}, obj, _defineProperty({}, validatorKeyName, fnThemeStylesValidator.bind(_this, obj)));\n};\n\nvar fnNoExtraPropsValidator = function fnNoExtraPropsValidator(propsObject, propsValues, propName, componentName) {\n  var passedPropNames = Object.keys(propsValues);\n  var extra = passedPropNames.filter(function (prop) {\n    return !Object.prototype.hasOwnProperty.call(propsObject, prop);\n  });\n\n  if (extra.length > 0) {\n    return new Error(\"Invalid prop(s) \".concat(JSON.stringify(extra), \" supplied to `\").concat(componentName, \"`, expected one of [\").concat(passedPropNames.join(','), \"].\"));\n  }\n};\n\nexport var AddNoExtraPropsValidator = function AddNoExtraPropsValidator(obj) {\n  var validatorKeyName = '__no__extra__props__validator___';\n\n  if (Object.prototype.hasOwnProperty.call(obj, validatorKeyName)) {\n    return obj;\n  }\n\n  return _objectSpread({}, obj, _defineProperty({}, validatorKeyName, fnNoExtraPropsValidator.bind(_this, obj)));\n};","function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport PropTypes from 'prop-types';\nimport { getRotates, getFlips, getSizes } from '../functions/props';\nimport { AddNoExtraPropsValidator, AddThemeStylesValidator } from '../functions/propTypes';\nvar FlagIconSizeType = PropTypes.oneOf(getSizes());\nvar FlagIconRotateType = PropTypes.oneOf(getRotates());\nvar FlagIconFlipType = PropTypes.oneOf(getFlips());\n\nvar makeFlagIconCodeType = function makeFlagIconCodeType(codes) {\n  return PropTypes.oneOf(codes);\n};\n\nvar makeFlagIconClassesObject = function makeFlagIconClassesObject(codes) {\n  return {\n    code: makeFlagIconCodeType(codes).isRequired,\n    size: FlagIconSizeType,\n    squared: PropTypes.bool,\n    rotate: FlagIconRotateType,\n    flip: FlagIconFlipType,\n    className: PropTypes.string,\n    styleName: PropTypes.string\n  };\n};\n\nvar makeFlagIconPropsTypeObject = function makeFlagIconPropsTypeObject(codes) {\n  return _objectSpread({}, makeFlagIconClassesObject(codes), {\n    children: PropTypes.element,\n    Component: PropTypes.string\n  });\n};\n\nexport var MakeFlagIconPropsType = function MakeFlagIconPropsType(codes) {\n  return AddNoExtraPropsValidator(makeFlagIconPropsTypeObject(codes));\n};\nvar flagIconOptionsType = {\n  customCodes: PropTypes.object,\n  themeStyles: PropTypes.object,\n  useCssModules: PropTypes.bool\n};\nexport var MakeFlagIconOptionsPropType = function MakeFlagIconOptionsPropType() {\n  return AddNoExtraPropsValidator(AddThemeStylesValidator(flagIconOptionsType));\n};","import { sizes, rotates, flips, countries } from '../static/enums';\nexport var getCountries = function getCountries() {\n  return countries;\n};\nexport var getCountryCodes = function getCountryCodes() {\n  return countries.map(function (country) {\n    return country.code;\n  });\n};\nexport var getFlips = function getFlips() {\n  return flips;\n};\nexport var getRotates = function getRotates() {\n  return rotates;\n};\nexport var getSizes = function getSizes() {\n  return sizes;\n};","function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport PropTypes from 'prop-types';\nimport { MakeFlagIconOptionsPropType } from '../types/propTypes';\nvar defaultOptions = {\n  useCssModules: true\n};\nexport default (function (options) {\n  var computedOptions = _objectSpread({}, defaultOptions, options);\n\n  PropTypes.checkPropTypes(MakeFlagIconOptionsPropType(), computedOptions, 'key', 'FlagIconFactory options');\n  return computedOptions;\n});","function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nexport var validateStyles = function validateStyles(styles, computedOptions, options) {\n  if (process.env.NODE_ENV !== 'production') {\n    if (!computedOptions) throw Error('Passing `computedOptions` is required.');\n\n    if (!computedOptions.useCssModules) {\n      throw Error('Cannot validate global CSS.');\n    }\n\n    var userSetUseCssModules = options ? options.useCssModules : false;\n\n    if (!Object.prototype.hasOwnProperty.call(styles, 'flag-icon')) {\n      var readme = 'https://github.com/matteocng/react-flag-icon-css/blob/master/README.md';\n      var readmeModules = 'https://github.com/gajus/react-css-modules#usage';\n      console.error(\"Warning: Detected configuration mismatch/error: [react-flag-icon-css] FlagIconFactory tried to build FlagIcon with the option 'useCssModules' set to true (\".concat(userSetUseCssModules ? 'by you' : 'default', \"), but it seems that your environment is not loading the stylesheets in the appropriate way. Two possibilities: \\n\\n 1. Your project is not using CSS Modules / you don't want to use them. Try building FlagIcon like this: \\n\\n\\timport * as React from 'react' \\n\\n\\tconst FlagIcon = FlagIconFactory(React, { useCssModules: false }) \\n\\n\\tSee the README for more info: \").concat(readme, \" \\n\\n 2. You are using CSS Modules but your module bundler e.g Webpack is not correctly set up for CSS modules. If you are using Webpack, the key modules to set up are 'style-loader', 'css-loader' and 'extract-text-webpack-plugin' ('sass-loader' also comes into play if you are using SASS). The link below may help you:\\n\\n\\t\").concat(readmeModules));\n    }\n  }\n};\nexport default (function (styles, options) {\n  return options && options.themeStyles ? _objectSpread({}, styles, options.themeStyles) : styles;\n});","import { makeClassnames } from '../functions';\n\nvar FlagIcon = function FlagIcon(React, options, styles) {\n  return function (props) {\n    var _props$Component = props.Component,\n        Component = _props$Component === void 0 ? 'span' : _props$Component,\n        children = props.children;\n    return React.createElement(Component, {\n      className: makeClassnames(props, options, styles)\n    }, children);\n  };\n};\n\nexport default FlagIcon;","function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport stylesFlagIcon from 'flag-icon-css/css/flag-icon.css';\nimport stylesMain from './styles/main.css';\n\nvar finalStyles = _objectSpread({}, stylesFlagIcon, stylesMain);\n\nexport default finalStyles;","function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance\"); }\n\nfunction _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }\n\nimport FlagIcon from './FlagIcon';\nimport styles from '../styles';\nimport { makeStyles, makeFlagIconOptions } from '../functions';\nimport { getCountryCodes } from '../functions/props';\nimport { validateStyles } from '../functions/styles';\nimport { MakeFlagIconPropsType } from '../types/propTypes';\n\nvar FlagIconFactory = function FlagIconFactory(React, options) {\n  var computedOptions = makeFlagIconOptions(options);\n  var useCssModules = computedOptions.useCssModules,\n      customCodes = computedOptions.customCodes;\n  var FlagIconComponent = null;\n\n  if (useCssModules) {\n    var computedStyles = makeStyles(styles, options);\n\n    if (process.env.NODE_ENV !== 'production') {\n      validateStyles(computedStyles, computedOptions, options);\n    }\n\n    FlagIconComponent = FlagIcon(React, computedOptions, computedStyles);\n  } else {\n    FlagIconComponent = FlagIcon(React, computedOptions);\n  }\n\n  FlagIconComponent.displayName = 'FlagIcon';\n\n  if (process.env.NODE_ENV !== 'production') {\n    var codes = getCountryCodes();\n\n    if (customCodes) {\n      codes = [].concat(_toConsumableArray(codes), _toConsumableArray(Object.keys(customCodes)));\n    }\n\n    FlagIconComponent.propTypes = MakeFlagIconPropsType(codes);\n  }\n\n  return FlagIconComponent;\n};\n\nexport default FlagIconFactory;\n\nvar CustomFlagIconFactory = function CustomFlagIconFactory(React, options) {\n  return FlagIconFactory(React, options);\n};\n\nexport { CustomFlagIconFactory };","export { default, CustomFlagIconFactory } from './FlagIcon/FlagIconFactory';\nimport * as _types from './types/flow';\nexport { _types as types };\nimport * as _functions from './functions';\nexport { _functions as functions };"],"sourceRoot":""}