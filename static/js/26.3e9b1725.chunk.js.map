{"version":3,"sources":["components/organisms/SectionContents/pricing.js"],"names":["Pricing","props","getType","i","getWidth","cards","length","hexToRgb","hex","result","exec","r","parseInt","g","b","isDark","bg","match","state","className","this","showHead","dangerouslySetInnerHTML","__html","ReactHtmlParser","renderToString","value","heading","map","modalID","index","key","title","style","backgroundColor","description","price","data-toggle","data-target","React"],"mappings":"8MAYMA,E,kDACF,WAAYC,GAAO,IAAD,8BACd,cAAMA,IAOVC,QAAU,SAACC,GACP,OAAS,IAANA,EACQ,oBAEA,0BAZG,EAiBlBC,SAAW,WAGP,OAFY,EAAKH,MAAMI,MAAMC,QAGzB,KAAK,EACD,MAAO,uBACX,KAAK,EACD,MAAO,gBACX,KAAK,EAEL,QACI,MAAO,kBA5BD,EAiClBC,SAAW,SAACC,GACR,IAAIC,EAAS,4CAA4CC,KAAKF,GAC9D,OAAOC,EAAS,CACZE,EAAGC,SAASH,EAAO,GAAI,IACvBI,EAAGD,SAASH,EAAO,GAAI,IACvBK,EAAGF,SAASH,EAAO,GAAI,KACvB,MAvCU,EA0ClBM,OAAS,SAACC,GACN,IAAIL,EAAI,EAAKJ,SAASS,GAAIL,EACtBE,EAAI,EAAKN,SAASS,GAAIH,EACtBC,EAAI,EAAKP,SAASS,GAAIF,EAGtBG,EAAQ,+BAA+BP,KAFjC,OAAOC,EAAE,IAAIE,EAAE,IAAIC,EAAE,KAO/B,OAJ0B,IAAXG,EAAM,KACF,IAAXA,EAAM,KACK,IAAXA,EAAM,IACR,IAEK,qCAEA,qCArDX,EAAKC,MAAQ,GAHC,E,0CA4DlB,WAAS,IAAD,OAEJ,OACI,uBAAKC,UAAU,cACc,IAAxBC,KAAKnB,MAAMoB,UACR,sBAAIF,UAAU,sCAAsCG,wBAAyB,CAACC,OAAQC,IAAgBC,yBAAe,gBAAC,IAAD,CAAMC,MAAQN,KAAKnB,MAAM0B,eAElJ,uBAAKR,UAAU,OACVC,KAAKnB,MAAMI,MAAMuB,KAAI,SAACF,EAAOvB,GAC1B,IAAI0B,EAAU,gBAAgBH,EAAMI,MACpC,OACI,uBAAKC,IAAK5B,EAAGgB,UAAW,EAAKf,YACzB,uBAAKe,UAAW,EAAKjB,QAAQC,IACzB,sBAAIgB,UAAU,wCAAwCO,EAAMM,OAC5D,uBAAKb,UAAW,EAAKJ,OAAOW,EAAMV,IAAKiB,MAAO,CAACC,gBAAiBR,EAAMV,KAClE,qBAAGG,UAAU,MAAMG,wBAAyB,CAACC,OAAQC,IAAgBC,yBAAe,gBAAC,IAAD,CAAMC,MAAQA,EAAMS,oBAE5G,uBAAKhB,UAAU,yBACX,uBAAKA,UAAU,QACX,qBAAGA,UAAU,gCAAb,SACA,qBAAGA,UAAU,mBAAb,UAAkCO,EAAMU,QAE5C,sBAAIjB,UAAU,SACd,0BAAQkB,cAAY,QAAQC,cAAaT,EAASV,UAAU,uDAA5D,8B,GApFlBoB,aAiGPvC","file":"static/js/26.3e9b1725.chunk.js","sourcesContent":["//** Standard Frameworks */\r\nimport * as React from 'react'\r\n\r\n//** Helpers */\r\n//** Personalization */\r\nimport Text from \"../../helper/Text\";\r\nimport { renderToString } from 'react-dom/server';\r\nimport ReactHtmlParser from 'react-html-parser'; \r\n\r\n/**\r\n * Section: Pricing\r\n */\r\nclass Pricing extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state = {\r\n           \r\n        }\r\n    }\r\n\r\n    getType = (i) => {\r\n        if(i === 1){\r\n            return 'card premium pb-4';                 \r\n        }else{\r\n            return 'card pricing-card pb-4';\r\n        }\r\n    }\r\n\r\n    //** Get column based on item count */\r\n    getWidth = () => {\r\n        let count = this.props.cards.length;\r\n        \r\n        switch (count) {\r\n            case 1:\r\n                return \"col-md-6 m-auto mb-4\";\r\n            case 2:\r\n                return \"col-md-6 mb-4\";\r\n            case 3:\r\n                return \"col-md-4 mb-4\";\r\n            default:\r\n                return \"col-md-4 mb-4\";\r\n        }\r\n    }\r\n\r\n    //** Detect if Text should be white or black */\r\n    hexToRgb = (hex) => {\r\n        var result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\r\n        return result ? {\r\n            r: parseInt(result[1], 16),\r\n            g: parseInt(result[2], 16),\r\n            b: parseInt(result[3], 16)\r\n        } : null;\r\n    }\r\n\r\n    isDark = (bg) => {\r\n        let r = this.hexToRgb(bg).r;\r\n        let g = this.hexToRgb(bg).g;\r\n        let b = this.hexToRgb(bg).b;\r\n        let rgb = \"rgb(\"+r+\",\"+g+\",\"+b+\")\";\r\n\r\n        let match = /rgb\\((\\d+).*?(\\d+).*?(\\d+)\\)/.exec(rgb);\r\n        let result = ( match[1] & 255 )\r\n            + ( match[2] & 255 )\r\n            + ( match[3] & 255 )\r\n            < 3 * 256 / 1.2;\r\n        if(result){\r\n            return \"pricing-description p-4 text-white\";\r\n        } else {\r\n            return \"pricing-description p-4 text-grey\";\r\n        }\r\n    }\r\n\r\n    render(){\r\n        \r\n        return (\r\n            <div className=\"container\">\r\n                {this.props.showHead === true &&\r\n                    <h2 className=\"h1-responsive font-weight-bold mb-5\" dangerouslySetInnerHTML={{__html: ReactHtmlParser(renderToString(<Text value={ this.props.heading }/>))}}></h2>\r\n                }\r\n                <div className=\"row\">\r\n                    {this.props.cards.map((value, i) => {\r\n                        let modalID = \"#paymentModal\"+value.index;\r\n                        return (\r\n                            <div key={i} className={this.getWidth()}>\r\n                                <div className={this.getType(i)}>\r\n                                    <h3 className=\"text-uppercase font-weight-bold my-4\">{value.title}</h3>\r\n                                    <div className={this.isDark(value.bg)} style={{backgroundColor: value.bg}}>\r\n                                        <p className=\"m-0\" dangerouslySetInnerHTML={{__html: ReactHtmlParser(renderToString(<Text value={ value.description }/>))}}></p>\r\n                                    </div>\r\n                                    <div className=\"card-body striped p-0\">\r\n                                        <div className=\"py-4\">\r\n                                            <p className=\"text-uppercase mb-0 pricetag\">Preis</p>\r\n                                            <p className=\"text-muted mb-0\">â‚¬ {value.price}</p>\r\n                                        </div>\r\n                                        <hr className=\"mt-0\"/>\r\n                                        <button data-toggle=\"modal\" data-target={modalID} className=\"btn btn-rounded btn-pharmaziegasse font-weight-bold\">Jetzt starten!</button>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        )\r\n                    })}\r\n                    \r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Pricing\r\n"],"sourceRoot":""}